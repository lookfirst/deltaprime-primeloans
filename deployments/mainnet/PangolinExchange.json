{
  "address": "0x8FE3842e0B7472a57f2A2D56cF6bCe08517A1De0",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            }
          ],
          "indexed": false,
          "internalType": "struct IAssetsExchange.Asset[]",
          "name": "assets",
          "type": "tuple[]"
        }
      ],
      "name": "AssetsAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "removedAssets",
          "type": "bytes32[]"
        }
      ],
      "name": "AssetsRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "TokenPurchase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "success",
          "type": "bool"
        }
      ],
      "name": "TokenSell",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_token",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exactERC20AmountOut",
          "type": "uint256"
        }
      ],
      "name": "buyAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllAssets",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "result",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_asset",
          "type": "bytes32"
        }
      ],
      "name": "getAssetAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_exactAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getEstimatedAVAXForERC20Token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getEstimatedAVAXFromERC20Token",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_exactAmountOut",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getMinimumERC20TokenAmountForExactAVAX",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_pangolinRouter",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IAssetsExchange.Asset[]",
          "name": "supportedAssets",
          "type": "tuple[]"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32[]",
          "name": "_assets",
          "type": "bytes32[]"
        }
      ],
      "name": "removeAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_token",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_exactERC20AmountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAvaxAmountOut",
          "type": "uint256"
        }
      ],
      "name": "sellAsset",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "asset",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "assetAddress",
              "type": "address"
            }
          ],
          "internalType": "struct IAssetsExchange.Asset[]",
          "name": "_assets",
          "type": "tuple[]"
        }
      ],
      "name": "updateAssets",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x9d754b4edeedd90c1c28c0d761876be79d5e471d8c7872ecc79d32c00cac51b9",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x8FE3842e0B7472a57f2A2D56cF6bCe08517A1De0",
    "transactionIndex": 0,
    "gasUsed": "2972293",
    "logsBloom": "0x
    "blockHash": "0x85b10e05f6992a94e112038b164e8fa22a39f1e68490d43e86714e3eb153ffb6",
    "transactionHash": "0x9d754b4edeedd90c1c28c0d761876be79d5e471d8c7872ecc79d32c00cac51b9",
    "logs": [],
    "blockNumber": 11644625,
    "cumulativeGasUsed": "2972293",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5163c4dfae641bfa3d55db90bcc1cfb5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"indexed\":false,\"internalType\":\"struct IAssetsExchange.Asset[]\",\"name\":\"assets\",\"type\":\"tuple[]\"}],\"name\":\"AssetsAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"removedAssets\",\"type\":\"bytes32[]\"}],\"name\":\"AssetsRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"TokenPurchase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"success\",\"type\":\"bool\"}],\"name\":\"TokenSell\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exactERC20AmountOut\",\"type\":\"uint256\"}],\"name\":\"buyAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllAssets\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"result\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_asset\",\"type\":\"bytes32\"}],\"name\":\"getAssetAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exactAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getEstimatedAVAXForERC20Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getEstimatedAVAXFromERC20Token\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_exactAmountOut\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getMinimumERC20TokenAmountForExactAVAX\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_pangolinRouter\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct IAssetsExchange.Asset[]\",\"name\":\"supportedAssets\",\"type\":\"tuple[]\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_assets\",\"type\":\"bytes32[]\"}],\"name\":\"removeAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_token\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_exactERC20AmountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAvaxAmountOut\",\"type\":\"uint256\"}],\"name\":\"sellAsset\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"asset\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"assetAddress\",\"type\":\"address\"}],\"internalType\":\"struct IAssetsExchange.Asset[]\",\"name\":\"_assets\",\"type\":\"tuple[]\"}],\"name\":\"updateAssets\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Contract allows user to invest into an ERC20 token This implementation uses the Pangolin DEX\",\"events\":{\"AssetsAdded((bytes32,address)[])\":{\"details\":\"emitted after the owner adds/updates assets\",\"params\":{\"assets\":\"added/updated assets*\"}},\"AssetsRemoved(bytes32[])\":{\"details\":\"emitted after the owner removes assets\",\"params\":{\"removedAssets\":\"removed assets*\"}},\"TokenPurchase(address,uint256,uint256,bool)\":{\"details\":\"emitted after a tokens were purchased\",\"params\":{\"amount\":\"the amount of token bought*\",\"buyer\":\"the address which bought tokens\"}},\"TokenSell(address,uint256,uint256,bool)\":{\"details\":\"emitted after a tokens were sold\",\"params\":{\"amount\":\"the amount of token sold*\",\"seller\":\"the address which sold tokens\"}}},\"kind\":\"dev\",\"methods\":{\"buyAsset(bytes32,uint256)\":{\"details\":\"_token ERC20 token's address_exactERC20AmountOut amount of the ERC20 token to be bought*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAssets(bytes32[])\":{\"details\":\"_assets assets to be removed*\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"sellAsset(bytes32,uint256,uint256)\":{\"details\":\"_token ERC20 token's address_exactERC20AmountIn amount of the ERC20 token to be sold_minAvaxAmountOut minimum amount of the AVAX token to be bought*\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateAssets((bytes32,address)[])\":{\"details\":\"_assets assets to be added/updated*\"}},\"title\":\"PangolinIntermediary\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"buyAsset(bytes32,uint256)\":{\"notice\":\"Buys selected ERC20 token with AVAX using the Pangolin DEX Refunds unused AVAX to the msg.sender\"},\"getAllAssets()\":{\"notice\":\"Returns all the supported assets keys*\"},\"getAssetAddress(bytes32)\":{\"notice\":\"Returns address of an asset*\"},\"getEstimatedAVAXForERC20Token(uint256,address)\":{\"notice\":\"Returns the minimum AVAX amount that is required to buy _exactAmountOut of _token ERC20 token.*\"},\"getEstimatedAVAXFromERC20Token(uint256,address)\":{\"notice\":\"Returns the maximum AVAX amount that will be obtained in the event of selling _amountIn of _token ERC20 token.*\"},\"getMinimumERC20TokenAmountForExactAVAX(uint256,address)\":{\"notice\":\"Returns the minimum token amount that is required to be sold to receive _exactAmountOut of AVAX.*\"},\"removeAssets(bytes32[])\":{\"notice\":\"Removes supported assets\"},\"sellAsset(bytes32,uint256,uint256)\":{\"notice\":\"Sells selected ERC20 token for AVAX\"},\"updateAssets((bytes32,address)[])\":{\"notice\":\"Adds or updates supported assets\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PangolinIntermediary.sol\":\"PangolinIntermediary\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"@pangolindex/exchange-contracts/contracts/pangolin-periphery/interfaces/IPangolinRouter.sol\":{\"content\":\"pragma solidity >=0.6.2;\\n\\ninterface IPangolinRouter {\\n    function factory() external pure returns (address);\\n    function WAVAX() external pure returns (address);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB, uint liquidity);\\n    function addLiquidityAVAX(\\n        address token,\\n        uint amountTokenDesired,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external payable returns (uint amountToken, uint amountAVAX, uint liquidity);\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAX(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountToken, uint amountAVAX);\\n    function removeLiquidityWithPermit(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountA, uint amountB);\\n    function removeLiquidityAVAXWithPermit(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountToken, uint amountAVAX);\\n    function swapExactTokensForTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapTokensForExactTokens(\\n        uint amountOut,\\n        uint amountInMax,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external returns (uint[] memory amounts);\\n    function swapExactAVAXForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n    function swapTokensForExactAVAX(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapExactTokensForAVAX(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\\n        external\\n        returns (uint[] memory amounts);\\n    function swapAVAXForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\\n        external\\n        payable\\n        returns (uint[] memory amounts);\\n\\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\\n\\n    function removeLiquidityAVAXSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline\\n    ) external returns (uint amountAVAX);\\n    function removeLiquidityAVAXWithPermitSupportingFeeOnTransferTokens(\\n        address token,\\n        uint liquidity,\\n        uint amountTokenMin,\\n        uint amountAVAXMin,\\n        address to,\\n        uint deadline,\\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\\n    ) external returns (uint amountAVAX);\\n\\n    function swapExactTokensForTokensSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n    function swapExactAVAXForTokensSupportingFeeOnTransferTokens(\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external payable;\\n    function swapExactTokensForAVAXSupportingFeeOnTransferTokens(\\n        uint amountIn,\\n        uint amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint deadline\\n    ) external;\\n}\\n\",\"keccak256\":\"0x666f6558bb574d1df597ebd9b16d86bcf7eea6f89686b49e4993298e8b6ba990\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/PangolinIntermediary.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@pangolindex/exchange-contracts/contracts/pangolin-periphery/interfaces/IPangolinRouter.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./interfaces/IAssetsExchange.sol\\\";\\nimport \\\"./lib/Bytes32EnumerableMap.sol\\\";\\n\\n/**\\n * @title PangolinIntermediary\\n * @dev Contract allows user to invest into an ERC20 token\\n * This implementation uses the Pangolin DEX\\n */\\ncontract PangolinIntermediary is OwnableUpgradeable, IAssetsExchange, ReentrancyGuardUpgradeable {\\n  using TransferHelper for address payable;\\n  using TransferHelper for address;\\n\\n  /* ========= STATE VARIABLES ========= */\\n  IPangolinRouter pangolinRouter;\\n\\n  using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\\n  EnumerableMap.Bytes32ToAddressMap private supportedAssetsMap;\\n\\n  address private constant WAVAX_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\\n\\n  // first supportedAsset must be a blockchain native currency\\n  function initialize(address _pangolinRouter, Asset[] memory supportedAssets) external initializer {\\n    pangolinRouter = IPangolinRouter(_pangolinRouter);\\n\\n    _updateAssets(supportedAssets);\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n  }\\n\\n  /**\\n   * Buys selected ERC20 token with AVAX using the Pangolin DEX\\n   * Refunds unused AVAX to the msg.sender\\n   * @dev _token ERC20 token's address\\n   * @dev _exactERC20AmountOut amount of the ERC20 token to be bought\\n   **/\\n  function buyAsset(bytes32 _token, uint256 _exactERC20AmountOut) external payable override nonReentrant returns (bool) {\\n    require(_exactERC20AmountOut != 0, \\\"Amount of tokens to buy has to be greater than 0\\\");\\n    address tokenAddress = getAssetAddress(_token);\\n    uint256 amountIn = getEstimatedAVAXForERC20Token(_exactERC20AmountOut, tokenAddress);\\n    require(msg.value >= amountIn, \\\"Not enough funds were provided\\\");\\n\\n    address[] memory path = getPathForAVAXtoToken(tokenAddress);\\n    (bool success, ) = address(pangolinRouter).call{value: msg.value}(\\n      abi.encodeWithSignature(\\\"swapAVAXForExactTokens(uint256,address[],address,uint256)\\\", _exactERC20AmountOut, path, msg.sender, block.timestamp)\\n    );\\n\\n    payable(msg.sender).safeTransferETH(address(this).balance);\\n    emit TokenPurchase(msg.sender, _exactERC20AmountOut, block.timestamp, success);\\n    return success;\\n  }\\n\\n  /**\\n   * Sells selected ERC20 token for AVAX\\n   * @dev _token ERC20 token's address\\n   * @dev _exactERC20AmountIn amount of the ERC20 token to be sold\\n   * @dev _minAvaxAmountOut minimum amount of the AVAX token to be bought\\n   **/\\n  function sellAsset(bytes32 _token, uint256 _exactERC20AmountIn, uint256 _minAvaxAmountOut) external override nonReentrant returns (bool) {\\n    require(_exactERC20AmountIn > 0, \\\"Amount of tokens to sell has to be greater than 0\\\");\\n\\n    address tokenAddress = getAssetAddress(_token);\\n    IERC20 token = IERC20(tokenAddress);\\n    address(token).safeApprove(address(pangolinRouter), 0);\\n    address(token).safeApprove(address(pangolinRouter), _exactERC20AmountIn);\\n\\n    (bool success, ) = address(pangolinRouter).call{value: 0}(\\n      abi.encodeWithSignature(\\\"swapExactTokensForAVAX(uint256,uint256,address[],address,uint256)\\\", _exactERC20AmountIn, _minAvaxAmountOut, getPathForTokenToAVAX(tokenAddress), msg.sender, block.timestamp)\\n    );\\n\\n    if (!success) {\\n      address(token).safeTransfer(msg.sender, token.balanceOf(address(this)));\\n      return false;\\n    }\\n    payable(msg.sender).safeTransferETH(address(this).balance);\\n    emit TokenSell(msg.sender, _exactERC20AmountIn, block.timestamp, success);\\n    return true;\\n  }\\n\\n  /**\\n   * Adds or updates supported assets\\n   * @dev _assets assets to be added or updated\\n   **/\\n  function _updateAssets(Asset[] memory _assets) internal {\\n    for (uint256 i = 0; i < _assets.length; i++) {\\n      require(_assets[i].asset != \\\"\\\", \\\"Cannot set an empty string asset.\\\");\\n      require(_assets[i].assetAddress != address(0), \\\"Cannot set an empty address.\\\");\\n\\n      EnumerableMap.set(supportedAssetsMap, _assets[i].asset, _assets[i].assetAddress);\\n    }\\n\\n    emit AssetsAdded(_assets);\\n  }\\n\\n  /**\\n   * Adds or updates supported assets\\n   * @dev _assets assets to be added/updated\\n   **/\\n  function updateAssets(Asset[] memory _assets) external override onlyOwner {\\n    _updateAssets(_assets);\\n  }\\n\\n  /**\\n   * Removes supported assets\\n   * @dev _assets assets to be removed\\n   **/\\n  function removeAssets(bytes32[] calldata _assets) external override onlyOwner {\\n    for (uint256 i = 0; i < _assets.length; i++) {\\n      EnumerableMap.remove(supportedAssetsMap, _assets[i]);\\n    }\\n\\n    emit AssetsRemoved(_assets);\\n  }\\n\\n  /**\\n   * Returns all the supported assets keys\\n   **/\\n  function getAllAssets() external view override returns (bytes32[] memory result) {\\n    return supportedAssetsMap._inner._keys._inner._values;\\n  }\\n\\n  /**\\n   * Returns address of an asset\\n   **/\\n  function getAssetAddress(bytes32 _asset) public view override returns (address) {\\n    (, address assetAddress) = EnumerableMap.tryGet(supportedAssetsMap, _asset);\\n    require(assetAddress != address(0), \\\"Asset not supported.\\\");\\n\\n    return assetAddress;\\n  }\\n\\n  /* ========== RECEIVE AVAX FUNCTION ========== */\\n  receive() external payable {}\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  // Initial audit comment: Three below functions can in theory fail if there would be no liquidity at DEX but in this case\\n  // we can just remove a given asset from supported assets or change all calls to the below functions to an external .call\\n  // and handle a failure in our code. It is yet to be decided upon.\\n\\n  /**\\n   * Returns the minimum token amount that is required to be sold to receive _exactAmountOut of AVAX.\\n   **/\\n  function getMinimumERC20TokenAmountForExactAVAX(uint256 _exactAmountOut, address _token) public view override returns (uint256) {\\n    address[] memory path = getPathForTokenToAVAX(_token);\\n\\n    return pangolinRouter.getAmountsIn(_exactAmountOut, path)[0];\\n  }\\n\\n  /**\\n   * Returns the minimum AVAX amount that is required to buy _exactAmountOut of _token ERC20 token.\\n   **/\\n  function getEstimatedAVAXForERC20Token(uint256 _exactAmountOut, address _token) public view returns (uint256) {\\n    address[] memory path = getPathForAVAXtoToken(_token);\\n\\n    return pangolinRouter.getAmountsIn(_exactAmountOut, path)[0];\\n  }\\n\\n  /**\\n   * Returns the maximum AVAX amount that will be obtained in the event of selling _amountIn of _token ERC20 token.\\n   **/\\n  function getEstimatedAVAXFromERC20Token(uint256 _amountIn, address _token) public view override returns (uint256) {\\n    address[] memory path = getPathForTokenToAVAX(_token);\\n\\n    return pangolinRouter.getAmountsOut(_amountIn, path)[1];\\n  }\\n\\n  /**\\n   * Returns a path containing WAVAX token's address and chosen ERC20 token's address\\n   * @dev _token ERC20 token's address\\n   **/\\n  function getPathForAVAXtoToken(address _token) private view returns (address[] memory) {\\n    address[] memory path = new address[](2);\\n    path[0] = WAVAX_ADDRESS;\\n    path[1] = _token;\\n    return path;\\n  }\\n\\n  /**\\n   * Returns a path containing chosen ERC20 token's address and WAVAX token's address\\n   * @dev _token ERC20 token's address\\n   **/\\n  function getPathForTokenToAVAX(address _token) private view returns (address[] memory) {\\n    address[] memory path = new address[](2);\\n    path[0] = _token;\\n    path[1] = WAVAX_ADDRESS;\\n    return path;\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev emitted after a tokens were purchased\\n   * @param buyer the address which bought tokens\\n   * @param amount the amount of token bought\\n   **/\\n  event TokenPurchase(address indexed buyer, uint256 amount, uint256 timestamp, bool success);\\n\\n  /**\\n   * @dev emitted after a tokens were sold\\n   * @param seller the address which sold tokens\\n   * @param amount the amount of token sold\\n   **/\\n  event TokenSell(address indexed seller, uint256 amount, uint256 timestamp, bool success);\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev emitted after the owner adds/updates assets\\n   * @param assets added/updated assets\\n   **/\\n  event AssetsAdded(Asset[] assets);\\n\\n  /**\\n   * @dev emitted after the owner removes assets\\n   * @param removedAssets removed assets\\n   **/\\n  event AssetsRemoved(bytes32[] removedAssets);\\n}\",\"keccak256\":\"0x573bd358554b01388b2a58da63b3542c15286f18e2013f38b0020bd48cb2e782\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IAssetsExchange.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title IAssetExchange\\n * @dev Basic interface for investing into assets\\n * It could be linked either to DEX or to a synthetic assets platform\\n */\\ninterface IAssetsExchange {\\n  /**\\n   * For adding supported assets\\n   **/\\n  struct Asset {\\n    bytes32 asset;\\n    address assetAddress;\\n  }\\n\\n  /**\\n   * Buys selected asset with AVAX\\n   * @dev _asset asset code\\n   * @dev _exactERC20AmountOut exact amount of asset to be bought\\n   **/\\n  function buyAsset(bytes32 _asset, uint256 _exactERC20AmountOut) external payable returns (bool);\\n\\n  /**\\n   * Sells selected asset for AVAX\\n   * @dev _asset asset code\\n   * @dev _exactERC20AmountIn amount to be bought\\n   * @dev _minAvaxAmountOut minimum amount of the AVAX token to be bought\\n   **/\\n  function sellAsset(bytes32 _asset, uint256 _exactERC20AmountIn, uint256 _minAvaxAmountOut) external returns (bool);\\n\\n  /**\\n   * Returns the maximum AVAX amount that will be obtained in the event of selling _amountIn of _token ERC20 token.\\n   **/\\n  function getEstimatedAVAXFromERC20Token(uint256 _amountIn, address _token) external returns (uint256);\\n\\n  /**\\n   * Returns the minimum token amount that is required to be sold to receive _exactAmountOut of AVAX.\\n   **/\\n  function getMinimumERC20TokenAmountForExactAVAX(uint256 _exactAmountOut, address _token) external returns (uint256);\\n\\n  /**\\n   * Adds or updates supported assets\\n   * First asset must be a blockchain native currency\\n   * @dev _assets assets to be added or updated\\n   **/\\n  function updateAssets(Asset[] memory _assets) external;\\n\\n  /**\\n   * Removes supported assets\\n   * @dev _assets assets to be removed\\n   **/\\n  function removeAssets(bytes32[] calldata _assets) external;\\n\\n  /**\\n   * Returns all the supported assets keys\\n   **/\\n  function getAllAssets() external view returns (bytes32[] memory);\\n\\n  /**\\n   * Returns address of an asset\\n   **/\\n  function getAssetAddress(bytes32 _asset) external view returns (address);\\n}\\n\",\"keccak256\":\"0xb7f937c7eff1596aabf6fef207be3dddf9ff83fe479664a5108ecbb44939a354\",\"license\":\"UNLICENSED\"},\"contracts/lib/Bytes32EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\\n\\n/**\\n * @dev Library for managing an enumerable variant of Solidity's\\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\\n * type.\\n *\\n * Maps have the following properties:\\n *\\n * - Entries are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n */\\nlibrary EnumerableMap {\\n  using EnumerableSet for EnumerableSet.Bytes32Set;\\n\\n  // To implement this library for multiple types with as little code\\n  // repetition as possible, we write it in terms of a generic Map type with\\n  // bytes32 keys and values.\\n  // The Map implementation uses private functions, and user-facing\\n  // implementations (such as Bytes32ToAddressMap) are just wrappers around\\n  // the underlying Map.\\n  // This means that we can only create new EnumerableMaps for types that fit\\n  // in bytes32.\\n\\n  struct Map {\\n    // Storage of keys\\n    EnumerableSet.Bytes32Set _keys;\\n    mapping(bytes32 => bytes32) _values;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n   * key. O(1).\\n   *\\n   * Returns true if the key was added to the map, that is if it was not\\n   * already present.\\n   */\\n  function _set(\\n    Map storage map,\\n    bytes32 key,\\n    bytes32 value\\n  ) private returns (bool) {\\n    map._values[key] = value;\\n    return map._keys.add(key);\\n  }\\n\\n  /**\\n   * @dev Removes a key-value pair from a map. O(1).\\n   *\\n   * Returns true if the key was removed from the map, that is if it was present.\\n   */\\n  function _remove(Map storage map, bytes32 key) private returns (bool) {\\n    delete map._values[key];\\n    return map._keys.remove(key);\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n   */\\n  function _contains(Map storage map, bytes32 key) private view returns (bool) {\\n    return map._keys.contains(key);\\n  }\\n\\n  /**\\n   * @dev Returns the number of key-value pairs in the map. O(1).\\n   */\\n  function _length(Map storage map) private view returns (uint256) {\\n    return map._keys.length();\\n  }\\n\\n  /**\\n   * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n   *\\n   * Note that there are no guarantees on the ordering of entries inside the\\n   * array, and it may change when more entries are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\\n    bytes32 key = map._keys.at(index);\\n    return (key, map._values[key]);\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`.  O(1).\\n   * Does not revert if `key` is not in the map.\\n   */\\n  function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\\n    bytes32 value = map._values[key];\\n    if (value == bytes32(0)) {\\n      return (_contains(map, key), bytes32(0));\\n    } else {\\n      return (true, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`.  O(1).\\n   *\\n   * Requirements:\\n   *\\n   * - `key` must be in the map.\\n   */\\n  function _get(Map storage map, bytes32 key) private view returns (bytes32) {\\n    bytes32 value = map._values[key];\\n    require(value != 0 || _contains(map, key), \\\"EnumerableMap: nonexistent key\\\");\\n    return value;\\n  }\\n\\n  /**\\n   * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {_tryGet}.\\n   */\\n  function _get(\\n    Map storage map,\\n    bytes32 key,\\n    string memory errorMessage\\n  ) private view returns (bytes32) {\\n    bytes32 value = map._values[key];\\n    require(value != 0 || _contains(map, key), errorMessage);\\n    return value;\\n  }\\n\\n  // Bytes32ToAddressMap\\n\\n  struct Bytes32ToAddressMap {\\n    Map _inner;\\n  }\\n\\n  /**\\n   * @dev Adds a key-value pair to a map, or updates the value for an existing\\n   * key. O(1).\\n   *\\n   * Returns true if the key was added to the map, that is if it was not\\n   * already present.\\n   */\\n  function set(\\n    Bytes32ToAddressMap storage map,\\n    bytes32 key,\\n    address value\\n  ) internal returns (bool) {\\n    return _set(map._inner, key, bytes32(uint256(uint160(value))));\\n  }\\n\\n  /**\\n   * @dev Removes a value from a set. O(1).\\n   *\\n   * Returns true if the key was removed from the map, that is if it was present.\\n   */\\n  function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\\n    return _remove(map._inner, key);\\n  }\\n\\n  /**\\n   * @dev Returns true if the key is in the map. O(1).\\n   */\\n  function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\\n    return _contains(map._inner, key);\\n  }\\n\\n  /**\\n   * @dev Returns the number of elements in the map. O(1).\\n   */\\n  function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\\n    return _length(map._inner);\\n  }\\n\\n  /**\\n   * @dev Returns the element stored at position `index` in the set. O(1).\\n   * Note that there are no guarantees on the ordering of values inside the\\n   * array, and it may change when more values are added or removed.\\n   *\\n   * Requirements:\\n   *\\n   * - `index` must be strictly less than {length}.\\n   */\\n  function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\\n    (bytes32 key, bytes32 value) = _at(map._inner, index);\\n    return (key, address(uint160(uint256(value))));\\n  }\\n\\n  /**\\n   * @dev Tries to returns the value associated with `key`.  O(1).\\n   * Does not revert if `key` is not in the map.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\\n    (bool success, bytes32 value) = _tryGet(map._inner, key);\\n    return (success, address(uint160(uint256(value))));\\n  }\\n\\n  /**\\n   * @dev Returns the value associated with `key`.  O(1).\\n   *\\n   * Requirements:\\n   *\\n   * - `key` must be in the map.\\n   */\\n  function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\\n    return address(uint160(uint256(_get(map._inner, key))));\\n  }\\n\\n  /**\\n   * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n   *\\n   * CAUTION: This function is deprecated because it requires allocating memory for the error\\n   * message unnecessarily. For custom revert reasons use {tryGet}.\\n   */\\n  function get(\\n    Bytes32ToAddressMap storage map,\\n    bytes32 key,\\n    string memory errorMessage\\n  ) internal view returns (address) {\\n    return address(uint160(uint256(_get(map._inner, key, errorMessage))));\\n  }\\n}\\n\",\"keccak256\":\"0x0592a18634d331a30ac2cb8ad04939fb0a3520900de78bccb159ab023097a2cf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50613523806100206000396000f3fe6080604052600436106100c65760003560e01c8063772ee3ae1161007f5780639ac34dd3116100595780639ac34dd314610278578063b171aa63146102b5578063c9fb2e76146102de578063f2fde38b1461031b576100cd565b8063772ee3ae146101e7578063774ca019146102105780638da5cb5b1461024d576100cd565b80632acada4d146100d25780632efefbe2146100fd57806348eedd6b146101265780635d8874e914610163578063715018a61461019357806376d02895146101aa576100cd565b366100cd57005b600080fd5b3480156100de57600080fd5b506100e7610344565b6040516100f49190612ab6565b60405180910390f35b34801561010957600080fd5b50610124600480360381019061011f919061238b565b6103a8565b005b34801561013257600080fd5b5061014d60048036038101906101489190612534565b6104e8565b60405161015a9190612afa565b60405180910390f35b61017d600480360381019061017891906124f8565b6108ac565b60405161018a9190612afa565b60405180910390f35b34801561019f57600080fd5b506101a8610b5e565b005b3480156101b657600080fd5b506101d160048036038101906101cc91906124cf565b610be6565b6040516101de9190612a4e565b60405180910390f35b3480156101f357600080fd5b5061020e60048036038101906102099190612424565b610c70565b005b34801561021c57600080fd5b50610237600480360381019061023291906125ac565b610cf8565b6040516102449190612cd5565b60405180910390f35b34801561025957600080fd5b50610262610e02565b60405161026f9190612a4e565b60405180910390f35b34801561028457600080fd5b5061029f600480360381019061029a91906125ac565b610e2c565b6040516102ac9190612cd5565b60405180910390f35b3480156102c157600080fd5b506102dc60048036038101906102d791906123df565b610f36565b005b3480156102ea57600080fd5b50610305600480360381019061030091906125ac565b61105c565b6040516103129190612cd5565b60405180910390f35b34801561032757600080fd5b50610342600480360381019061033d9190612362565b611166565b005b6060609860000160000160000160000180548060200260200160405190810160405280929190818152602001828054801561039e57602002820191906000526020600020905b81548152602001906001019080831161038a575b5050505050905090565b600060019054906101000a900460ff166103d05760008054906101000a900460ff16156103d9565b6103d861125e565b5b610418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040f90612b95565b60405180910390fd5b60008060019054906101000a900460ff161590508015610468576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b82609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506104b28261126f565b6104ba61149a565b6104c26114f3565b80156104e35760008060016101000a81548160ff0219169083151502179055505b505050565b600060026065541415610530576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052790612c95565b60405180910390fd5b60026065819055506000831161057b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057290612c35565b60405180910390fd5b600061058685610be6565b905060008190506105db609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008373ffffffffffffffffffffffffffffffffffffffff1661154c9092919063ffffffff16565b610628609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868373ffffffffffffffffffffffffffffffffffffffff1661154c9092919063ffffffff16565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000878761067087611682565b3342604051602401610686959493929190612d6c565b6040516020818303038152906040527f676528d1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107109190612a37565b60006040518083038185875af1925050503d806000811461074d576040519150601f19603f3d011682016040523d82523d6000602084013e610752565b606091505b505090508061081a5761080e338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107989190612a4e565b60206040518083038186803b1580156107b057600080fd5b505afa1580156107c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e89190612583565b8473ffffffffffffffffffffffffffffffffffffffff166117ff9092919063ffffffff16565b6000935050505061089d565b610843473373ffffffffffffffffffffffffffffffffffffffff1661193590919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f288a4cc64e3791e9b02d1fb713d082cf2048067b99f04489649843493b87bc0c87428460405161088d93929190612dc6565b60405180910390a2600193505050505b60016065819055509392505050565b6000600260655414156108f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108eb90612c95565b60405180910390fd5b60026065819055506000821415610940576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093790612bf5565b60405180910390fd5b600061094b84610be6565b905060006109598483610cf8565b90508034101561099e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099590612b75565b60405180910390fd5b60006109a983611a5b565b90506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1634878433426040516024016109fe9493929190612d20565b6040516020818303038152906040527f8a657e67000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610a889190612a37565b60006040518083038185875af1925050503d8060008114610ac5576040519150601f19603f3d011682016040523d82523d6000602084013e610aca565b606091505b50509050610af7473373ffffffffffffffffffffffffffffffffffffffff1661193590919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f7082d72127d5c79824d96471137e36c23d15988ccb0434a671f4dafc1ff86b64874284604051610b4193929190612dc6565b60405180910390a280945050505050600160658190555092915050565b610b66611bd8565b73ffffffffffffffffffffffffffffffffffffffff16610b84610e02565b73ffffffffffffffffffffffffffffffffffffffff1614610bda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd190612bb5565b60405180910390fd5b610be46000611be0565b565b600080610bf4609884611ca6565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5e90612cb5565b60405180910390fd5b80915050919050565b610c78611bd8565b73ffffffffffffffffffffffffffffffffffffffff16610c96610e02565b73ffffffffffffffffffffffffffffffffffffffff1614610cec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce390612bb5565b60405180910390fd5b610cf58161126f565b50565b600080610d0483611a5b565b9050609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f00ca7485836040518363ffffffff1660e01b8152600401610d63929190612cf0565b60006040518083038186803b158015610d7b57600080fd5b505afa158015610d8f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610db89190612465565b600081518110610df1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015191505092915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610e3883611682565b9050609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f00ca7485836040518363ffffffff1660e01b8152600401610e97929190612cf0565b60006040518083038186803b158015610eaf57600080fd5b505afa158015610ec3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610eec9190612465565b600081518110610f25577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015191505092915050565b610f3e611bd8565b73ffffffffffffffffffffffffffffffffffffffff16610f5c610e02565b73ffffffffffffffffffffffffffffffffffffffff1614610fb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa990612bb5565b60405180910390fd5b60005b8282905081101561101e5761100a6098848484818110610ffe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135611ccf565b50808061101690613045565b915050610fb5565b507fd364029b03416d6689327e58714f1a57f1260011c572deeef07f01e7269ea1418282604051611050929190612a92565b60405180910390a15050565b60008061106883611682565b9050609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85836040518363ffffffff1660e01b81526004016110c7929190612cf0565b60006040518083038186803b1580156110df57600080fd5b505afa1580156110f3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061111c9190612465565b600181518110611155577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015191505092915050565b61116e611bd8565b73ffffffffffffffffffffffffffffffffffffffff1661118c610e02565b73ffffffffffffffffffffffffffffffffffffffff16146111e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d990612bb5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124990612b35565b60405180910390fd5b61125b81611be0565b50565b600061126930611ce6565b15905090565b60005b815181101561145f5760008282815181106112b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600001511415611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa90612b15565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16828281518110611354577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1614156113b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ae90612bd5565b60405180910390fd5b61144b60988383815181106113f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015184848151811061143a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151611d09565b50808061145790613045565b915050611272565b507fbbc4f85d38ccb337b12b9dd1f1ad7bcc6b844d56ba348ee8e466e0b017f4ee4b8160405161148f9190612ad8565b60405180910390a150565b600060019054906101000a900460ff166114e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e090612c55565b60405180910390fd5b6114f1611d3b565b565b600060019054906101000a900460ff16611542576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153990612c55565b60405180910390fd5b61154a611d9c565b565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3858560405160240161157e929190612a69565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516115cc9190612a37565b6000604051808303816000865af19150503d8060008114611609576040519150601f19603f3d011682016040523d82523d6000602084013e61160e565b606091505b509150915081801561163c575060008151148061163b57508080602001905181019061163a91906124a6565b5b5b61167b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167290612c15565b60405180910390fd5b5050505050565b60606000600267ffffffffffffffff8111156116c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156116f55781602001602082028036833780820191505090505b5090508281600081518110611733577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073b31f66aa3c1e785363f0875a1b74e27b85fd66c7816001815181106117bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080915050919050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401611831929190612a69565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161187f9190612a37565b6000604051808303816000865af19150503d80600081146118bc576040519150601f19603f3d011682016040523d82523d6000602084013e6118c1565b606091505b50915091508180156118ef57506000815114806118ee5750808060200190518101906118ed91906124a6565b5b5b61192e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192590612c75565b60405180910390fd5b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115611990577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156119c25781602001600182028036833780820191505090505b506040516119d09190612a37565b60006040518083038185875af1925050503d8060008114611a0d576040519150601f19603f3d011682016040523d82523d6000602084013e611a12565b606091505b5050905080611a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4d90612b55565b60405180910390fd5b505050565b60606000600267ffffffffffffffff811115611aa0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611ace5781602001602082028036833780820191505090505b50905073b31f66aa3c1e785363f0875a1b74e27b85fd66c781600081518110611b20577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600181518110611b95577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080915050919050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600080611cb98660000186611df5565b91509150818160001c9350935050509250929050565b6000611cde8360000183611e45565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000611d3284600001848473ffffffffffffffffffffffffffffffffffffffff1660001b611e7e565b90509392505050565b600060019054906101000a900460ff16611d8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8190612c55565b60405180910390fd5b611d9a611d95611bd8565b611be0565b565b600060019054906101000a900460ff16611deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de290612c55565b60405180910390fd5b6001606581905550565b60008060008460020160008581526020019081526020016000205490506000801b811415611e3557611e278585611eb9565b6000801b9250925050611e3e565b60018192509250505b9250929050565b600082600201600083815260200190815260200160002060009055611e768284600001611ed990919063ffffffff16565b905092915050565b60008184600201600085815260200190815260200160002081905550611eb08385600001611ef090919063ffffffff16565b90509392505050565b6000611ed18284600001611f0790919063ffffffff16565b905092915050565b6000611ee88360000183611f1e565b905092915050565b6000611eff83600001836120a4565b905092915050565b6000611f168360000183612114565b905092915050565b60008083600101600084815260200190815260200160002054905060008114612098576000600182611f509190612f4c565b9050600060018660000180549050611f689190612f4c565b9050818114612023576000866000018281548110611faf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110611ff9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061205d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061209e565b60009150505b92915050565b60006120b08383612114565b61210957826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061210e565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600061214a61214584612e22565b612dfd565b9050808382526020820190508285604086028201111561216957600080fd5b60005b85811015612199578161217f88826122ec565b84526020840193506040830192505060018101905061216c565b5050509392505050565b60006121b66121b184612e4e565b612dfd565b905080838252602082019050828560208602820111156121d557600080fd5b60005b8581101561220557816121eb888261234d565b8452602084019350602083019250506001810190506121d8565b5050509392505050565b60008135905061221e81613491565b92915050565b60008083601f84011261223657600080fd5b8235905067ffffffffffffffff81111561224f57600080fd5b60208301915083602082028301111561226757600080fd5b9250929050565b600082601f83011261227f57600080fd5b813561228f848260208601612137565b91505092915050565b600082601f8301126122a957600080fd5b81516122b98482602086016121a3565b91505092915050565b6000815190506122d1816134a8565b92915050565b6000813590506122e6816134bf565b92915050565b6000604082840312156122fe57600080fd5b6123086040612dfd565b90506000612318848285016122d7565b600083015250602061232c8482850161220f565b60208301525092915050565b600081359050612347816134d6565b92915050565b60008151905061235c816134d6565b92915050565b60006020828403121561237457600080fd5b60006123828482850161220f565b91505092915050565b6000806040838503121561239e57600080fd5b60006123ac8582860161220f565b925050602083013567ffffffffffffffff8111156123c957600080fd5b6123d58582860161226e565b9150509250929050565b600080602083850312156123f257600080fd5b600083013567ffffffffffffffff81111561240c57600080fd5b61241885828601612224565b92509250509250929050565b60006020828403121561243657600080fd5b600082013567ffffffffffffffff81111561245057600080fd5b61245c8482850161226e565b91505092915050565b60006020828403121561247757600080fd5b600082015167ffffffffffffffff81111561249157600080fd5b61249d84828501612298565b91505092915050565b6000602082840312156124b857600080fd5b60006124c6848285016122c2565b91505092915050565b6000602082840312156124e157600080fd5b60006124ef848285016122d7565b91505092915050565b6000806040838503121561250b57600080fd5b6000612519858286016122d7565b925050602061252a85828601612338565b9150509250929050565b60008060006060848603121561254957600080fd5b6000612557868287016122d7565b935050602061256886828701612338565b925050604061257986828701612338565b9150509250925092565b60006020828403121561259557600080fd5b60006125a38482850161234d565b91505092915050565b600080604083850312156125bf57600080fd5b60006125cd85828601612338565b92505060206125de8582860161220f565b9150509250929050565b60006125f48383612630565b60208301905092915050565b600061260c83836127cf565b60208301905092915050565b600061262483836129f9565b60408301905092915050565b61263981612f80565b82525050565b61264881612f80565b82525050565b600061265982612eaa565b6126638185612efd565b935061266e83612e7a565b8060005b8381101561269f57815161268688826125e8565b975061269183612ed6565b925050600181019050612672565b5085935050505092915050565b60006126b88385612f0e565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156126e757600080fd5b6020830292506126f8838584612fd2565b82840190509392505050565b600061270f82612eb5565b6127198185612f0e565b935061272483612e8a565b8060005b8381101561275557815161273c8882612600565b975061274783612ee3565b925050600181019050612728565b5085935050505092915050565b600061276d82612ec0565b6127778185612f1f565b935061278283612e9a565b8060005b838110156127b357815161279a8882612618565b97506127a583612ef0565b925050600181019050612786565b5085935050505092915050565b6127c981612f92565b82525050565b6127d881612f9e565b82525050565b60006127e982612ecb565b6127f38185612f30565b9350612803818560208601612fe1565b80840191505092915050565b600061281c602183612f3b565b9150612827826130fd565b604082019050919050565b600061283f602683612f3b565b915061284a8261314c565b604082019050919050565b6000612862603483612f3b565b915061286d8261319b565b604082019050919050565b6000612885601e83612f3b565b9150612890826131ea565b602082019050919050565b60006128a8602e83612f3b565b91506128b382613213565b604082019050919050565b60006128cb602083612f3b565b91506128d682613262565b602082019050919050565b60006128ee601c83612f3b565b91506128f98261328b565b602082019050919050565b6000612911603083612f3b565b915061291c826132b4565b604082019050919050565b6000612934602b83612f3b565b915061293f82613303565b604082019050919050565b6000612957603183612f3b565b915061296282613352565b604082019050919050565b600061297a602b83612f3b565b9150612985826133a1565b604082019050919050565b600061299d602d83612f3b565b91506129a8826133f0565b604082019050919050565b60006129c0601f83612f3b565b91506129cb8261343f565b602082019050919050565b60006129e3601483612f3b565b91506129ee82613468565b602082019050919050565b604082016000820151612a0f60008501826127cf565b506020820151612a226020850182612630565b50505050565b612a3181612fc8565b82525050565b6000612a4382846127de565b915081905092915050565b6000602082019050612a63600083018461263f565b92915050565b6000604082019050612a7e600083018561263f565b612a8b6020830184612a28565b9392505050565b60006020820190508181036000830152612aad8184866126ac565b90509392505050565b60006020820190508181036000830152612ad08184612704565b905092915050565b60006020820190508181036000830152612af28184612762565b905092915050565b6000602082019050612b0f60008301846127c0565b92915050565b60006020820190508181036000830152612b2e8161280f565b9050919050565b60006020820190508181036000830152612b4e81612832565b9050919050565b60006020820190508181036000830152612b6e81612855565b9050919050565b60006020820190508181036000830152612b8e81612878565b9050919050565b60006020820190508181036000830152612bae8161289b565b9050919050565b60006020820190508181036000830152612bce816128be565b9050919050565b60006020820190508181036000830152612bee816128e1565b9050919050565b60006020820190508181036000830152612c0e81612904565b9050919050565b60006020820190508181036000830152612c2e81612927565b9050919050565b60006020820190508181036000830152612c4e8161294a565b9050919050565b60006020820190508181036000830152612c6e8161296d565b9050919050565b60006020820190508181036000830152612c8e81612990565b9050919050565b60006020820190508181036000830152612cae816129b3565b9050919050565b60006020820190508181036000830152612cce816129d6565b9050919050565b6000602082019050612cea6000830184612a28565b92915050565b6000604082019050612d056000830185612a28565b8181036020830152612d17818461264e565b90509392505050565b6000608082019050612d356000830187612a28565b8181036020830152612d47818661264e565b9050612d56604083018561263f565b612d636060830184612a28565b95945050505050565b600060a082019050612d816000830188612a28565b612d8e6020830187612a28565b8181036040830152612da0818661264e565b9050612daf606083018561263f565b612dbc6080830184612a28565b9695505050505050565b6000606082019050612ddb6000830186612a28565b612de86020830185612a28565b612df560408301846127c0565b949350505050565b6000612e07612e18565b9050612e138282613014565b919050565b6000604051905090565b600067ffffffffffffffff821115612e3d57612e3c6130bd565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612e6957612e686130bd565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612f5782612fc8565b9150612f6283612fc8565b925082821015612f7557612f7461308e565b5b828203905092915050565b6000612f8b82612fa8565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612fff578082015181840152602081019050612fe4565b8381111561300e576000848401525b50505050565b61301d826130ec565b810181811067ffffffffffffffff8211171561303c5761303b6130bd565b5b80604052505050565b600061305082612fc8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156130835761308261308e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f43616e6e6f742073657420616e20656d70747920737472696e6720617373657460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b7f4e6f7420656e6f7567682066756e647320776572652070726f76696465640000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f742073657420616e20656d70747920616464726573732e00000000600082015250565b7f416d6f756e74206f6620746f6b656e7320746f206275792068617320746f206260008201527f652067726561746572207468616e203000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060008201527f726f7665206661696c6564000000000000000000000000000000000000000000602082015250565b7f416d6f756e74206f6620746f6b656e7320746f2073656c6c2068617320746f2060008201527f62652067726561746572207468616e2030000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f4173736574206e6f7420737570706f727465642e000000000000000000000000600082015250565b61349a81612f80565b81146134a557600080fd5b50565b6134b181612f92565b81146134bc57600080fd5b50565b6134c881612f9e565b81146134d357600080fd5b50565b6134df81612fc8565b81146134ea57600080fd5b5056fea2646970667358221220799968a05bc2581badec2388602ebb9f3e5c382778ebc1e4d24c6fb2721e983f64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100c65760003560e01c8063772ee3ae1161007f5780639ac34dd3116100595780639ac34dd314610278578063b171aa63146102b5578063c9fb2e76146102de578063f2fde38b1461031b576100cd565b8063772ee3ae146101e7578063774ca019146102105780638da5cb5b1461024d576100cd565b80632acada4d146100d25780632efefbe2146100fd57806348eedd6b146101265780635d8874e914610163578063715018a61461019357806376d02895146101aa576100cd565b366100cd57005b600080fd5b3480156100de57600080fd5b506100e7610344565b6040516100f49190612ab6565b60405180910390f35b34801561010957600080fd5b50610124600480360381019061011f919061238b565b6103a8565b005b34801561013257600080fd5b5061014d60048036038101906101489190612534565b6104e8565b60405161015a9190612afa565b60405180910390f35b61017d600480360381019061017891906124f8565b6108ac565b60405161018a9190612afa565b60405180910390f35b34801561019f57600080fd5b506101a8610b5e565b005b3480156101b657600080fd5b506101d160048036038101906101cc91906124cf565b610be6565b6040516101de9190612a4e565b60405180910390f35b3480156101f357600080fd5b5061020e60048036038101906102099190612424565b610c70565b005b34801561021c57600080fd5b50610237600480360381019061023291906125ac565b610cf8565b6040516102449190612cd5565b60405180910390f35b34801561025957600080fd5b50610262610e02565b60405161026f9190612a4e565b60405180910390f35b34801561028457600080fd5b5061029f600480360381019061029a91906125ac565b610e2c565b6040516102ac9190612cd5565b60405180910390f35b3480156102c157600080fd5b506102dc60048036038101906102d791906123df565b610f36565b005b3480156102ea57600080fd5b50610305600480360381019061030091906125ac565b61105c565b6040516103129190612cd5565b60405180910390f35b34801561032757600080fd5b50610342600480360381019061033d9190612362565b611166565b005b6060609860000160000160000160000180548060200260200160405190810160405280929190818152602001828054801561039e57602002820191906000526020600020905b81548152602001906001019080831161038a575b5050505050905090565b600060019054906101000a900460ff166103d05760008054906101000a900460ff16156103d9565b6103d861125e565b5b610418576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161040f90612b95565b60405180910390fd5b60008060019054906101000a900460ff161590508015610468576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b82609760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506104b28261126f565b6104ba61149a565b6104c26114f3565b80156104e35760008060016101000a81548160ff0219169083151502179055505b505050565b600060026065541415610530576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052790612c95565b60405180910390fd5b60026065819055506000831161057b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057290612c35565b60405180910390fd5b600061058685610be6565b905060008190506105db609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008373ffffffffffffffffffffffffffffffffffffffff1661154c9092919063ffffffff16565b610628609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16868373ffffffffffffffffffffffffffffffffffffffff1661154c9092919063ffffffff16565b6000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166000878761067087611682565b3342604051602401610686959493929190612d6c565b6040516020818303038152906040527f676528d1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516107109190612a37565b60006040518083038185875af1925050503d806000811461074d576040519150601f19603f3d011682016040523d82523d6000602084013e610752565b606091505b505090508061081a5761080e338373ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016107989190612a4e565b60206040518083038186803b1580156107b057600080fd5b505afa1580156107c4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e89190612583565b8473ffffffffffffffffffffffffffffffffffffffff166117ff9092919063ffffffff16565b6000935050505061089d565b610843473373ffffffffffffffffffffffffffffffffffffffff1661193590919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f288a4cc64e3791e9b02d1fb713d082cf2048067b99f04489649843493b87bc0c87428460405161088d93929190612dc6565b60405180910390a2600193505050505b60016065819055509392505050565b6000600260655414156108f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108eb90612c95565b60405180910390fd5b60026065819055506000821415610940576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093790612bf5565b60405180910390fd5b600061094b84610be6565b905060006109598483610cf8565b90508034101561099e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099590612b75565b60405180910390fd5b60006109a983611a5b565b90506000609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1634878433426040516024016109fe9493929190612d20565b6040516020818303038152906040527f8a657e67000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051610a889190612a37565b60006040518083038185875af1925050503d8060008114610ac5576040519150601f19603f3d011682016040523d82523d6000602084013e610aca565b606091505b50509050610af7473373ffffffffffffffffffffffffffffffffffffffff1661193590919063ffffffff16565b3373ffffffffffffffffffffffffffffffffffffffff167f7082d72127d5c79824d96471137e36c23d15988ccb0434a671f4dafc1ff86b64874284604051610b4193929190612dc6565b60405180910390a280945050505050600160658190555092915050565b610b66611bd8565b73ffffffffffffffffffffffffffffffffffffffff16610b84610e02565b73ffffffffffffffffffffffffffffffffffffffff1614610bda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bd190612bb5565b60405180910390fd5b610be46000611be0565b565b600080610bf4609884611ca6565b915050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610c67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c5e90612cb5565b60405180910390fd5b80915050919050565b610c78611bd8565b73ffffffffffffffffffffffffffffffffffffffff16610c96610e02565b73ffffffffffffffffffffffffffffffffffffffff1614610cec576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ce390612bb5565b60405180910390fd5b610cf58161126f565b50565b600080610d0483611a5b565b9050609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f00ca7485836040518363ffffffff1660e01b8152600401610d63929190612cf0565b60006040518083038186803b158015610d7b57600080fd5b505afa158015610d8f573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610db89190612465565b600081518110610df1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015191505092915050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080610e3883611682565b9050609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631f00ca7485836040518363ffffffff1660e01b8152600401610e97929190612cf0565b60006040518083038186803b158015610eaf57600080fd5b505afa158015610ec3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610eec9190612465565b600081518110610f25577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015191505092915050565b610f3e611bd8565b73ffffffffffffffffffffffffffffffffffffffff16610f5c610e02565b73ffffffffffffffffffffffffffffffffffffffff1614610fb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fa990612bb5565b60405180910390fd5b60005b8282905081101561101e5761100a6098848484818110610ffe577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020135611ccf565b50808061101690613045565b915050610fb5565b507fd364029b03416d6689327e58714f1a57f1260011c572deeef07f01e7269ea1418282604051611050929190612a92565b60405180910390a15050565b60008061106883611682565b9050609760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d06ca61f85836040518363ffffffff1660e01b81526004016110c7929190612cf0565b60006040518083038186803b1580156110df57600080fd5b505afa1580156110f3573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019061111c9190612465565b600181518110611155577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015191505092915050565b61116e611bd8565b73ffffffffffffffffffffffffffffffffffffffff1661118c610e02565b73ffffffffffffffffffffffffffffffffffffffff16146111e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111d990612bb5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611252576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124990612b35565b60405180910390fd5b61125b81611be0565b50565b600061126930611ce6565b15905090565b60005b815181101561145f5760008282815181106112b6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600001511415611303576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112fa90612b15565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16828281518110611354577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516020015173ffffffffffffffffffffffffffffffffffffffff1614156113b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113ae90612bd5565b60405180910390fd5b61144b60988383815181106113f5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516000015184848151811061143a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160200151611d09565b50808061145790613045565b915050611272565b507fbbc4f85d38ccb337b12b9dd1f1ad7bcc6b844d56ba348ee8e466e0b017f4ee4b8160405161148f9190612ad8565b60405180910390a150565b600060019054906101000a900460ff166114e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e090612c55565b60405180910390fd5b6114f1611d3b565b565b600060019054906101000a900460ff16611542576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161153990612c55565b60405180910390fd5b61154a611d9c565b565b6000808473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3858560405160240161157e929190612a69565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516115cc9190612a37565b6000604051808303816000865af19150503d8060008114611609576040519150601f19603f3d011682016040523d82523d6000602084013e61160e565b606091505b509150915081801561163c575060008151148061163b57508080602001905181019061163a91906124a6565b5b5b61167b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161167290612c15565b60405180910390fd5b5050505050565b60606000600267ffffffffffffffff8111156116c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156116f55781602001602082028036833780820191505090505b5090508281600081518110611733577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505073b31f66aa3c1e785363f0875a1b74e27b85fd66c7816001815181106117bc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080915050919050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401611831929190612a69565b6040516020818303038152906040529060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161187f9190612a37565b6000604051808303816000865af19150503d80600081146118bc576040519150601f19603f3d011682016040523d82523d6000602084013e6118c1565b606091505b50915091508180156118ef57506000815114806118ee5750808060200190518101906118ed91906124a6565b5b5b61192e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192590612c75565b60405180910390fd5b5050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115611990577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156119c25781602001600182028036833780820191505090505b506040516119d09190612a37565b60006040518083038185875af1925050503d8060008114611a0d576040519150601f19603f3d011682016040523d82523d6000602084013e611a12565b606091505b5050905080611a56576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a4d90612b55565b60405180910390fd5b505050565b60606000600267ffffffffffffffff811115611aa0577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611ace5781602001602082028036833780820191505090505b50905073b31f66aa3c1e785363f0875a1b74e27b85fd66c781600081518110611b20577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508281600181518110611b95577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff168152505080915050919050565b600033905090565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080600080611cb98660000186611df5565b91509150818160001c9350935050509250929050565b6000611cde8360000183611e45565b905092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000611d3284600001848473ffffffffffffffffffffffffffffffffffffffff1660001b611e7e565b90509392505050565b600060019054906101000a900460ff16611d8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d8190612c55565b60405180910390fd5b611d9a611d95611bd8565b611be0565b565b600060019054906101000a900460ff16611deb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611de290612c55565b60405180910390fd5b6001606581905550565b60008060008460020160008581526020019081526020016000205490506000801b811415611e3557611e278585611eb9565b6000801b9250925050611e3e565b60018192509250505b9250929050565b600082600201600083815260200190815260200160002060009055611e768284600001611ed990919063ffffffff16565b905092915050565b60008184600201600085815260200190815260200160002081905550611eb08385600001611ef090919063ffffffff16565b90509392505050565b6000611ed18284600001611f0790919063ffffffff16565b905092915050565b6000611ee88360000183611f1e565b905092915050565b6000611eff83600001836120a4565b905092915050565b6000611f168360000183612114565b905092915050565b60008083600101600084815260200190815260200160002054905060008114612098576000600182611f509190612f4c565b9050600060018660000180549050611f689190612f4c565b9050818114612023576000866000018281548110611faf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905080876000018481548110611ff9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b8560000180548061205d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505061209e565b60009150505b92915050565b60006120b08383612114565b61210957826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905061210e565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b600061214a61214584612e22565b612dfd565b9050808382526020820190508285604086028201111561216957600080fd5b60005b85811015612199578161217f88826122ec565b84526020840193506040830192505060018101905061216c565b5050509392505050565b60006121b66121b184612e4e565b612dfd565b905080838252602082019050828560208602820111156121d557600080fd5b60005b8581101561220557816121eb888261234d565b8452602084019350602083019250506001810190506121d8565b5050509392505050565b60008135905061221e81613491565b92915050565b60008083601f84011261223657600080fd5b8235905067ffffffffffffffff81111561224f57600080fd5b60208301915083602082028301111561226757600080fd5b9250929050565b600082601f83011261227f57600080fd5b813561228f848260208601612137565b91505092915050565b600082601f8301126122a957600080fd5b81516122b98482602086016121a3565b91505092915050565b6000815190506122d1816134a8565b92915050565b6000813590506122e6816134bf565b92915050565b6000604082840312156122fe57600080fd5b6123086040612dfd565b90506000612318848285016122d7565b600083015250602061232c8482850161220f565b60208301525092915050565b600081359050612347816134d6565b92915050565b60008151905061235c816134d6565b92915050565b60006020828403121561237457600080fd5b60006123828482850161220f565b91505092915050565b6000806040838503121561239e57600080fd5b60006123ac8582860161220f565b925050602083013567ffffffffffffffff8111156123c957600080fd5b6123d58582860161226e565b9150509250929050565b600080602083850312156123f257600080fd5b600083013567ffffffffffffffff81111561240c57600080fd5b61241885828601612224565b92509250509250929050565b60006020828403121561243657600080fd5b600082013567ffffffffffffffff81111561245057600080fd5b61245c8482850161226e565b91505092915050565b60006020828403121561247757600080fd5b600082015167ffffffffffffffff81111561249157600080fd5b61249d84828501612298565b91505092915050565b6000602082840312156124b857600080fd5b60006124c6848285016122c2565b91505092915050565b6000602082840312156124e157600080fd5b60006124ef848285016122d7565b91505092915050565b6000806040838503121561250b57600080fd5b6000612519858286016122d7565b925050602061252a85828601612338565b9150509250929050565b60008060006060848603121561254957600080fd5b6000612557868287016122d7565b935050602061256886828701612338565b925050604061257986828701612338565b9150509250925092565b60006020828403121561259557600080fd5b60006125a38482850161234d565b91505092915050565b600080604083850312156125bf57600080fd5b60006125cd85828601612338565b92505060206125de8582860161220f565b9150509250929050565b60006125f48383612630565b60208301905092915050565b600061260c83836127cf565b60208301905092915050565b600061262483836129f9565b60408301905092915050565b61263981612f80565b82525050565b61264881612f80565b82525050565b600061265982612eaa565b6126638185612efd565b935061266e83612e7a565b8060005b8381101561269f57815161268688826125e8565b975061269183612ed6565b925050600181019050612672565b5085935050505092915050565b60006126b88385612f0e565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156126e757600080fd5b6020830292506126f8838584612fd2565b82840190509392505050565b600061270f82612eb5565b6127198185612f0e565b935061272483612e8a565b8060005b8381101561275557815161273c8882612600565b975061274783612ee3565b925050600181019050612728565b5085935050505092915050565b600061276d82612ec0565b6127778185612f1f565b935061278283612e9a565b8060005b838110156127b357815161279a8882612618565b97506127a583612ef0565b925050600181019050612786565b5085935050505092915050565b6127c981612f92565b82525050565b6127d881612f9e565b82525050565b60006127e982612ecb565b6127f38185612f30565b9350612803818560208601612fe1565b80840191505092915050565b600061281c602183612f3b565b9150612827826130fd565b604082019050919050565b600061283f602683612f3b565b915061284a8261314c565b604082019050919050565b6000612862603483612f3b565b915061286d8261319b565b604082019050919050565b6000612885601e83612f3b565b9150612890826131ea565b602082019050919050565b60006128a8602e83612f3b565b91506128b382613213565b604082019050919050565b60006128cb602083612f3b565b91506128d682613262565b602082019050919050565b60006128ee601c83612f3b565b91506128f98261328b565b602082019050919050565b6000612911603083612f3b565b915061291c826132b4565b604082019050919050565b6000612934602b83612f3b565b915061293f82613303565b604082019050919050565b6000612957603183612f3b565b915061296282613352565b604082019050919050565b600061297a602b83612f3b565b9150612985826133a1565b604082019050919050565b600061299d602d83612f3b565b91506129a8826133f0565b604082019050919050565b60006129c0601f83612f3b565b91506129cb8261343f565b602082019050919050565b60006129e3601483612f3b565b91506129ee82613468565b602082019050919050565b604082016000820151612a0f60008501826127cf565b506020820151612a226020850182612630565b50505050565b612a3181612fc8565b82525050565b6000612a4382846127de565b915081905092915050565b6000602082019050612a63600083018461263f565b92915050565b6000604082019050612a7e600083018561263f565b612a8b6020830184612a28565b9392505050565b60006020820190508181036000830152612aad8184866126ac565b90509392505050565b60006020820190508181036000830152612ad08184612704565b905092915050565b60006020820190508181036000830152612af28184612762565b905092915050565b6000602082019050612b0f60008301846127c0565b92915050565b60006020820190508181036000830152612b2e8161280f565b9050919050565b60006020820190508181036000830152612b4e81612832565b9050919050565b60006020820190508181036000830152612b6e81612855565b9050919050565b60006020820190508181036000830152612b8e81612878565b9050919050565b60006020820190508181036000830152612bae8161289b565b9050919050565b60006020820190508181036000830152612bce816128be565b9050919050565b60006020820190508181036000830152612bee816128e1565b9050919050565b60006020820190508181036000830152612c0e81612904565b9050919050565b60006020820190508181036000830152612c2e81612927565b9050919050565b60006020820190508181036000830152612c4e8161294a565b9050919050565b60006020820190508181036000830152612c6e8161296d565b9050919050565b60006020820190508181036000830152612c8e81612990565b9050919050565b60006020820190508181036000830152612cae816129b3565b9050919050565b60006020820190508181036000830152612cce816129d6565b9050919050565b6000602082019050612cea6000830184612a28565b92915050565b6000604082019050612d056000830185612a28565b8181036020830152612d17818461264e565b90509392505050565b6000608082019050612d356000830187612a28565b8181036020830152612d47818661264e565b9050612d56604083018561263f565b612d636060830184612a28565b95945050505050565b600060a082019050612d816000830188612a28565b612d8e6020830187612a28565b8181036040830152612da0818661264e565b9050612daf606083018561263f565b612dbc6080830184612a28565b9695505050505050565b6000606082019050612ddb6000830186612a28565b612de86020830185612a28565b612df560408301846127c0565b949350505050565b6000612e07612e18565b9050612e138282613014565b919050565b6000604051905090565b600067ffffffffffffffff821115612e3d57612e3c6130bd565b5b602082029050602081019050919050565b600067ffffffffffffffff821115612e6957612e686130bd565b5b602082029050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b600082825260208201905092915050565b6000612f5782612fc8565b9150612f6283612fc8565b925082821015612f7557612f7461308e565b5b828203905092915050565b6000612f8b82612fa8565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015612fff578082015181840152602081019050612fe4565b8381111561300e576000848401525b50505050565b61301d826130ec565b810181811067ffffffffffffffff8211171561303c5761303b6130bd565b5b80604052505050565b600061305082612fc8565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156130835761308261308e565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f43616e6e6f742073657420616e20656d70747920737472696e6720617373657460008201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b7f4e6f7420656e6f7567682066756e647320776572652070726f76696465640000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616e6e6f742073657420616e20656d70747920616464726573732e00000000600082015250565b7f416d6f756e74206f6620746f6b656e7320746f206275792068617320746f206260008201527f652067726561746572207468616e203000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a73616665417070726f76653a2061707060008201527f726f7665206661696c6564000000000000000000000000000000000000000000602082015250565b7f416d6f756e74206f6620746f6b656e7320746f2073656c6c2068617320746f2060008201527f62652067726561746572207468616e2030000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665723a20747260008201527f616e73666572206661696c656400000000000000000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f4173736574206e6f7420737570706f727465642e000000000000000000000000600082015250565b61349a81612f80565b81146134a557600080fd5b50565b6134b181612f92565b81146134bc57600080fd5b50565b6134c881612f9e565b81146134d357600080fd5b50565b6134df81612fc8565b81146134ea57600080fd5b5056fea2646970667358221220799968a05bc2581badec2388602ebb9f3e5c382778ebc1e4d24c6fb2721e983f64736f6c63430008040033",
  "devdoc": {
    "details": "Contract allows user to invest into an ERC20 token This implementation uses the Pangolin DEX",
    "events": {
      "AssetsAdded((bytes32,address)[])": {
        "details": "emitted after the owner adds/updates assets",
        "params": {
          "assets": "added/updated assets*"
        }
      },
      "AssetsRemoved(bytes32[])": {
        "details": "emitted after the owner removes assets",
        "params": {
          "removedAssets": "removed assets*"
        }
      },
      "TokenPurchase(address,uint256,uint256,bool)": {
        "details": "emitted after a tokens were purchased",
        "params": {
          "amount": "the amount of token bought*",
          "buyer": "the address which bought tokens"
        }
      },
      "TokenSell(address,uint256,uint256,bool)": {
        "details": "emitted after a tokens were sold",
        "params": {
          "amount": "the amount of token sold*",
          "seller": "the address which sold tokens"
        }
      }
    },
    "kind": "dev",
    "methods": {
      "buyAsset(bytes32,uint256)": {
        "details": "_token ERC20 token's address_exactERC20AmountOut amount of the ERC20 token to be bought*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAssets(bytes32[])": {
        "details": "_assets assets to be removed*"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "sellAsset(bytes32,uint256,uint256)": {
        "details": "_token ERC20 token's address_exactERC20AmountIn amount of the ERC20 token to be sold_minAvaxAmountOut minimum amount of the AVAX token to be bought*"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateAssets((bytes32,address)[])": {
        "details": "_assets assets to be added/updated*"
      }
    },
    "title": "PangolinIntermediary",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "buyAsset(bytes32,uint256)": {
        "notice": "Buys selected ERC20 token with AVAX using the Pangolin DEX Refunds unused AVAX to the msg.sender"
      },
      "getAllAssets()": {
        "notice": "Returns all the supported assets keys*"
      },
      "getAssetAddress(bytes32)": {
        "notice": "Returns address of an asset*"
      },
      "getEstimatedAVAXForERC20Token(uint256,address)": {
        "notice": "Returns the minimum AVAX amount that is required to buy _exactAmountOut of _token ERC20 token.*"
      },
      "getEstimatedAVAXFromERC20Token(uint256,address)": {
        "notice": "Returns the maximum AVAX amount that will be obtained in the event of selling _amountIn of _token ERC20 token.*"
      },
      "getMinimumERC20TokenAmountForExactAVAX(uint256,address)": {
        "notice": "Returns the minimum token amount that is required to be sold to receive _exactAmountOut of AVAX.*"
      },
      "removeAssets(bytes32[])": {
        "notice": "Removes supported assets"
      },
      "sellAsset(bytes32,uint256,uint256)": {
        "notice": "Sells selected ERC20 token for AVAX"
      },
      "updateAssets((bytes32,address)[])": {
        "notice": "Adds or updates supported assets"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 211,
        "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 1920,
        "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "pangolinRouter",
        "offset": 0,
        "slot": "151",
        "type": "t_contract(IPangolinRouter)1735"
      },
      {
        "astId": 1927,
        "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
        "label": "supportedAssetsMap",
        "offset": 0,
        "slot": "152",
        "type": "t_struct(Bytes32ToAddressMap)2870_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IPangolinRouter)1735": {
        "encoding": "inplace",
        "label": "contract IPangolinRouter",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Bytes32Set)951_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Bytes32Set",
        "members": [
          {
            "astId": 950,
            "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)757_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Bytes32ToAddressMap)2870_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Bytes32ToAddressMap",
        "members": [
          {
            "astId": 2869,
            "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)2640_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Map)2640_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 2635,
            "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
            "label": "_keys",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Bytes32Set)951_storage"
          },
          {
            "astId": 2639,
            "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
            "label": "_values",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_bytes32,t_bytes32)"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)757_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 752,
            "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 756,
            "contract": "contracts/PangolinIntermediary.sol:PangolinIntermediary",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}