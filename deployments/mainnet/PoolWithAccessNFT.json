{
  "address": "0x797281E1FEc9CcEeA73d3E9912021f4f83545c18",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "registry",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "BorrowersRegistryChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Borrowing",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "InterestCollected",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Repayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Withdrawal",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_POOL_UTILISATION_FOR_BORROWING",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAccessNFT",
      "outputs": [
        {
          "internalType": "contract ERC721",
          "name": "accessNFT",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRatesCalculator",
          "name": "ratesCalculator_",
          "type": "address"
        },
        {
          "internalType": "contract IBorrowersRegistry",
          "name": "borrowersRegistry_",
          "type": "address"
        },
        {
          "internalType": "contract CompoundingIndex",
          "name": "depositIndex_",
          "type": "address"
        },
        {
          "internalType": "contract CompoundingIndex",
          "name": "borrowIndex_",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "recoverSurplus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repay",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC721",
          "name": "nftAddress",
          "type": "address"
        }
      ],
      "name": "setAccessNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IBorrowersRegistry",
          "name": "borrowersRegistry_",
          "type": "address"
        }
      ],
      "name": "setBorrowersRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IRatesCalculator",
          "name": "ratesCalculator_",
          "type": "address"
        }
      ],
      "name": "setRatesCalculator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb56461cd02c3380ad32ba37d5785807bf91e0a0dea7fbcad7282a733494a88d3",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x797281E1FEc9CcEeA73d3E9912021f4f83545c18",
    "transactionIndex": 0,
    "gasUsed": "4556647",
    "logsBloom": "0x
    "blockHash": "0x90a9ea137daef4b826b26833f6fd2e1d8f5dab760098e8ab937f37a62160935f",
    "transactionHash": "0xb56461cd02c3380ad32ba37d5785807bf91e0a0dea7fbcad7282a733494a88d3",
    "logs": [],
    "blockNumber": 11679391,
    "cumulativeGasUsed": "4556647",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9f3e5f2e1b5f9d426b0ed2c3c734a908",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"registry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"BorrowersRegistryChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Borrowing\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"InterestCollected\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Repayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_POOL_UTILISATION_FOR_BORROWING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAccessNFT\",\"outputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"accessNFT\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRatesCalculator\",\"name\":\"ratesCalculator_\",\"type\":\"address\"},{\"internalType\":\"contract IBorrowersRegistry\",\"name\":\"borrowersRegistry_\",\"type\":\"address\"},{\"internalType\":\"contract CompoundingIndex\",\"name\":\"depositIndex_\",\"type\":\"address\"},{\"internalType\":\"contract CompoundingIndex\",\"name\":\"borrowIndex_\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"recoverSurplus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC721\",\"name\":\"nftAddress\",\"type\":\"address\"}],\"name\":\"setAccessNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IBorrowersRegistry\",\"name\":\"borrowersRegistry_\",\"type\":\"address\"}],\"name\":\"setBorrowersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRatesCalculator\",\"name\":\"ratesCalculator_\",\"type\":\"address\"}],\"name\":\"setRatesCalculator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"_user the address of queried depositor*\"},\"borrow(uint256)\":{\"details\":\"_amount the amount to be borrowed*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"repay()\":{\"details\":\"It is only meant to be used by the SmartLoan.*\"},\"setBorrowersRegistry(address)\":{\"details\":\"_borrowersRegistry the address of borrowers registry*\"},\"setRatesCalculator(address)\":{\"details\":\"_ratesCalculator the address of rates calculator*\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(uint256)\":{\"details\":\"_amount the amount to be withdrawn*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceOf(address)\":{\"notice\":\"Returns the current deposited amount for the given user The value includes the interest rates earned at the current moment\"},\"borrow(uint256)\":{\"notice\":\"Borrows the specified amount It updates user borrowed balance, total borrowed amount and rates\"},\"deposit()\":{\"notice\":\"Requires access NFT Deposits the message value It updates user deposited balance, total deposited and rates*\"},\"getBorrowingRate()\":{\"notice\":\"Returns the current interest rate for borrowings*\"},\"getDepositRate()\":{\"notice\":\"Returns the current interest rate for deposits*\"},\"recoverSurplus(uint256,address)\":{\"notice\":\"Recovers the surplus funds resultant from difference between deposit and borrowing rates*\"},\"repay()\":{\"notice\":\"Repays the message value It updates user borrowed balance, total borrowed amount and rates\"},\"setBorrowersRegistry(address)\":{\"notice\":\"Sets the new borrowers registry contract. The borrowers registry decides if an account can borrow funds. Only the owner of the Contract can execute this function.\"},\"setRatesCalculator(address)\":{\"notice\":\"Sets the new rate calculator. The calculator is an external contract that contains the logic for calculating deposit and borrowing rates. Only the owner of the Contract can execute this function.\"},\"withdraw(uint256)\":{\"notice\":\"Withdraws selected amount from the user deposits\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/upgraded/PoolWithAccessNFT.sol\":\"PoolWithAccessNFT\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits a {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x11b84bb56dc112a6590bfe3e0efa118aa1b5891132342200d04c4ef544cb93de\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd5fa74b4fb323776fa4a8158800fec9d5ac0fec0d6dd046dd93798632ada265f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/CompoundingIndex.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity ^0.8.4;\\n\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * CompoundingIndex\\n * The contract contains logic for time-based index recalculation with minimal memory footprint.\\n * It could be used as a base building block for any index-based entities like deposits and loans.\\n * @dev updatedRate the value of updated rate\\n **/\\ncontract CompoundingIndex is Ownable {\\n  using WadRayMath for uint256;\\n\\n  uint256 private constant SECONDS_IN_YEAR = 365 days;\\n  uint256 private constant BASE_RATE = 1e18;\\n\\n  uint256 public start = block.timestamp;\\n\\n  uint256 public index = BASE_RATE;\\n  uint256 public indexUpdateTime = start;\\n\\n  mapping(uint256 => uint256) prevIndex;\\n  mapping(address => uint256) userUpdateTime;\\n\\n  uint256 public rate;\\n\\n  constructor(address owner_) {\\n    if (address(owner_) != address(0)) {\\n      transferOwnership(owner_);\\n    }\\n  }\\n\\n  /* ========== SETTERS ========== */\\n\\n  /**\\n   * Sets the new rate\\n   * Before the new rate is set, the index is updated accumulating interest\\n   * @dev updatedRate the value of updated rate\\n   **/\\n  function setRate(uint256 _rate) public onlyOwner {\\n    updateIndex();\\n    rate = _rate;\\n    emit RateUpdated(rate);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /**\\n   * Updates user index\\n   * It persists the update time and the update index time->index mapping\\n   * @dev user address of the index owner\\n   **/\\n  function updateUser(address user) public onlyOwner {\\n    userUpdateTime[user] = block.timestamp;\\n    prevIndex[block.timestamp] = getIndex();\\n  }\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  /**\\n   * Gets current value of the compounding index\\n   * It recalculates the value on-demand without updating the storage\\n   **/\\n  function getIndex() public view returns (uint256) {\\n    uint256 period = block.timestamp - indexUpdateTime;\\n    if (period > 0) {\\n      return index.wadToRay().rayMul(getCompoundedFactor(period)).rayToWad();\\n    } else {\\n      return index;\\n    }\\n  }\\n\\n  /**\\n   * Gets the user value recalculated to the current index\\n   * It recalculates the value on-demand without updating the storage\\n   * Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude\\n   * of 1 Wei)\\n   **/\\n  function getIndexedValue(uint256 value, address user) public view returns (uint256) {\\n    uint256 userTime = userUpdateTime[user];\\n    uint256 prevUserIndex = userTime == 0 ? BASE_RATE : prevIndex[userTime];\\n\\n    return value.wadToRay().rayMul(getIndex().wadToRay()).rayDiv(prevUserIndex.wadToRay()).rayToWad();\\n  }\\n\\n  /* ========== INTERNAL FUNCTIONS ========== */\\n\\n  function updateIndex() internal {\\n    prevIndex[indexUpdateTime] = index;\\n\\n    index = getIndex();\\n    indexUpdateTime = block.timestamp;\\n  }\\n\\n  /**\\n   * Returns compounded factor in Ray\\n   **/\\n  function getCompoundedFactor(uint256 period) internal view returns (uint256) {\\n    return ((rate.wadToRay() / SECONDS_IN_YEAR) + WadRayMath.ray()).rayPow(period);\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev updatedRate the value of updated rate\\n   **/\\n  event RateUpdated(uint256 updatedRate);\\n}\\n\",\"keccak256\":\"0x4523ca643e5992023f6d8c33511b6444762ac77cadf9604b72e629ac69bfaabe\",\"license\":\"UNLICENSED\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./CompoundingIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit and borrow funds from a single pot\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * Rates are compounded every second and getters always return the current deposit and borrowing balance.\\n * The interest rates calculation is delegated to the external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n  using TransferHelper for address payable;\\n\\n  uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.95e18;\\n\\n  mapping(address => mapping(address => uint256)) private _allowed;\\n  mapping(address => uint256) private _deposited;\\n\\n  mapping(address => uint256) public borrowed;\\n\\n  IRatesCalculator private _ratesCalculator;\\n  IBorrowersRegistry private _borrowersRegistry;\\n\\n  CompoundingIndex private _depositIndex;\\n  CompoundingIndex private _borrowIndex;\\n\\n  function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, CompoundingIndex depositIndex_, CompoundingIndex borrowIndex_) public initializer {\\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\n\\n    _borrowersRegistry = borrowersRegistry_;\\n    _ratesCalculator = ratesCalculator_;\\n    _depositIndex = depositIndex_;\\n    _borrowIndex = borrowIndex_;\\n\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    _updateRates();\\n  }\\n\\n  /* ========== SETTERS ========== */\\n\\n  /**\\n   * Sets the new rate calculator.\\n   * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n   * Only the owner of the Contract can execute this function.\\n   * @dev _ratesCalculator the address of rates calculator\\n   **/\\n  function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n    // setting address(0) ratesCalculator_ freezes the pool\\n    require(AddressUpgradeable.isContract(address(ratesCalculator_)) || address(ratesCalculator_) == address(0), \\\"Must be a contract\\\");\\n    _ratesCalculator = ratesCalculator_;\\n    if (address(ratesCalculator_) != address(0)) {\\n      _updateRates();\\n    }\\n  }\\n\\n  /**\\n   * Sets the new borrowers registry contract.\\n   * The borrowers registry decides if an account can borrow funds.\\n   * Only the owner of the Contract can execute this function.\\n   * @dev _borrowersRegistry the address of borrowers registry\\n   **/\\n  function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n    require(address(borrowersRegistry_) != address(0), \\\"The borrowers registry cannot set to a null address\\\");\\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\n\\n    _borrowersRegistry = borrowersRegistry_;\\n    emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\n    require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n    require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n    _accumulateDepositInterest(msg.sender);\\n\\n    require(_deposited[msg.sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n    // (this is verified in \\\"require\\\" above)\\n    unchecked {\\n      _deposited[msg.sender] -= amount;\\n    }\\n\\n    _accumulateDepositInterest(recipient);\\n    _deposited[recipient] += amount;\\n\\n    emit Transfer(msg.sender, recipient, amount);\\n\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return _allowed[owner][spender];\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\n    uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n    _allowed[msg.sender][spender] = newAllowance;\\n\\n    emit Approval(msg.sender, spender, newAllowance);\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\n    uint256 currentAllowance = _allowed[msg.sender][spender];\\n    require(currentAllowance >= subtractedValue, \\\"Current allowance is smaller than the subtractedValue\\\");\\n\\n    uint256 newAllowance = currentAllowance - subtractedValue;\\n    _allowed[msg.sender][spender] = newAllowance;\\n\\n    emit Approval(msg.sender, spender, newAllowance);\\n    return true;\\n  }\\n\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\n    _allowed[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n\\n    return true;\\n  }\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n    require(_allowed[sender][msg.sender] >= amount, \\\"Not enough tokens allowed to transfer required amount\\\");\\n    require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n    require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n    _accumulateDepositInterest(msg.sender);\\n\\n    require(_deposited[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n    _deposited[sender] -= amount;\\n    _allowed[sender][msg.sender] -= amount;\\n\\n    _accumulateDepositInterest(recipient);\\n    _deposited[recipient] += amount;\\n\\n    emit Transfer(sender, recipient, amount);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * Deposits the message value\\n   * It updates user deposited balance, total deposited and rates\\n   **/\\n  function deposit() public payable virtual nonReentrant {\\n    _accumulateDepositInterest(msg.sender);\\n\\n    _mint(msg.sender, msg.value);\\n    _updateRates();\\n\\n    emit Deposit(msg.sender, msg.value, block.timestamp);\\n  }\\n\\n  /**\\n   * Withdraws selected amount from the user deposits\\n   * @dev _amount the amount to be withdrawn\\n   **/\\n  function withdraw(uint256 _amount) external nonReentrant {\\n    require(address(this).balance >= _amount, \\\"There is not enough available funds to withdraw\\\");\\n\\n    _accumulateDepositInterest(msg.sender);\\n\\n    _burn(msg.sender, _amount);\\n\\n    payable(msg.sender).safeTransferETH(_amount);\\n\\n    _updateRates();\\n\\n    emit Withdrawal(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   * Borrows the specified amount\\n   * It updates user borrowed balance, total borrowed amount and rates\\n   * @dev _amount the amount to be borrowed\\n   **/\\n  function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n    require(address(this).balance >= _amount, \\\"There is not enough funds in the pool to fund the loan\\\");\\n\\n    _accumulateBorrowingInterest(msg.sender);\\n\\n    borrowed[msg.sender] += _amount;\\n    borrowed[address(this)] += _amount;\\n\\n    payable(msg.sender).safeTransferETH(_amount);\\n\\n    _updateRates();\\n\\n    emit Borrowing(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   * Repays the message value\\n   * It updates user borrowed balance, total borrowed amount and rates\\n   * @dev It is only meant to be used by the SmartLoan.\\n   **/\\n  function repay() external payable nonReentrant {\\n    _accumulateBorrowingInterest(msg.sender);\\n\\n    require(borrowed[msg.sender] >= msg.value, \\\"You are trying to repay more that was borrowed by a user\\\");\\n\\n    borrowed[msg.sender] -= msg.value;\\n    borrowed[address(this)] -= msg.value;\\n\\n    _updateRates();\\n\\n    emit Repayment(msg.sender, msg.value, block.timestamp);\\n  }\\n\\n  /* =========\\n\\n\\n  /**\\n   * Returns the current borrowed amount for the given user\\n   * The value includes the interest rates owned at the current moment\\n   * @dev _user the address of queried borrower\\n  **/\\n  function getBorrowed(address _user) public view returns (uint256) {\\n    return _borrowIndex.getIndexedValue(borrowed[_user], _user);\\n  }\\n\\n  function totalSupply() public view override returns (uint256) {\\n    return balanceOf(address(this));\\n  }\\n\\n  function totalBorrowed() public view returns (uint256) {\\n    return getBorrowed(address(this));\\n  }\\n\\n  /**\\n   * Returns the current deposited amount for the given user\\n   * The value includes the interest rates earned at the current moment\\n   * @dev _user the address of queried depositor\\n   **/\\n  function balanceOf(address user) public view override returns (uint256) {\\n    return _depositIndex.getIndexedValue(_deposited[user], user);\\n  }\\n\\n  /**\\n   * Returns the current interest rate for deposits\\n   **/\\n  function getDepositRate() public view returns (uint256) {\\n    return _ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n  }\\n\\n  /**\\n   * Returns the current interest rate for borrowings\\n   **/\\n  function getBorrowingRate() public view returns (uint256) {\\n    return _ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n  }\\n\\n  /**\\n   * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n   **/\\n  function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n    uint256 surplus = address(this).balance + totalBorrowed() - totalSupply();\\n\\n    require(amount <= address(this).balance, \\\"Trying to recover more surplus funds than pool balance\\\");\\n    require(amount <= surplus, \\\"Trying to recover more funds than current surplus\\\");\\n\\n    payable(account).safeTransferETH(amount);\\n  }\\n\\n  /* ========== INTERNAL FUNCTIONS ========== */\\n\\n  function _mint(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"ERC20: cannot mint to the zero address\\\");\\n\\n    _deposited[account] += amount;\\n    _deposited[address(this)] += amount;\\n\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal {\\n    require(_deposited[account] >= amount, \\\"ERC20: burn amount exceeds user balance\\\");\\n    require(_deposited[address(this)] >= amount, \\\"ERC20: burn amount exceeds current pool indexed balance\\\");\\n\\n    // verified in \\\"require\\\" above\\n    unchecked {\\n      _deposited[account] -= amount;\\n      _deposited[address(this)] -= amount;\\n    }\\n\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _updateRates() internal {\\n    require(address(_ratesCalculator) != address(0), \\\"Pool is frozen: cannot perform deposit, withdraw, borrow and repay operations\\\");\\n    _depositIndex.setRate(_ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply()));\\n    _borrowIndex.setRate(_ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply()));\\n  }\\n\\n  function _accumulateDepositInterest(address user) internal {\\n    uint256 depositedWithInterest = balanceOf(user);\\n    uint256 interest = depositedWithInterest - _deposited[user];\\n\\n    _mint(user, interest);\\n\\n    emit InterestCollected(user, interest, block.timestamp);\\n\\n    _depositIndex.updateUser(user);\\n    _depositIndex.updateUser(address(this));\\n  }\\n\\n  function _accumulateBorrowingInterest(address user) internal {\\n    uint256 borrowedWithInterest = getBorrowed(user);\\n    uint256 interest = borrowedWithInterest - borrowed[user];\\n    borrowed[user] = borrowedWithInterest;\\n    borrowed[address(this)] += interest;\\n\\n    _borrowIndex.updateUser(user);\\n    _borrowIndex.updateUser(address(this));\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier canBorrow() {\\n    require(address(_borrowersRegistry) != address(0), \\\"Borrowers registry is not configured\\\");\\n    require(_borrowersRegistry.canBorrow(msg.sender), \\\"Only the accounts authorised by borrowers registry may borrow\\\");\\n    require(totalSupply() != 0, \\\"Cannot borrow from an empty pool\\\");\\n    _;\\n    require((totalBorrowed() * 1e18) / totalSupply() <= MAX_POOL_UTILISATION_FOR_BORROWING, \\\"The pool utilisation cannot be greater than 95%\\\");\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev emitted after the user deposits funds\\n   * @param user the address performing the deposit\\n   * @param value the amount deposited\\n   * @param timestamp of the deposit\\n   **/\\n  event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the user withdraws funds\\n   * @param user the address performing the withdrawal\\n   * @param value the amount withdrawn\\n   * @param timestamp of the withdrawal\\n   **/\\n  event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the user borrows funds\\n   * @param user the address that borrows\\n   * @param value the amount borrowed\\n   * @param timestamp time of the borrowing\\n   **/\\n  event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the user repays debt\\n   * @param user the address that repays\\n   * @param value the amount repaid\\n   * @param timestamp of the repayment\\n   **/\\n  event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after accumulating deposit interest\\n   * @param user the address that the deposit interest is accumulated\\n   * @param value the amount accumulated interest\\n   * @param timestamp of the interest accumulation\\n   **/\\n  event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n  * @dev emitted after changing borrowers registry\\n  * @param registry an address of the newly set borrowers registry\\n  * @param timestamp of the borrowers registry change\\n  **/\\n  event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n}\",\"keccak256\":\"0xf64d224ddf152c2bb0ab8d4e7acb471db5897f6e389957a2b73d82b433e17a1e\",\"license\":\"UNLICENSED\"},\"contracts/abstract/NFTAccess.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\n\\nabstract contract NFTAccess is OwnableUpgradeable {\\n    bytes32 internal constant ACCESS_NFT_SLOT = bytes32(uint256(keccak256('ACCESS_NFT_SLOT')) - 1);\\n\\n    function setAccessNFT(ERC721 nftAddress) external onlyOwner {\\n        // Setting nftAddress to a address(0) removes the lock\\n        if (address(nftAddress) != address(0)) {\\n            require(AddressUpgradeable.isContract(address(nftAddress)), \\\"Cannot set nftAddress to a non-contract instance\\\");\\n            (bool success, bytes memory result) = address(nftAddress).call(\\n                abi.encodeWithSignature(\\\"balanceOf(address)\\\", msg.sender)\\n            );\\n            require(success && result.length > 0, \\\"Contract has to support the ERC721 balanceOf() interface\\\");\\n        }\\n\\n        bytes32 slot = ACCESS_NFT_SLOT;\\n        assembly {\\n            sstore(slot, nftAddress)\\n        }\\n    }\\n\\n    function getAccessNFT() external view returns(ERC721 accessNFT) {\\n        bytes32 slot = ACCESS_NFT_SLOT;\\n        assembly {\\n            accessNFT := sload(slot)\\n        }\\n    }\\n\\n    modifier hasAccessNFT {\\n        bytes32 slot = ACCESS_NFT_SLOT;\\n        ERC721 accessNFT;\\n        assembly {\\n            accessNFT := sload(slot)\\n        }\\n        if(address(accessNFT) != address(0)) {\\n            require(accessNFT.balanceOf(msg.sender) > 0, \\\"Access NFT required\\\");\\n        }\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0xfa0b5038e13d3fccef4803252565ebb827c040146a9e3d3507b003273b714943\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n  function canBorrow(address _account) external view returns (bool);\\n\\n  function getLoanForOwner(address _owner) external view returns (address);\\n\\n  function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc2b1669e9eec367260824bc0c3d3903bdbb4e78f79b25de7ebcdb7e6d00789bf\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n  function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x953a720aee8eb8e0861259d568fc0c123d3e72f81be777dc087166885b8cf05c\",\"license\":\"UNLICENSED\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL3\\npragma solidity ^0.8.4;\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n@dev https://github.com/aave/aave-protocol/blob/master/contracts/libraries/WadRayMath.sol\\n */\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    //return halfWAD.add(a.mul(b)).div(WAD);\\n    return (halfWAD + (a * b)) / WAD;\\n  }\\n\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n\\n    //return halfB.add(a.mul(WAD)).div(b);\\n    return (halfB + (a * WAD)) / b;\\n  }\\n\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    //return halfRAY.add(a.mul(b)).div(RAY);\\n    return (halfRAY + (a * b)) / RAY;\\n  }\\n\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n\\n    //return halfB.add(a.mul(RAY)).div(b);\\n    return (halfB + (a * RAY)) / b;\\n  }\\n\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n    //return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    return (halfRatio + a) / WAD_RAY_RATIO;\\n  }\\n\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    //return a.mul(WAD_RAY_RATIO);\\n    return a * WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev calculates base^exp. The code uses the ModExp precompile\\n   */\\n  //solium-disable-next-line\\n  function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rayMul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rayMul(z, x);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xef7c4f4bff6fb6054160dad2dce84a7d46c92058f0842bd08ebede11be88b752\",\"license\":\"AGPL3\"},\"contracts/upgraded/PoolWithAccessNFT.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: 0fbd3d2132ce3d3a12c966ee5e6ffba53aae9d33;\\npragma solidity ^0.8.4;\\nimport \\\"../abstract/NFTAccess.sol\\\";\\nimport \\\"../Pool.sol\\\";\\n\\ncontract PoolWithAccessNFT is NFTAccess, Pool {\\n    using TransferHelper for address payable;\\n\\n   /**\\n     * Requires access NFT\\n     * Deposits the message value\\n     * It updates user deposited balance, total deposited and rates\\n   **/\\n    function deposit() public payable override hasAccessNFT {\\n        super.deposit();\\n    }\\n}\\n\",\"keccak256\":\"0x0f22121481a88df3be4453db5264da22ebb55c625e5c8de2413a1b455871e487\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506151e3806100206000396000f3fe60806040526004361061019c5760003560e01c8063715018a6116100ec578063d0e30db01161008a578063f2fde38b11610064578063f2fde38b146105c0578063f36b2425146105e9578063f8c8765e14610614578063fc68f6611461063d5761019c565b8063d0e30db01461054e578063dd62ed3e14610558578063e3fcd8d1146105955761019c565b8063a457c2d7116100c6578063a457c2d714610480578063a9059cbb146104bd578063b790634e146104fa578063c5ebeaec146105255761019c565b8063715018a6146104135780638da5cb5b1461042a5780639dcee9a4146104555761019c565b806339509351116101595780634c19386c116101335780634c19386c146103455780636011163e1461037057806370a08231146103ad57806370d4cea0146103ea5761019c565b806339509351146102d5578063402d888314610312578063429c9a5a1461031c5761019c565b80630790ef9a146101a15780630941cb3d146101ca578063095ea7b31461020757806318160ddd1461024457806323b872dd1461026f5780632e1a7d4d146102ac575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c39190613c89565b610666565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190613a40565b610815565b6040516101fe9190614574565b60405180910390f35b34801561021357600080fd5b5061022e60048036038101906102299190613af4565b61082d565b60405161023b919061417e565b60405180910390f35b34801561025057600080fd5b5061025961098e565b6040516102669190614574565b60405180910390f35b34801561027b57600080fd5b5061029660048036038101906102919190613aa5565b61099e565b6040516102a3919061417e565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190613c37565b610d81565b005b3480156102e157600080fd5b506102fc60048036038101906102f79190613af4565b610eb1565b604051610309919061417e565b60405180910390f35b61031a61109f565b005b34801561032857600080fd5b50610343600480360381019061033e9190613b59565b611286565b005b34801561035157600080fd5b5061035a611508565b6040516103679190614574565b60405180910390f35b34801561037c57600080fd5b5061039760048036038101906103929190613a40565b611518565b6040516103a49190614574565b60405180910390f35b3480156103b957600080fd5b506103d460048036038101906103cf9190613a40565b61160d565b6040516103e19190614574565b60405180910390f35b3480156103f657600080fd5b50610411600480360381019061040c9190613bab565b611702565b005b34801561041f57600080fd5b5061042861187e565b005b34801561043657600080fd5b5061043f611906565b60405161044c9190614163565b60405180910390f35b34801561046157600080fd5b5061046a611930565b6040516104779190614574565b60405180910390f35b34801561048c57600080fd5b506104a760048036038101906104a29190613af4565b61193c565b6040516104b4919061417e565b60405180910390f35b3480156104c957600080fd5b506104e460048036038101906104df9190613af4565b611b73565b6040516104f1919061417e565b60405180910390f35b34801561050657600080fd5b5061050f611df9565b60405161051c9190614574565b60405180910390f35b34801561053157600080fd5b5061054c60048036038101906105479190613c37565b611ebb565b005b6105566122cb565b005b34801561056457600080fd5b5061057f600480360381019061057a9190613a69565b612414565b60405161058c9190614574565b60405180910390f35b3480156105a157600080fd5b506105aa61249b565b6040516105b79190614199565b60405180910390f35b3480156105cc57600080fd5b506105e760048036038101906105e29190613a40565b6124db565b005b3480156105f557600080fd5b506105fe6125d3565b60405161060b9190614574565b60405180910390f35b34801561062057600080fd5b5061063b60048036038101906106369190613bd4565b612695565b005b34801561064957600080fd5b50610664600480360381019061065f9190613b82565b6128e1565b005b61066e612aa7565b73ffffffffffffffffffffffffffffffffffffffff1661068c611906565b73ffffffffffffffffffffffffffffffffffffffff16146106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d990614434565b60405180910390fd5b60026065541415610728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071f90614514565b60405180910390fd5b6002606581905550600061073a61098e565b610742611508565b4761074d9190614608565b61075791906146e9565b90504783111561079c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610793906143f4565b60405180910390fd5b808311156107df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d690614534565b60405180910390fd5b610808838373ffffffffffffffffffffffffffffffffffffffff16612aaf90919063ffffffff16565b5060016065819055505050565b60996020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561089e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089590614494565b60405180910390fd5b81609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161097c9190614574565b60405180910390a36001905092915050565b60006109993061160d565b905090565b600081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610a5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5690614334565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac690614294565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3590614454565b60405180910390fd5b610b4733612bd5565b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc0906142b4565b60405180910390fd5b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c1891906146e9565b9250508190555081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cab91906146e9565b92505081905550610cbb83612bd5565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d0a9190614608565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d6e9190614574565b60405180910390a3600190509392505050565b60026065541415610dc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbe90614514565b60405180910390fd5b600260658190555080471015610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0990614554565b60405180910390fd5b610e1b33612bd5565b610e253382612daa565b610e4e813373ffffffffffffffffffffffffffffffffffffffff16612aaf90919063ffffffff16565b610e56612fb2565b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8242604051610e9e9291906145b8565b60405180910390a2600160658190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1990614494565b60405180910390fd5b600082609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fac9190614608565b905080609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161108c9190614574565b60405180910390a3600191505092915050565b600260655414156110e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110dc90614514565b60405180910390fd5b60026065819055506110f6336132d4565b34609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116f90614214565b60405180910390fd5b34609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111c791906146e9565b9250508190555034609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121d91906146e9565b9250508190555061122c612fb2565b3373ffffffffffffffffffffffffffffffffffffffff167f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d34426040516112749291906145b8565b60405180910390a26001606581905550565b61128e612aa7565b73ffffffffffffffffffffffffffffffffffffffff166112ac611906565b73ffffffffffffffffffffffffffffffffffffffff1614611302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f990614434565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114ca5761133f816134e9565b61137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137590614474565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16336040516024016113a99190614163565b6040516020818303038152906040527f70a08231000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611433919061414c565b6000604051808303816000865af19150503d8060008114611470576040519150601f19603f3d011682016040523d82523d6000602084013e611475565b606091505b5091509150818015611488575060008151115b6114c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114be90614254565b60405180910390fd5b50505b600060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c6114fc91906146e9565b60001b90508181555050565b600061151330611518565b905090565b6000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b81526004016115b692919061458f565b60206040518083038186803b1580156115ce57600080fd5b505afa1580156115e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116069190613c60565b9050919050565b6000609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b81526004016116ab92919061458f565b60206040518083038186803b1580156116c357600080fd5b505afa1580156116d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fb9190613c60565b9050919050565b61170a612aa7565b73ffffffffffffffffffffffffffffffffffffffff16611728611906565b73ffffffffffffffffffffffffffffffffffffffff161461177e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177590614434565b60405180910390fd5b611787816134e9565b806117be5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6117fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f4906142f4565b60405180910390fd5b80609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461187b5761187a612fb2565b5b50565b611886612aa7565b73ffffffffffffffffffffffffffffffffffffffff166118a4611906565b73ffffffffffffffffffffffffffffffffffffffff16146118fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f190614434565b60405180910390fd5b611904600061350c565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b670d2f13f7789f000081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a490614494565b60405180910390fd5b6000609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6890614374565b60405180910390fd5b60008382611a7f91906146e9565b905080609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611b5f9190614574565b60405180910390a360019250505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611be4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdb90614294565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4a90614454565b60405180910390fd5b611c5c33612bd5565b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611cde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd5906142b4565b60405180910390fd5b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550611d3483612bd5565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d839190614608565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611de79190614574565b60405180910390a36001905092915050565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd08331611e41611508565b611e4961098e565b6040518363ffffffff1660e01b8152600401611e669291906145b8565b60206040518083038186803b158015611e7e57600080fd5b505afa158015611e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb69190613c60565b905090565b600073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f44906143d4565b60405180910390fd5b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b8152600401611fa89190614163565b60206040518083038186803b158015611fc057600080fd5b505afa158015611fd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff89190613b30565b612037576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202e906141f4565b60405180910390fd5b600061204161098e565b1415612082576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612079906143b4565b60405180910390fd5b600260655414156120c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bf90614514565b60405180910390fd5b600260658190555080471015612113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210a906141b4565b60405180910390fd5b61211c336132d4565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461216b9190614608565b9250508190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121c19190614608565b925050819055506121f1813373ffffffffffffffffffffffffffffffffffffffff16612aaf90919063ffffffff16565b6121f9612fb2565b3373ffffffffffffffffffffffffffffffffffffffff167fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d582426040516122419291906145b8565b60405180910390a26001606581905550670d2f13f7789f000061226261098e565b670de0b6b3a7640000612273611508565b61227d919061468f565b612287919061465e565b11156122c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122bf90614274565b60405180910390fd5b50565b600060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c6122fd91906146e9565b60001b9050600081549050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146124085760008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016123779190614163565b60206040518083038186803b15801561238f57600080fd5b505afa1580156123a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c79190613c60565b11612407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123fe906144f4565b60405180910390fd5b5b6124106135d2565b5050565b6000609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c6124ce91906146e9565b60001b9050805491505090565b6124e3612aa7565b73ffffffffffffffffffffffffffffffffffffffff16612501611906565b73ffffffffffffffffffffffffffffffffffffffff1614612557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254e90614434565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125be90614234565b60405180910390fd5b6125d08161350c565b50565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec61261b611508565b61262361098e565b6040518363ffffffff1660e01b81526004016126409291906145b8565b60206040518083038186803b15801561265857600080fd5b505afa15801561266c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126909190613c60565b905090565b600060019054906101000a900460ff166126bd5760008054906101000a900460ff16156126c6565b6126c5613695565b5b612705576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126fc90614394565b60405180910390fd5b60008060019054906101000a900460ff161590508015612755576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61275e846134e9565b61279d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612794906142f4565b60405180910390fd5b83609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506128a96136a6565b6128b16136ff565b6128b9612fb2565b80156128da5760008060016101000a81548160ff0219169083151502179055505b5050505050565b6128e9612aa7565b73ffffffffffffffffffffffffffffffffffffffff16612907611906565b73ffffffffffffffffffffffffffffffffffffffff161461295d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295490614434565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c4906144d4565b60405180910390fd5b6129d6816134e9565b612a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0c906142f4565b60405180910390fd5b80609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b92046942604051612a9c9190614574565b60405180910390a250565b600033905090565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115612b0a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612b3c5781602001600182028036833780820191505090505b50604051612b4a919061414c565b60006040518083038185875af1925050503d8060008114612b87576040519150601f19603f3d011682016040523d82523d6000602084013e612b8c565b606091505b5050905080612bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc7906142d4565b60405180910390fd5b505050565b6000612be08261160d565b90506000609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612c2f91906146e9565b9050612c3b8382613758565b8273ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e21618242604051612c839291906145b8565b60405180910390a2609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336846040518263ffffffff1660e01b8152600401612ce69190614163565b600060405180830381600087803b158015612d0057600080fd5b505af1158015612d14573d6000803e3d6000fd5b50505050609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b8152600401612d739190614163565b600060405180830381600087803b158015612d8d57600080fd5b505af1158015612da1573d6000803e3d6000fd5b50505050505050565b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612e2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2390614314565b60405180910390fd5b80609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612eae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea590614354565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612fa69190614574565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff16609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613044576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161303b906141d4565b60405180910390fd5b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd083316130c8611508565b6130d061098e565b6040518363ffffffff1660e01b81526004016130ed9291906145b8565b60206040518083038186803b15801561310557600080fd5b505afa158015613119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313d9190613c60565b6040518263ffffffff1660e01b81526004016131599190614574565b600060405180830381600087803b15801561317357600080fd5b505af1158015613187573d6000803e3d6000fd5b50505050609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec61320f611508565b61321761098e565b6040518363ffffffff1660e01b81526004016132349291906145b8565b60206040518083038186803b15801561324c57600080fd5b505afa158015613260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132849190613c60565b6040518263ffffffff1660e01b81526004016132a09190614574565b600060405180830381600087803b1580156132ba57600080fd5b505af11580156132ce573d6000803e3d6000fd5b50505050565b60006132df82611518565b90506000609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261332e91906146e9565b905081609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133c39190614608565b92505081905550609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336846040518263ffffffff1660e01b81526004016134259190614163565b600060405180830381600087803b15801561343f57600080fd5b505af1158015613453573d6000803e3d6000fd5b50505050609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b81526004016134b29190614163565b600060405180830381600087803b1580156134cc57600080fd5b505af11580156134e0573d6000803e3d6000fd5b50505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60026065541415613618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161360f90614514565b60405180910390fd5b600260658190555061362933612bd5565b6136333334613758565b61363b612fb2565b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1534426040516136839291906145b8565b60405180910390a26001606581905550565b60006136a0306134e9565b15905090565b600060019054906101000a900460ff166136f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136ec906144b4565b60405180910390fd5b6136fd6138de565b565b600060019054906101000a900460ff1661374e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613745906144b4565b60405180910390fd5b61375661393f565b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156137c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137bf90614414565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546138179190614608565b9250508190555080609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461386d9190614608565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516138d29190614574565b60405180910390a35050565b600060019054906101000a900460ff1661392d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613924906144b4565b60405180910390fd5b61393d613938612aa7565b61350c565b565b600060019054906101000a900460ff1661398e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613985906144b4565b60405180910390fd5b6001606581905550565b6000813590506139a78161510c565b92915050565b6000815190506139bc81615123565b92915050565b6000813590506139d18161513a565b92915050565b6000813590506139e681615151565b92915050565b6000813590506139fb81615168565b92915050565b600081359050613a108161517f565b92915050565b600081359050613a2581615196565b92915050565b600081519050613a3a81615196565b92915050565b600060208284031215613a5257600080fd5b6000613a6084828501613998565b91505092915050565b60008060408385031215613a7c57600080fd5b6000613a8a85828601613998565b9250506020613a9b85828601613998565b9150509250929050565b600080600060608486031215613aba57600080fd5b6000613ac886828701613998565b9350506020613ad986828701613998565b9250506040613aea86828701613a16565b9150509250925092565b60008060408385031215613b0757600080fd5b6000613b1585828601613998565b9250506020613b2685828601613a16565b9150509250929050565b600060208284031215613b4257600080fd5b6000613b50848285016139ad565b91505092915050565b600060208284031215613b6b57600080fd5b6000613b79848285016139d7565b91505092915050565b600060208284031215613b9457600080fd5b6000613ba2848285016139ec565b91505092915050565b600060208284031215613bbd57600080fd5b6000613bcb84828501613a01565b91505092915050565b60008060008060808587031215613bea57600080fd5b6000613bf887828801613a01565b9450506020613c09878288016139ec565b9350506040613c1a878288016139c2565b9250506060613c2b878288016139c2565b91505092959194509250565b600060208284031215613c4957600080fd5b6000613c5784828501613a16565b91505092915050565b600060208284031215613c7257600080fd5b6000613c8084828501613a2b565b91505092915050565b60008060408385031215613c9c57600080fd5b6000613caa85828601613a16565b9250506020613cbb85828601613998565b9150509250929050565b613cce8161471d565b82525050565b613cdd8161472f565b82525050565b6000613cee826145e1565b613cf881856145ec565b9350613d088185602086016147d1565b80840191505092915050565b613d1d816147ad565b82525050565b6000613d306036836145f7565b9150613d3b82614862565b604082019050919050565b6000613d53604d836145f7565b9150613d5e826148b1565b606082019050919050565b6000613d76603d836145f7565b9150613d8182614926565b604082019050919050565b6000613d996038836145f7565b9150613da482614975565b604082019050919050565b6000613dbc6026836145f7565b9150613dc7826149c4565b604082019050919050565b6000613ddf6038836145f7565b9150613dea82614a13565b604082019050919050565b6000613e02602f836145f7565b9150613e0d82614a62565b604082019050919050565b6000613e25602a836145f7565b9150613e3082614ab1565b604082019050919050565b6000613e486026836145f7565b9150613e5382614b00565b604082019050919050565b6000613e6b6034836145f7565b9150613e7682614b4f565b604082019050919050565b6000613e8e6012836145f7565b9150613e9982614b9e565b602082019050919050565b6000613eb16027836145f7565b9150613ebc82614bc7565b604082019050919050565b6000613ed46035836145f7565b9150613edf82614c16565b604082019050919050565b6000613ef76037836145f7565b9150613f0282614c65565b604082019050919050565b6000613f1a6035836145f7565b9150613f2582614cb4565b604082019050919050565b6000613f3d602e836145f7565b9150613f4882614d03565b604082019050919050565b6000613f606020836145f7565b9150613f6b82614d52565b602082019050919050565b6000613f836024836145f7565b9150613f8e82614d7b565b604082019050919050565b6000613fa66036836145f7565b9150613fb182614dca565b604082019050919050565b6000613fc96026836145f7565b9150613fd482614e19565b604082019050919050565b6000613fec6020836145f7565b9150613ff782614e68565b602082019050919050565b600061400f602a836145f7565b915061401a82614e91565b604082019050919050565b60006140326030836145f7565b915061403d82614ee0565b604082019050919050565b6000614055602a836145f7565b915061406082614f2f565b604082019050919050565b6000614078602b836145f7565b915061408382614f7e565b604082019050919050565b600061409b6033836145f7565b91506140a682614fcd565b604082019050919050565b60006140be6013836145f7565b91506140c98261501c565b602082019050919050565b60006140e1601f836145f7565b91506140ec82615045565b602082019050919050565b60006141046031836145f7565b915061410f8261506e565b604082019050919050565b6000614127602f836145f7565b9150614132826150bd565b604082019050919050565b614146816147a3565b82525050565b60006141588284613ce3565b915081905092915050565b60006020820190506141786000830184613cc5565b92915050565b60006020820190506141936000830184613cd4565b92915050565b60006020820190506141ae6000830184613d14565b92915050565b600060208201905081810360008301526141cd81613d23565b9050919050565b600060208201905081810360008301526141ed81613d46565b9050919050565b6000602082019050818103600083015261420d81613d69565b9050919050565b6000602082019050818103600083015261422d81613d8c565b9050919050565b6000602082019050818103600083015261424d81613daf565b9050919050565b6000602082019050818103600083015261426d81613dd2565b9050919050565b6000602082019050818103600083015261428d81613df5565b9050919050565b600060208201905081810360008301526142ad81613e18565b9050919050565b600060208201905081810360008301526142cd81613e3b565b9050919050565b600060208201905081810360008301526142ed81613e5e565b9050919050565b6000602082019050818103600083015261430d81613e81565b9050919050565b6000602082019050818103600083015261432d81613ea4565b9050919050565b6000602082019050818103600083015261434d81613ec7565b9050919050565b6000602082019050818103600083015261436d81613eea565b9050919050565b6000602082019050818103600083015261438d81613f0d565b9050919050565b600060208201905081810360008301526143ad81613f30565b9050919050565b600060208201905081810360008301526143cd81613f53565b9050919050565b600060208201905081810360008301526143ed81613f76565b9050919050565b6000602082019050818103600083015261440d81613f99565b9050919050565b6000602082019050818103600083015261442d81613fbc565b9050919050565b6000602082019050818103600083015261444d81613fdf565b9050919050565b6000602082019050818103600083015261446d81614002565b9050919050565b6000602082019050818103600083015261448d81614025565b9050919050565b600060208201905081810360008301526144ad81614048565b9050919050565b600060208201905081810360008301526144cd8161406b565b9050919050565b600060208201905081810360008301526144ed8161408e565b9050919050565b6000602082019050818103600083015261450d816140b1565b9050919050565b6000602082019050818103600083015261452d816140d4565b9050919050565b6000602082019050818103600083015261454d816140f7565b9050919050565b6000602082019050818103600083015261456d8161411a565b9050919050565b6000602082019050614589600083018461413d565b92915050565b60006040820190506145a4600083018561413d565b6145b16020830184613cc5565b9392505050565b60006040820190506145cd600083018561413d565b6145da602083018461413d565b9392505050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000614613826147a3565b915061461e836147a3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561465357614652614804565b5b828201905092915050565b6000614669826147a3565b9150614674836147a3565b92508261468457614683614833565b5b828204905092915050565b600061469a826147a3565b91506146a5836147a3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146de576146dd614804565b5b828202905092915050565b60006146f4826147a3565b91506146ff836147a3565b92508282101561471257614711614804565b5b828203905092915050565b600061472882614783565b9050919050565b60008115159050919050565b60006147468261471d565b9050919050565b60006147588261471d565b9050919050565b600061476a8261471d565b9050919050565b600061477c8261471d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006147b8826147bf565b9050919050565b60006147ca82614783565b9050919050565b60005b838110156147ef5780820151818401526020810190506147d4565b838111156147fe576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f5468657265206973206e6f7420656e6f7567682066756e647320696e2074686560008201527f20706f6f6c20746f2066756e6420746865206c6f616e00000000000000000000602082015250565b7f506f6f6c2069732066726f7a656e3a2063616e6e6f7420706572666f726d206460008201527f65706f7369742c2077697468647261772c20626f72726f7720616e642072657060208201527f6179206f7065726174696f6e7300000000000000000000000000000000000000604082015250565b7f4f6e6c7920746865206163636f756e747320617574686f72697365642062792060008201527f626f72726f77657273207265676973747279206d617920626f72726f77000000602082015250565b7f596f752061726520747279696e6720746f207265706179206d6f72652074686160008201527f742077617320626f72726f776564206279206120757365720000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f436f6e74726163742068617320746f20737570706f727420746865204552433760008201527f32312062616c616e63654f66282920696e746572666163650000000000000000602082015250565b7f54686520706f6f6c207574696c69736174696f6e2063616e6e6f74206265206760008201527f726561746572207468616e203935250000000000000000000000000000000000602082015250565b7f45524332303a2063616e6e6f74207472616e7366657220746f20746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b7f4d757374206265206120636f6e74726163740000000000000000000000000000600082015250565b7f45524332303a206275726e20616d6f756e74206578636565647320757365722060008201527f62616c616e636500000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f75676820746f6b656e7320616c6c6f77656420746f2074726160008201527f6e7366657220726571756972656420616d6f756e740000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e74206578636565647320637572726560008201527f6e7420706f6f6c20696e64657865642062616c616e6365000000000000000000602082015250565b7f43757272656e7420616c6c6f77616e636520697320736d616c6c65722074686160008201527f6e20746865207375627472616374656456616c75650000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f43616e6e6f7420626f72726f772066726f6d20616e20656d70747920706f6f6c600082015250565b7f426f72726f77657273207265676973747279206973206e6f7420636f6e66696760008201527f7572656400000000000000000000000000000000000000000000000000000000602082015250565b7f547279696e6720746f207265636f766572206d6f726520737572706c7573206660008201527f756e6473207468616e20706f6f6c2062616c616e636500000000000000000000602082015250565b7f45524332303a2063616e6e6f74206d696e7420746f20746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a2063616e6e6f74207472616e7366657220746f2074686520706f60008201527f6f6c206164647265737300000000000000000000000000000000000000000000602082015250565b7f43616e6e6f7420736574206e66744164647265737320746f2061206e6f6e2d6360008201527f6f6e747261637420696e7374616e636500000000000000000000000000000000602082015250565b7f416c6c6f77616e6365207370656e6465722063616e6e6f742062652061207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f54686520626f72726f776572732072656769737472792063616e6e6f7420736560008201527f7420746f2061206e756c6c206164647265737300000000000000000000000000602082015250565b7f416363657373204e465420726571756972656400000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f547279696e6720746f207265636f766572206d6f72652066756e64732074686160008201527f6e2063757272656e7420737572706c7573000000000000000000000000000000602082015250565b7f5468657265206973206e6f7420656e6f75676820617661696c61626c6520667560008201527f6e647320746f2077697468647261770000000000000000000000000000000000602082015250565b6151158161471d565b811461512057600080fd5b50565b61512c8161472f565b811461513757600080fd5b50565b6151438161473b565b811461514e57600080fd5b50565b61515a8161474d565b811461516557600080fd5b50565b6151718161475f565b811461517c57600080fd5b50565b61518881614771565b811461519357600080fd5b50565b61519f816147a3565b81146151aa57600080fd5b5056fea264697066735822122022eb3a53ff0061c307c7eeacb7545236fb8a55b9652dd016b84c2753ac58ce4f64736f6c63430008040033",
  "deployedBytecode": "0x60806040526004361061019c5760003560e01c8063715018a6116100ec578063d0e30db01161008a578063f2fde38b11610064578063f2fde38b146105c0578063f36b2425146105e9578063f8c8765e14610614578063fc68f6611461063d5761019c565b8063d0e30db01461054e578063dd62ed3e14610558578063e3fcd8d1146105955761019c565b8063a457c2d7116100c6578063a457c2d714610480578063a9059cbb146104bd578063b790634e146104fa578063c5ebeaec146105255761019c565b8063715018a6146104135780638da5cb5b1461042a5780639dcee9a4146104555761019c565b806339509351116101595780634c19386c116101335780634c19386c146103455780636011163e1461037057806370a08231146103ad57806370d4cea0146103ea5761019c565b806339509351146102d5578063402d888314610312578063429c9a5a1461031c5761019c565b80630790ef9a146101a15780630941cb3d146101ca578063095ea7b31461020757806318160ddd1461024457806323b872dd1461026f5780632e1a7d4d146102ac575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c39190613c89565b610666565b005b3480156101d657600080fd5b506101f160048036038101906101ec9190613a40565b610815565b6040516101fe9190614574565b60405180910390f35b34801561021357600080fd5b5061022e60048036038101906102299190613af4565b61082d565b60405161023b919061417e565b60405180910390f35b34801561025057600080fd5b5061025961098e565b6040516102669190614574565b60405180910390f35b34801561027b57600080fd5b5061029660048036038101906102919190613aa5565b61099e565b6040516102a3919061417e565b60405180910390f35b3480156102b857600080fd5b506102d360048036038101906102ce9190613c37565b610d81565b005b3480156102e157600080fd5b506102fc60048036038101906102f79190613af4565b610eb1565b604051610309919061417e565b60405180910390f35b61031a61109f565b005b34801561032857600080fd5b50610343600480360381019061033e9190613b59565b611286565b005b34801561035157600080fd5b5061035a611508565b6040516103679190614574565b60405180910390f35b34801561037c57600080fd5b5061039760048036038101906103929190613a40565b611518565b6040516103a49190614574565b60405180910390f35b3480156103b957600080fd5b506103d460048036038101906103cf9190613a40565b61160d565b6040516103e19190614574565b60405180910390f35b3480156103f657600080fd5b50610411600480360381019061040c9190613bab565b611702565b005b34801561041f57600080fd5b5061042861187e565b005b34801561043657600080fd5b5061043f611906565b60405161044c9190614163565b60405180910390f35b34801561046157600080fd5b5061046a611930565b6040516104779190614574565b60405180910390f35b34801561048c57600080fd5b506104a760048036038101906104a29190613af4565b61193c565b6040516104b4919061417e565b60405180910390f35b3480156104c957600080fd5b506104e460048036038101906104df9190613af4565b611b73565b6040516104f1919061417e565b60405180910390f35b34801561050657600080fd5b5061050f611df9565b60405161051c9190614574565b60405180910390f35b34801561053157600080fd5b5061054c60048036038101906105479190613c37565b611ebb565b005b6105566122cb565b005b34801561056457600080fd5b5061057f600480360381019061057a9190613a69565b612414565b60405161058c9190614574565b60405180910390f35b3480156105a157600080fd5b506105aa61249b565b6040516105b79190614199565b60405180910390f35b3480156105cc57600080fd5b506105e760048036038101906105e29190613a40565b6124db565b005b3480156105f557600080fd5b506105fe6125d3565b60405161060b9190614574565b60405180910390f35b34801561062057600080fd5b5061063b60048036038101906106369190613bd4565b612695565b005b34801561064957600080fd5b50610664600480360381019061065f9190613b82565b6128e1565b005b61066e612aa7565b73ffffffffffffffffffffffffffffffffffffffff1661068c611906565b73ffffffffffffffffffffffffffffffffffffffff16146106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d990614434565b60405180910390fd5b60026065541415610728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161071f90614514565b60405180910390fd5b6002606581905550600061073a61098e565b610742611508565b4761074d9190614608565b61075791906146e9565b90504783111561079c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610793906143f4565b60405180910390fd5b808311156107df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d690614534565b60405180910390fd5b610808838373ffffffffffffffffffffffffffffffffffffffff16612aaf90919063ffffffff16565b5060016065819055505050565b60996020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561089e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089590614494565b60405180910390fd5b81609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161097c9190614574565b60405180910390a36001905092915050565b60006109993061160d565b905090565b600081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610a5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a5690614334565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610acf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac690614294565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610b3e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3590614454565b60405180910390fd5b610b4733612bd5565b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc0906142b4565b60405180910390fd5b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c1891906146e9565b9250508190555081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610cab91906146e9565b92505081905550610cbb83612bd5565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d0a9190614608565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610d6e9190614574565b60405180910390a3600190509392505050565b60026065541415610dc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbe90614514565b60405180910390fd5b600260658190555080471015610e12576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e0990614554565b60405180910390fd5b610e1b33612bd5565b610e253382612daa565b610e4e813373ffffffffffffffffffffffffffffffffffffffff16612aaf90919063ffffffff16565b610e56612fb2565b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8242604051610e9e9291906145b8565b60405180910390a2600160658190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610f22576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f1990614494565b60405180910390fd5b600082609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610fac9190614608565b905080609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258360405161108c9190614574565b60405180910390a3600191505092915050565b600260655414156110e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110dc90614514565b60405180910390fd5b60026065819055506110f6336132d4565b34609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611178576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116f90614214565b60405180910390fd5b34609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111c791906146e9565b9250508190555034609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461121d91906146e9565b9250508190555061122c612fb2565b3373ffffffffffffffffffffffffffffffffffffffff167f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d34426040516112749291906145b8565b60405180910390a26001606581905550565b61128e612aa7565b73ffffffffffffffffffffffffffffffffffffffff166112ac611906565b73ffffffffffffffffffffffffffffffffffffffff1614611302576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f990614434565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146114ca5761133f816134e9565b61137e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161137590614474565b60405180910390fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16336040516024016113a99190614163565b6040516020818303038152906040527f70a08231000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611433919061414c565b6000604051808303816000865af19150503d8060008114611470576040519150601f19603f3d011682016040523d82523d6000602084013e611475565b606091505b5091509150818015611488575060008151115b6114c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114be90614254565b60405180910390fd5b50505b600060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c6114fc91906146e9565b60001b90508181555050565b600061151330611518565b905090565b6000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b81526004016115b692919061458f565b60206040518083038186803b1580156115ce57600080fd5b505afa1580156115e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116069190613c60565b9050919050565b6000609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b81526004016116ab92919061458f565b60206040518083038186803b1580156116c357600080fd5b505afa1580156116d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116fb9190613c60565b9050919050565b61170a612aa7565b73ffffffffffffffffffffffffffffffffffffffff16611728611906565b73ffffffffffffffffffffffffffffffffffffffff161461177e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161177590614434565b60405180910390fd5b611787816134e9565b806117be5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6117fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117f4906142f4565b60405180910390fd5b80609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461187b5761187a612fb2565b5b50565b611886612aa7565b73ffffffffffffffffffffffffffffffffffffffff166118a4611906565b73ffffffffffffffffffffffffffffffffffffffff16146118fa576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f190614434565b60405180910390fd5b611904600061350c565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b670d2f13f7789f000081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156119ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119a490614494565b60405180910390fd5b6000609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611a71576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6890614374565b60405180910390fd5b60008382611a7f91906146e9565b905080609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051611b5f9190614574565b60405180910390a360019250505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611be4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bdb90614294565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611c53576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c4a90614454565b60405180910390fd5b611c5c33612bd5565b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611cde576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd5906142b4565b60405180910390fd5b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550611d3483612bd5565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611d839190614608565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611de79190614574565b60405180910390a36001905092915050565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd08331611e41611508565b611e4961098e565b6040518363ffffffff1660e01b8152600401611e669291906145b8565b60206040518083038186803b158015611e7e57600080fd5b505afa158015611e92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb69190613c60565b905090565b600073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611f4d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f44906143d4565b60405180910390fd5b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b8152600401611fa89190614163565b60206040518083038186803b158015611fc057600080fd5b505afa158015611fd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ff89190613b30565b612037576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161202e906141f4565b60405180910390fd5b600061204161098e565b1415612082576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612079906143b4565b60405180910390fd5b600260655414156120c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120bf90614514565b60405180910390fd5b600260658190555080471015612113576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161210a906141b4565b60405180910390fd5b61211c336132d4565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461216b9190614608565b9250508190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546121c19190614608565b925050819055506121f1813373ffffffffffffffffffffffffffffffffffffffff16612aaf90919063ffffffff16565b6121f9612fb2565b3373ffffffffffffffffffffffffffffffffffffffff167fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d582426040516122419291906145b8565b60405180910390a26001606581905550670d2f13f7789f000061226261098e565b670de0b6b3a7640000612273611508565b61227d919061468f565b612287919061465e565b11156122c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122bf90614274565b60405180910390fd5b50565b600060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c6122fd91906146e9565b60001b9050600081549050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146124085760008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016123779190614163565b60206040518083038186803b15801561238f57600080fd5b505afa1580156123a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c79190613c60565b11612407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123fe906144f4565b60405180910390fd5b5b6124106135d2565b5050565b6000609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b60008060017f05df0919f17c81dab74a24e96f8e9fcaf2f7ae9ec785467bc9a30e698771439060001c6124ce91906146e9565b60001b9050805491505090565b6124e3612aa7565b73ffffffffffffffffffffffffffffffffffffffff16612501611906565b73ffffffffffffffffffffffffffffffffffffffff1614612557576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254e90614434565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125c7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125be90614234565b60405180910390fd5b6125d08161350c565b50565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec61261b611508565b61262361098e565b6040518363ffffffff1660e01b81526004016126409291906145b8565b60206040518083038186803b15801561265857600080fd5b505afa15801561266c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126909190613c60565b905090565b600060019054906101000a900460ff166126bd5760008054906101000a900460ff16156126c6565b6126c5613695565b5b612705576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016126fc90614394565b60405180910390fd5b60008060019054906101000a900460ff161590508015612755576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61275e846134e9565b61279d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612794906142f4565b60405180910390fd5b83609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506128a96136a6565b6128b16136ff565b6128b9612fb2565b80156128da5760008060016101000a81548160ff0219169083151502179055505b5050505050565b6128e9612aa7565b73ffffffffffffffffffffffffffffffffffffffff16612907611906565b73ffffffffffffffffffffffffffffffffffffffff161461295d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161295490614434565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156129cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129c4906144d4565b60405180910390fd5b6129d6816134e9565b612a15576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a0c906142f4565b60405180910390fd5b80609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b92046942604051612a9c9190614574565b60405180910390a250565b600033905090565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115612b0a577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612b3c5781602001600182028036833780820191505090505b50604051612b4a919061414c565b60006040518083038185875af1925050503d8060008114612b87576040519150601f19603f3d011682016040523d82523d6000602084013e612b8c565b606091505b5050905080612bd0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bc7906142d4565b60405180910390fd5b505050565b6000612be08261160d565b90506000609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612c2f91906146e9565b9050612c3b8382613758565b8273ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e21618242604051612c839291906145b8565b60405180910390a2609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336846040518263ffffffff1660e01b8152600401612ce69190614163565b600060405180830381600087803b158015612d0057600080fd5b505af1158015612d14573d6000803e3d6000fd5b50505050609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b8152600401612d739190614163565b600060405180830381600087803b158015612d8d57600080fd5b505af1158015612da1573d6000803e3d6000fd5b50505050505050565b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612e2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612e2390614314565b60405180910390fd5b80609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612eae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea590614354565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612fa69190614574565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff16609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415613044576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161303b906141d4565b60405180910390fd5b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd083316130c8611508565b6130d061098e565b6040518363ffffffff1660e01b81526004016130ed9291906145b8565b60206040518083038186803b15801561310557600080fd5b505afa158015613119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313d9190613c60565b6040518263ffffffff1660e01b81526004016131599190614574565b600060405180830381600087803b15801561317357600080fd5b505af1158015613187573d6000803e3d6000fd5b50505050609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec61320f611508565b61321761098e565b6040518363ffffffff1660e01b81526004016132349291906145b8565b60206040518083038186803b15801561324c57600080fd5b505afa158015613260573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132849190613c60565b6040518263ffffffff1660e01b81526004016132a09190614574565b600060405180830381600087803b1580156132ba57600080fd5b505af11580156132ce573d6000803e3d6000fd5b50505050565b60006132df82611518565b90506000609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261332e91906146e9565b905081609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133c39190614608565b92505081905550609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336846040518263ffffffff1660e01b81526004016134259190614163565b600060405180830381600087803b15801561343f57600080fd5b505af1158015613453573d6000803e3d6000fd5b50505050609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b81526004016134b29190614163565b600060405180830381600087803b1580156134cc57600080fd5b505af11580156134e0573d6000803e3d6000fd5b50505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60026065541415613618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161360f90614514565b60405180910390fd5b600260658190555061362933612bd5565b6136333334613758565b61363b612fb2565b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a1534426040516136839291906145b8565b60405180910390a26001606581905550565b60006136a0306134e9565b15905090565b600060019054906101000a900460ff166136f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016136ec906144b4565b60405180910390fd5b6136fd6138de565b565b600060019054906101000a900460ff1661374e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613745906144b4565b60405180910390fd5b61375661393f565b565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156137c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137bf90614414565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546138179190614608565b9250508190555080609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461386d9190614608565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516138d29190614574565b60405180910390a35050565b600060019054906101000a900460ff1661392d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613924906144b4565b60405180910390fd5b61393d613938612aa7565b61350c565b565b600060019054906101000a900460ff1661398e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613985906144b4565b60405180910390fd5b6001606581905550565b6000813590506139a78161510c565b92915050565b6000815190506139bc81615123565b92915050565b6000813590506139d18161513a565b92915050565b6000813590506139e681615151565b92915050565b6000813590506139fb81615168565b92915050565b600081359050613a108161517f565b92915050565b600081359050613a2581615196565b92915050565b600081519050613a3a81615196565b92915050565b600060208284031215613a5257600080fd5b6000613a6084828501613998565b91505092915050565b60008060408385031215613a7c57600080fd5b6000613a8a85828601613998565b9250506020613a9b85828601613998565b9150509250929050565b600080600060608486031215613aba57600080fd5b6000613ac886828701613998565b9350506020613ad986828701613998565b9250506040613aea86828701613a16565b9150509250925092565b60008060408385031215613b0757600080fd5b6000613b1585828601613998565b9250506020613b2685828601613a16565b9150509250929050565b600060208284031215613b4257600080fd5b6000613b50848285016139ad565b91505092915050565b600060208284031215613b6b57600080fd5b6000613b79848285016139d7565b91505092915050565b600060208284031215613b9457600080fd5b6000613ba2848285016139ec565b91505092915050565b600060208284031215613bbd57600080fd5b6000613bcb84828501613a01565b91505092915050565b60008060008060808587031215613bea57600080fd5b6000613bf887828801613a01565b9450506020613c09878288016139ec565b9350506040613c1a878288016139c2565b9250506060613c2b878288016139c2565b91505092959194509250565b600060208284031215613c4957600080fd5b6000613c5784828501613a16565b91505092915050565b600060208284031215613c7257600080fd5b6000613c8084828501613a2b565b91505092915050565b60008060408385031215613c9c57600080fd5b6000613caa85828601613a16565b9250506020613cbb85828601613998565b9150509250929050565b613cce8161471d565b82525050565b613cdd8161472f565b82525050565b6000613cee826145e1565b613cf881856145ec565b9350613d088185602086016147d1565b80840191505092915050565b613d1d816147ad565b82525050565b6000613d306036836145f7565b9150613d3b82614862565b604082019050919050565b6000613d53604d836145f7565b9150613d5e826148b1565b606082019050919050565b6000613d76603d836145f7565b9150613d8182614926565b604082019050919050565b6000613d996038836145f7565b9150613da482614975565b604082019050919050565b6000613dbc6026836145f7565b9150613dc7826149c4565b604082019050919050565b6000613ddf6038836145f7565b9150613dea82614a13565b604082019050919050565b6000613e02602f836145f7565b9150613e0d82614a62565b604082019050919050565b6000613e25602a836145f7565b9150613e3082614ab1565b604082019050919050565b6000613e486026836145f7565b9150613e5382614b00565b604082019050919050565b6000613e6b6034836145f7565b9150613e7682614b4f565b604082019050919050565b6000613e8e6012836145f7565b9150613e9982614b9e565b602082019050919050565b6000613eb16027836145f7565b9150613ebc82614bc7565b604082019050919050565b6000613ed46035836145f7565b9150613edf82614c16565b604082019050919050565b6000613ef76037836145f7565b9150613f0282614c65565b604082019050919050565b6000613f1a6035836145f7565b9150613f2582614cb4565b604082019050919050565b6000613f3d602e836145f7565b9150613f4882614d03565b604082019050919050565b6000613f606020836145f7565b9150613f6b82614d52565b602082019050919050565b6000613f836024836145f7565b9150613f8e82614d7b565b604082019050919050565b6000613fa66036836145f7565b9150613fb182614dca565b604082019050919050565b6000613fc96026836145f7565b9150613fd482614e19565b604082019050919050565b6000613fec6020836145f7565b9150613ff782614e68565b602082019050919050565b600061400f602a836145f7565b915061401a82614e91565b604082019050919050565b60006140326030836145f7565b915061403d82614ee0565b604082019050919050565b6000614055602a836145f7565b915061406082614f2f565b604082019050919050565b6000614078602b836145f7565b915061408382614f7e565b604082019050919050565b600061409b6033836145f7565b91506140a682614fcd565b604082019050919050565b60006140be6013836145f7565b91506140c98261501c565b602082019050919050565b60006140e1601f836145f7565b91506140ec82615045565b602082019050919050565b60006141046031836145f7565b915061410f8261506e565b604082019050919050565b6000614127602f836145f7565b9150614132826150bd565b604082019050919050565b614146816147a3565b82525050565b60006141588284613ce3565b915081905092915050565b60006020820190506141786000830184613cc5565b92915050565b60006020820190506141936000830184613cd4565b92915050565b60006020820190506141ae6000830184613d14565b92915050565b600060208201905081810360008301526141cd81613d23565b9050919050565b600060208201905081810360008301526141ed81613d46565b9050919050565b6000602082019050818103600083015261420d81613d69565b9050919050565b6000602082019050818103600083015261422d81613d8c565b9050919050565b6000602082019050818103600083015261424d81613daf565b9050919050565b6000602082019050818103600083015261426d81613dd2565b9050919050565b6000602082019050818103600083015261428d81613df5565b9050919050565b600060208201905081810360008301526142ad81613e18565b9050919050565b600060208201905081810360008301526142cd81613e3b565b9050919050565b600060208201905081810360008301526142ed81613e5e565b9050919050565b6000602082019050818103600083015261430d81613e81565b9050919050565b6000602082019050818103600083015261432d81613ea4565b9050919050565b6000602082019050818103600083015261434d81613ec7565b9050919050565b6000602082019050818103600083015261436d81613eea565b9050919050565b6000602082019050818103600083015261438d81613f0d565b9050919050565b600060208201905081810360008301526143ad81613f30565b9050919050565b600060208201905081810360008301526143cd81613f53565b9050919050565b600060208201905081810360008301526143ed81613f76565b9050919050565b6000602082019050818103600083015261440d81613f99565b9050919050565b6000602082019050818103600083015261442d81613fbc565b9050919050565b6000602082019050818103600083015261444d81613fdf565b9050919050565b6000602082019050818103600083015261446d81614002565b9050919050565b6000602082019050818103600083015261448d81614025565b9050919050565b600060208201905081810360008301526144ad81614048565b9050919050565b600060208201905081810360008301526144cd8161406b565b9050919050565b600060208201905081810360008301526144ed8161408e565b9050919050565b6000602082019050818103600083015261450d816140b1565b9050919050565b6000602082019050818103600083015261452d816140d4565b9050919050565b6000602082019050818103600083015261454d816140f7565b9050919050565b6000602082019050818103600083015261456d8161411a565b9050919050565b6000602082019050614589600083018461413d565b92915050565b60006040820190506145a4600083018561413d565b6145b16020830184613cc5565b9392505050565b60006040820190506145cd600083018561413d565b6145da602083018461413d565b9392505050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b6000614613826147a3565b915061461e836147a3565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561465357614652614804565b5b828201905092915050565b6000614669826147a3565b9150614674836147a3565b92508261468457614683614833565b5b828204905092915050565b600061469a826147a3565b91506146a5836147a3565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156146de576146dd614804565b5b828202905092915050565b60006146f4826147a3565b91506146ff836147a3565b92508282101561471257614711614804565b5b828203905092915050565b600061472882614783565b9050919050565b60008115159050919050565b60006147468261471d565b9050919050565b60006147588261471d565b9050919050565b600061476a8261471d565b9050919050565b600061477c8261471d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006147b8826147bf565b9050919050565b60006147ca82614783565b9050919050565b60005b838110156147ef5780820151818401526020810190506147d4565b838111156147fe576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f5468657265206973206e6f7420656e6f7567682066756e647320696e2074686560008201527f20706f6f6c20746f2066756e6420746865206c6f616e00000000000000000000602082015250565b7f506f6f6c2069732066726f7a656e3a2063616e6e6f7420706572666f726d206460008201527f65706f7369742c2077697468647261772c20626f72726f7720616e642072657060208201527f6179206f7065726174696f6e7300000000000000000000000000000000000000604082015250565b7f4f6e6c7920746865206163636f756e747320617574686f72697365642062792060008201527f626f72726f77657273207265676973747279206d617920626f72726f77000000602082015250565b7f596f752061726520747279696e6720746f207265706179206d6f72652074686160008201527f742077617320626f72726f776564206279206120757365720000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f436f6e74726163742068617320746f20737570706f727420746865204552433760008201527f32312062616c616e63654f66282920696e746572666163650000000000000000602082015250565b7f54686520706f6f6c207574696c69736174696f6e2063616e6e6f74206265206760008201527f726561746572207468616e203935250000000000000000000000000000000000602082015250565b7f45524332303a2063616e6e6f74207472616e7366657220746f20746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b7f4d757374206265206120636f6e74726163740000000000000000000000000000600082015250565b7f45524332303a206275726e20616d6f756e74206578636565647320757365722060008201527f62616c616e636500000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f75676820746f6b656e7320616c6c6f77656420746f2074726160008201527f6e7366657220726571756972656420616d6f756e740000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e74206578636565647320637572726560008201527f6e7420706f6f6c20696e64657865642062616c616e6365000000000000000000602082015250565b7f43757272656e7420616c6c6f77616e636520697320736d616c6c65722074686160008201527f6e20746865207375627472616374656456616c75650000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f43616e6e6f7420626f72726f772066726f6d20616e20656d70747920706f6f6c600082015250565b7f426f72726f77657273207265676973747279206973206e6f7420636f6e66696760008201527f7572656400000000000000000000000000000000000000000000000000000000602082015250565b7f547279696e6720746f207265636f766572206d6f726520737572706c7573206660008201527f756e6473207468616e20706f6f6c2062616c616e636500000000000000000000602082015250565b7f45524332303a2063616e6e6f74206d696e7420746f20746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a2063616e6e6f74207472616e7366657220746f2074686520706f60008201527f6f6c206164647265737300000000000000000000000000000000000000000000602082015250565b7f43616e6e6f7420736574206e66744164647265737320746f2061206e6f6e2d6360008201527f6f6e747261637420696e7374616e636500000000000000000000000000000000602082015250565b7f416c6c6f77616e6365207370656e6465722063616e6e6f742062652061207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f54686520626f72726f776572732072656769737472792063616e6e6f7420736560008201527f7420746f2061206e756c6c206164647265737300000000000000000000000000602082015250565b7f416363657373204e465420726571756972656400000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f547279696e6720746f207265636f766572206d6f72652066756e64732074686160008201527f6e2063757272656e7420737572706c7573000000000000000000000000000000602082015250565b7f5468657265206973206e6f7420656e6f75676820617661696c61626c6520667560008201527f6e647320746f2077697468647261770000000000000000000000000000000000602082015250565b6151158161471d565b811461512057600080fd5b50565b61512c8161472f565b811461513757600080fd5b50565b6151438161473b565b811461514e57600080fd5b50565b61515a8161474d565b811461516557600080fd5b50565b6151718161475f565b811461517c57600080fd5b50565b61518881614771565b811461519357600080fd5b50565b61519f816147a3565b81146151aa57600080fd5b5056fea264697066735822122022eb3a53ff0061c307c7eeacb7545236fb8a55b9652dd016b84c2753ac58ce4f64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
      },
      "approve(address,uint256)": {
        "details": "Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "_user the address of queried depositor*"
      },
      "borrow(uint256)": {
        "details": "_amount the amount to be borrowed*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "repay()": {
        "details": "It is only meant to be used by the SmartLoan.*"
      },
      "setBorrowersRegistry(address)": {
        "details": "_borrowersRegistry the address of borrowers registry*"
      },
      "setRatesCalculator(address)": {
        "details": "_ratesCalculator the address of rates calculator*"
      },
      "totalSupply()": {
        "details": "Returns the amount of tokens in existence."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(uint256)": {
        "details": "_amount the amount to be withdrawn*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceOf(address)": {
        "notice": "Returns the current deposited amount for the given user The value includes the interest rates earned at the current moment"
      },
      "borrow(uint256)": {
        "notice": "Borrows the specified amount It updates user borrowed balance, total borrowed amount and rates"
      },
      "deposit()": {
        "notice": "Requires access NFT Deposits the message value It updates user deposited balance, total deposited and rates*"
      },
      "getBorrowingRate()": {
        "notice": "Returns the current interest rate for borrowings*"
      },
      "getDepositRate()": {
        "notice": "Returns the current interest rate for deposits*"
      },
      "recoverSurplus(uint256,address)": {
        "notice": "Recovers the surplus funds resultant from difference between deposit and borrowing rates*"
      },
      "repay()": {
        "notice": "Repays the message value It updates user borrowed balance, total borrowed amount and rates"
      },
      "setBorrowersRegistry(address)": {
        "notice": "Sets the new borrowers registry contract. The borrowers registry decides if an account can borrow funds. Only the owner of the Contract can execute this function."
      },
      "setRatesCalculator(address)": {
        "notice": "Sets the new rate calculator. The calculator is an external contract that contains the logic for calculating deposit and borrowing rates. Only the owner of the Contract can execute this function."
      },
      "withdraw(uint256)": {
        "notice": "Withdraws selected amount from the user deposits"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 130,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 133,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 540,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 122,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 211,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "_status",
        "offset": 0,
        "slot": "101",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2725,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "_allowed",
        "offset": 0,
        "slot": "151",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2729,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "_deposited",
        "offset": 0,
        "slot": "152",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2733,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "borrowed",
        "offset": 0,
        "slot": "153",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2736,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "_ratesCalculator",
        "offset": 0,
        "slot": "154",
        "type": "t_contract(IRatesCalculator)4080"
      },
      {
        "astId": 2739,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "_borrowersRegistry",
        "offset": 0,
        "slot": "155",
        "type": "t_contract(IBorrowersRegistry)4058"
      },
      {
        "astId": 2742,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "_depositIndex",
        "offset": 0,
        "slot": "156",
        "type": "t_contract(CompoundingIndex)2696"
      },
      {
        "astId": 2745,
        "contract": "contracts/upgraded/PoolWithAccessNFT.sol:PoolWithAccessNFT",
        "label": "_borrowIndex",
        "offset": 0,
        "slot": "157",
        "type": "t_contract(CompoundingIndex)2696"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(CompoundingIndex)2696": {
        "encoding": "inplace",
        "label": "contract CompoundingIndex",
        "numberOfBytes": "20"
      },
      "t_contract(IBorrowersRegistry)4058": {
        "encoding": "inplace",
        "label": "contract IBorrowersRegistry",
        "numberOfBytes": "20"
      },
      "t_contract(IRatesCalculator)4080": {
        "encoding": "inplace",
        "label": "contract IRatesCalculator",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}