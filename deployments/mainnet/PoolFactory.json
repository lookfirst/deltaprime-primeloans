{
  "address": "0x38c8a29Fe32C6d95E6622944A953aaa29A526133",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "poolAddress",
          "type": "address"
        }
      ],
      "name": "PoolDeployed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "deployPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbea2884722b755f0db5b1da16cc5324565f2abf51b9b8f8a17f0bd801077fa77",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x38c8a29Fe32C6d95E6622944A953aaa29A526133",
    "transactionIndex": 0,
    "gasUsed": "4255734",
    "logsBloom": "0x
    "blockHash": "0x40e39b911e6d85dd68349d1d9f1fb717269da413ff7eddeac6c673f3b492e24b",
    "transactionHash": "0xbea2884722b755f0db5b1da16cc5324565f2abf51b9b8f8a17f0bd801077fa77",
    "logs": [],
    "blockNumber": 11643873,
    "cumulativeGasUsed": "4255734",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c41ab94881ec316de3e0326947a9597c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"poolAddress\",\"type\":\"address\"}],\"name\":\"PoolDeployed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"deployPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract factory allowing anyone to deploy a pool contract\",\"events\":{\"PoolDeployed(address)\":{\"details\":\"emitted after pool is deployed by any user\",\"params\":{\"poolAddress\":\"of deployed pool*\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"PoolFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployment/PoolFactory.sol\":\"PoolFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xa76b2220edefdc343f80cf91d31819f528acfbc3050b5f7c581fe5b313c4faf6\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x372b0bc04e3b4c074559bbbfb1317afddb56de5504158ca25a7f9cd403980445\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x68ec83a4d77bb3d4d639191b1567db8c1929b6d913188e9ba4a06d48e6101d43\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x55cf2bd9fc76704ddcdc19834cd288b7de00fc0f298a40ea16a954ae8991db2d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xcde1b9df57a7e25764a643792b42fb9b20f06199efc7b4bfc880334a45472ce7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uniswap/lib/contracts/libraries/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n\\npragma solidity >=0.6.0;\\n\\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\\nlibrary TransferHelper {\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeApprove: approve failed'\\n        );\\n    }\\n\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::safeTransfer: transfer failed'\\n        );\\n    }\\n\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\\n        require(\\n            success && (data.length == 0 || abi.decode(data, (bool))),\\n            'TransferHelper::transferFrom: transferFrom failed'\\n        );\\n    }\\n\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\\n    }\\n}\\n\",\"keccak256\":\"0xaff99b54915f57e2a4e71b8d15afd4ee425410e5a6f45c07517ae1beb806f8bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/CompoundingIndex.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * CompoundingIndex\\n * The contract contains logic for time-based index recalculation with minimal memory footprint.\\n * It could be used as a base building block for any index-based entities like deposits and loans.\\n * @dev updatedRate the value of updated rate\\n **/\\ncontract CompoundingIndex is Ownable {\\n  using WadRayMath for uint256;\\n\\n  uint256 private constant SECONDS_IN_YEAR = 365 days;\\n  uint256 private constant BASE_RATE = 1e18;\\n\\n  uint256 public start = block.timestamp;\\n\\n  uint256 public index = BASE_RATE;\\n  uint256 public indexUpdateTime = start;\\n\\n  mapping(uint256 => uint256) prevIndex;\\n  mapping(address => uint256) userUpdateTime;\\n\\n  uint256 public rate;\\n\\n  constructor(address owner_) {\\n    if (address(owner_) != address(0)) {\\n      transferOwnership(owner_);\\n    }\\n  }\\n\\n  /* ========== SETTERS ========== */\\n\\n  /**\\n   * Sets the new rate\\n   * Before the new rate is set, the index is updated accumulating interest\\n   * @dev updatedRate the value of updated rate\\n   **/\\n  function setRate(uint256 _rate) public onlyOwner {\\n    updateIndex();\\n    rate = _rate;\\n    emit RateUpdated(rate);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /**\\n   * Updates user index\\n   * It persists the update time and the update index time->index mapping\\n   * @dev user address of the index owner\\n   **/\\n  function updateUser(address user) public onlyOwner {\\n    userUpdateTime[user] = block.timestamp;\\n    prevIndex[block.timestamp] = getIndex();\\n  }\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  /**\\n   * Gets current value of the compounding index\\n   * It recalculates the value on-demand without updating the storage\\n   **/\\n  function getIndex() public view returns (uint256) {\\n    uint256 period = block.timestamp - indexUpdateTime;\\n    if (period > 0) {\\n      return index.wadToRay().rayMul(getCompoundedFactor(period)).rayToWad();\\n    } else {\\n      return index;\\n    }\\n  }\\n\\n  /**\\n   * Gets the user value recalculated to the current index\\n   * It recalculates the value on-demand without updating the storage\\n   * Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude\\n   * of 1 Wei)\\n   **/\\n  function getIndexedValue(uint256 value, address user) public view returns (uint256) {\\n    uint256 userTime = userUpdateTime[user];\\n    uint256 prevUserIndex = userTime == 0 ? BASE_RATE : prevIndex[userTime];\\n\\n    return value.wadToRay().rayMul(getIndex().wadToRay()).rayDiv(prevUserIndex.wadToRay()).rayToWad();\\n  }\\n\\n  /* ========== INTERNAL FUNCTIONS ========== */\\n\\n  function updateIndex() internal {\\n    prevIndex[indexUpdateTime] = index;\\n\\n    index = getIndex();\\n    indexUpdateTime = block.timestamp;\\n  }\\n\\n  /**\\n   * Returns compounded factor in Ray\\n   **/\\n  function getCompoundedFactor(uint256 period) internal view returns (uint256) {\\n    return ((rate.wadToRay() / SECONDS_IN_YEAR) + WadRayMath.ray()).rayPow(period);\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev updatedRate the value of updated rate\\n   **/\\n  event RateUpdated(uint256 updatedRate);\\n}\\n\",\"keccak256\":\"0x8b50fbe2e0442685282a77b976ee57643d5ef2f9e63c4e38ed00cf5a5b095d19\",\"license\":\"UNLICENSED\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\\\";\\nimport \\\"@uniswap/lib/contracts/libraries/TransferHelper.sol\\\";\\nimport \\\"./CompoundingIndex.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\nimport \\\"./interfaces/IBorrowersRegistry.sol\\\";\\n\\n\\n/**\\n * @title Pool\\n * @dev Contract allowing user to deposit and borrow funds from a single pot\\n * Depositors are rewarded with the interest rates collected from borrowers.\\n * Rates are compounded every second and getters always return the current deposit and borrowing balance.\\n * The interest rates calculation is delegated to the external calculator contract.\\n */\\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\\n  using TransferHelper for address payable;\\n\\n  uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.95e18;\\n\\n  mapping(address => mapping(address => uint256)) private _allowed;\\n  mapping(address => uint256) private _deposited;\\n\\n  mapping(address => uint256) public borrowed;\\n\\n  IRatesCalculator private _ratesCalculator;\\n  IBorrowersRegistry private _borrowersRegistry;\\n\\n  CompoundingIndex private _depositIndex;\\n  CompoundingIndex private _borrowIndex;\\n\\n  function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, CompoundingIndex depositIndex_, CompoundingIndex borrowIndex_) public initializer {\\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\n\\n    _borrowersRegistry = borrowersRegistry_;\\n    _ratesCalculator = ratesCalculator_;\\n    _depositIndex = depositIndex_;\\n    _borrowIndex = borrowIndex_;\\n\\n    __Ownable_init();\\n    __ReentrancyGuard_init();\\n    _updateRates();\\n  }\\n\\n  /* ========== SETTERS ========== */\\n\\n  /**\\n   * Sets the new rate calculator.\\n   * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\\n   * Only the owner of the Contract can execute this function.\\n   * @dev _ratesCalculator the address of rates calculator\\n   **/\\n  function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\\n    // setting address(0) ratesCalculator_ freezes the pool\\n    require(AddressUpgradeable.isContract(address(ratesCalculator_)) || address(ratesCalculator_) == address(0), \\\"Must be a contract\\\");\\n    _ratesCalculator = ratesCalculator_;\\n    if (address(ratesCalculator_) != address(0)) {\\n      _updateRates();\\n    }\\n  }\\n\\n  /**\\n   * Sets the new borrowers registry contract.\\n   * The borrowers registry decides if an account can borrow funds.\\n   * Only the owner of the Contract can execute this function.\\n   * @dev _borrowersRegistry the address of borrowers registry\\n   **/\\n  function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\\n    require(address(borrowersRegistry_) != address(0), \\\"The borrowers registry cannot set to a null address\\\");\\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \\\"Must be a contract\\\");\\n\\n    _borrowersRegistry = borrowersRegistry_;\\n    emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\\n    require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n    require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n    _accumulateDepositInterest(msg.sender);\\n\\n    require(_deposited[msg.sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n    // (this is verified in \\\"require\\\" above)\\n    unchecked {\\n      _deposited[msg.sender] -= amount;\\n    }\\n\\n    _accumulateDepositInterest(recipient);\\n    _deposited[recipient] += amount;\\n\\n    emit Transfer(msg.sender, recipient, amount);\\n\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender) external view override returns (uint256) {\\n    return _allowed[owner][spender];\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\n    uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\\n    _allowed[msg.sender][spender] = newAllowance;\\n\\n    emit Approval(msg.sender, spender, newAllowance);\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\n    uint256 currentAllowance = _allowed[msg.sender][spender];\\n    require(currentAllowance >= subtractedValue, \\\"Current allowance is smaller than the subtractedValue\\\");\\n\\n    uint256 newAllowance = currentAllowance - subtractedValue;\\n    _allowed[msg.sender][spender] = newAllowance;\\n\\n    emit Approval(msg.sender, spender, newAllowance);\\n    return true;\\n  }\\n\\n  function approve(address spender, uint256 amount) external override returns (bool) {\\n    require(spender != address(0), \\\"Allowance spender cannot be a zero address\\\");\\n    _allowed[msg.sender][spender] = amount;\\n\\n    emit Approval(msg.sender, spender, amount);\\n\\n    return true;\\n  }\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\\n    require(_allowed[sender][msg.sender] >= amount, \\\"Not enough tokens allowed to transfer required amount\\\");\\n    require(recipient != address(0), \\\"ERC20: cannot transfer to the zero address\\\");\\n    require(recipient != address(this), \\\"ERC20: cannot transfer to the pool address\\\");\\n\\n    _accumulateDepositInterest(msg.sender);\\n\\n    require(_deposited[sender] >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n    _deposited[sender] -= amount;\\n    _allowed[sender][msg.sender] -= amount;\\n\\n    _accumulateDepositInterest(recipient);\\n    _deposited[recipient] += amount;\\n\\n    emit Transfer(sender, recipient, amount);\\n\\n    return true;\\n  }\\n\\n  /**\\n   * Deposits the message value\\n   * It updates user deposited balance, total deposited and rates\\n   **/\\n  function deposit() public payable virtual nonReentrant {\\n    _accumulateDepositInterest(msg.sender);\\n\\n    _mint(msg.sender, msg.value);\\n    _updateRates();\\n\\n    emit Deposit(msg.sender, msg.value, block.timestamp);\\n  }\\n\\n  /**\\n   * Withdraws selected amount from the user deposits\\n   * @dev _amount the amount to be withdrawn\\n   **/\\n  function withdraw(uint256 _amount) external nonReentrant {\\n    require(address(this).balance >= _amount, \\\"There is not enough available funds to withdraw\\\");\\n\\n    _accumulateDepositInterest(msg.sender);\\n\\n    _burn(msg.sender, _amount);\\n\\n    payable(msg.sender).safeTransferETH(_amount);\\n\\n    _updateRates();\\n\\n    emit Withdrawal(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   * Borrows the specified amount\\n   * It updates user borrowed balance, total borrowed amount and rates\\n   * @dev _amount the amount to be borrowed\\n   **/\\n  function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\\n    require(address(this).balance >= _amount, \\\"There is not enough funds in the pool to fund the loan\\\");\\n\\n    _accumulateBorrowingInterest(msg.sender);\\n\\n    borrowed[msg.sender] += _amount;\\n    borrowed[address(this)] += _amount;\\n\\n    payable(msg.sender).safeTransferETH(_amount);\\n\\n    _updateRates();\\n\\n    emit Borrowing(msg.sender, _amount, block.timestamp);\\n  }\\n\\n  /**\\n   * Repays the message value\\n   * It updates user borrowed balance, total borrowed amount and rates\\n   * @dev It is only meant to be used by the SmartLoan.\\n   **/\\n  function repay() external payable nonReentrant {\\n    _accumulateBorrowingInterest(msg.sender);\\n\\n    require(borrowed[msg.sender] >= msg.value, \\\"You are trying to repay more that was borrowed by a user\\\");\\n\\n    borrowed[msg.sender] -= msg.value;\\n    borrowed[address(this)] -= msg.value;\\n\\n    _updateRates();\\n\\n    emit Repayment(msg.sender, msg.value, block.timestamp);\\n  }\\n\\n  /* =========\\n\\n\\n  /**\\n   * Returns the current borrowed amount for the given user\\n   * The value includes the interest rates owned at the current moment\\n   * @dev _user the address of queried borrower\\n  **/\\n  function getBorrowed(address _user) public view returns (uint256) {\\n    return _borrowIndex.getIndexedValue(borrowed[_user], _user);\\n  }\\n\\n  function totalSupply() public view override returns (uint256) {\\n    return balanceOf(address(this));\\n  }\\n\\n  function totalBorrowed() public view returns (uint256) {\\n    return getBorrowed(address(this));\\n  }\\n\\n  /**\\n   * Returns the current deposited amount for the given user\\n   * The value includes the interest rates earned at the current moment\\n   * @dev _user the address of queried depositor\\n   **/\\n  function balanceOf(address user) public view override returns (uint256) {\\n    return _depositIndex.getIndexedValue(_deposited[user], user);\\n  }\\n\\n  /**\\n   * Returns the current interest rate for deposits\\n   **/\\n  function getDepositRate() public view returns (uint256) {\\n    return _ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\\n  }\\n\\n  /**\\n   * Returns the current interest rate for borrowings\\n   **/\\n  function getBorrowingRate() public view returns (uint256) {\\n    return _ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\\n  }\\n\\n  /**\\n   * Recovers the surplus funds resultant from difference between deposit and borrowing rates\\n   **/\\n  function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\\n    uint256 surplus = address(this).balance + totalBorrowed() - totalSupply();\\n\\n    require(amount <= address(this).balance, \\\"Trying to recover more surplus funds than pool balance\\\");\\n    require(amount <= surplus, \\\"Trying to recover more funds than current surplus\\\");\\n\\n    payable(account).safeTransferETH(amount);\\n  }\\n\\n  /* ========== INTERNAL FUNCTIONS ========== */\\n\\n  function _mint(address account, uint256 amount) internal {\\n    require(account != address(0), \\\"ERC20: cannot mint to the zero address\\\");\\n\\n    _deposited[account] += amount;\\n    _deposited[address(this)] += amount;\\n\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _burn(address account, uint256 amount) internal {\\n    require(_deposited[account] >= amount, \\\"ERC20: burn amount exceeds user balance\\\");\\n    require(_deposited[address(this)] >= amount, \\\"ERC20: burn amount exceeds current pool indexed balance\\\");\\n\\n    // verified in \\\"require\\\" above\\n    unchecked {\\n      _deposited[account] -= amount;\\n      _deposited[address(this)] -= amount;\\n    }\\n\\n    emit Transfer(account, address(0), amount);\\n  }\\n\\n  function _updateRates() internal {\\n    require(address(_ratesCalculator) != address(0), \\\"Pool is frozen: cannot perform deposit, withdraw, borrow and repay operations\\\");\\n    _depositIndex.setRate(_ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply()));\\n    _borrowIndex.setRate(_ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply()));\\n  }\\n\\n  function _accumulateDepositInterest(address user) internal {\\n    uint256 depositedWithInterest = balanceOf(user);\\n    uint256 interest = depositedWithInterest - _deposited[user];\\n\\n    _mint(user, interest);\\n\\n    emit InterestCollected(user, interest, block.timestamp);\\n\\n    _depositIndex.updateUser(user);\\n    _depositIndex.updateUser(address(this));\\n  }\\n\\n  function _accumulateBorrowingInterest(address user) internal {\\n    uint256 borrowedWithInterest = getBorrowed(user);\\n    uint256 interest = borrowedWithInterest - borrowed[user];\\n    borrowed[user] = borrowedWithInterest;\\n    borrowed[address(this)] += interest;\\n\\n    _borrowIndex.updateUser(user);\\n    _borrowIndex.updateUser(address(this));\\n  }\\n\\n  /* ========== MODIFIERS ========== */\\n\\n  modifier canBorrow() {\\n    require(address(_borrowersRegistry) != address(0), \\\"Borrowers registry is not configured\\\");\\n    require(_borrowersRegistry.canBorrow(msg.sender), \\\"Only the accounts authorised by borrowers registry may borrow\\\");\\n    require(totalSupply() != 0, \\\"Cannot borrow from an empty pool\\\");\\n    _;\\n    require((totalBorrowed() * 1e18) / totalSupply() <= MAX_POOL_UTILISATION_FOR_BORROWING, \\\"The pool utilisation cannot be greater than 95%\\\");\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev emitted after the user deposits funds\\n   * @param user the address performing the deposit\\n   * @param value the amount deposited\\n   * @param timestamp of the deposit\\n   **/\\n  event Deposit(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the user withdraws funds\\n   * @param user the address performing the withdrawal\\n   * @param value the amount withdrawn\\n   * @param timestamp of the withdrawal\\n   **/\\n  event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the user borrows funds\\n   * @param user the address that borrows\\n   * @param value the amount borrowed\\n   * @param timestamp time of the borrowing\\n   **/\\n  event Borrowing(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after the user repays debt\\n   * @param user the address that repays\\n   * @param value the amount repaid\\n   * @param timestamp of the repayment\\n   **/\\n  event Repayment(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n   * @dev emitted after accumulating deposit interest\\n   * @param user the address that the deposit interest is accumulated\\n   * @param value the amount accumulated interest\\n   * @param timestamp of the interest accumulation\\n   **/\\n  event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\\n\\n  /**\\n  * @dev emitted after changing borrowers registry\\n  * @param registry an address of the newly set borrowers registry\\n  * @param timestamp of the borrowers registry change\\n  **/\\n  event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\\n}\",\"keccak256\":\"0xf64d224ddf152c2bb0ab8d4e7acb471db5897f6e389957a2b73d82b433e17a1e\",\"license\":\"UNLICENSED\"},\"contracts/deployment/PoolFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity ^0.8.4;\\n\\nimport \\\"../Pool.sol\\\";\\n\\n\\n/**\\n * @title PoolFactory\\n * @dev Contract factory allowing anyone to deploy a pool contract\\n */\\ncontract PoolFactory {\\n  function deployPool() public {\\n    Pool pool = new Pool();\\n    emit PoolDeployed(address(pool));\\n  }\\n\\n  /**\\n   * @dev emitted after pool is deployed by any user\\n   * @param poolAddress of deployed pool\\n   **/\\n  event PoolDeployed(address poolAddress);\\n}\",\"keccak256\":\"0x119e2ccfbde022c1876625d26e852329ffc3503045dac955d3c4810e4772517e\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IBorrowersRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IBorrowersRegistry\\n * Keeps a registry of created trading accounts to verify their borrowing rights\\n */\\ninterface IBorrowersRegistry {\\n  function canBorrow(address _account) external view returns (bool);\\n\\n  function getLoanForOwner(address _owner) external view returns (address);\\n\\n  function getOwnerOfLoan(address _loan) external view returns (address);\\n}\\n\",\"keccak256\":\"0xc2b1669e9eec367260824bc0c3d3903bdbb4e78f79b25de7ebcdb7e6d00789bf\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n  function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x953a720aee8eb8e0861259d568fc0c123d3e72f81be777dc087166885b8cf05c\",\"license\":\"UNLICENSED\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL3\\npragma solidity ^0.8.4;\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n@dev https://github.com/aave/aave-protocol/blob/master/contracts/libraries/WadRayMath.sol\\n */\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    //return halfWAD.add(a.mul(b)).div(WAD);\\n    return (halfWAD + (a * b)) / WAD;\\n  }\\n\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n\\n    //return halfB.add(a.mul(WAD)).div(b);\\n    return (halfB + (a * WAD)) / b;\\n  }\\n\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    //return halfRAY.add(a.mul(b)).div(RAY);\\n    return (halfRAY + (a * b)) / RAY;\\n  }\\n\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n\\n    //return halfB.add(a.mul(RAY)).div(b);\\n    return (halfB + (a * RAY)) / b;\\n  }\\n\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n    //return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    return (halfRatio + a) / WAD_RAY_RATIO;\\n  }\\n\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    //return a.mul(WAD_RAY_RATIO);\\n    return a * WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev calculates base^exp. The code uses the ModExp precompile\\n   */\\n  //solium-disable-next-line\\n  function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rayMul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rayMul(z, x);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xef7c4f4bff6fb6054160dad2dce84a7d46c92058f0842bd08ebede11be88b752\",\"license\":\"AGPL3\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50614c69806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806314d5275114610030575b600080fd5b61003861003a565b005b6000604051610048906100a1565b604051809103906000f080158015610064573d6000803e3d6000fd5b5090507ff0d1eeab175eee2e20b8dc452773bf2257b25724b323b42bc6e5b4616233ae1f8160405161009691906100bd565b60405180910390a150565b614b298061010b83390190565b6100b7816100d8565b82525050565b60006020820190506100d260008301846100ae565b92915050565b60006100e3826100ea565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff8216905091905056fe608060405234801561001057600080fd5b50614b09806100206000396000f3fe6080604052600436106101665760003560e01c8063715018a6116100d1578063c5ebeaec1161008a578063f2fde38b11610064578063f2fde38b14610536578063f36b24251461055f578063f8c8765e1461058a578063fc68f661146105b357610166565b8063c5ebeaec146104c6578063d0e30db0146104ef578063dd62ed3e146104f957610166565b8063715018a6146103b45780638da5cb5b146103cb5780639dcee9a4146103f6578063a457c2d714610421578063a9059cbb1461045e578063b790634e1461049b57610166565b80633950935111610123578063395093511461029f578063402d8883146102dc5780634c19386c146102e65780636011163e1461031157806370a082311461034e57806370d4cea01461038b57610166565b80630790ef9a1461016b5780630941cb3d14610194578063095ea7b3146101d157806318160ddd1461020e57806323b872dd146102395780632e1a7d4d14610276575b600080fd5b34801561017757600080fd5b50610192600480360381019061018d91906137b6565b6105dc565b005b3480156101a057600080fd5b506101bb60048036038101906101b69190613596565b61078b565b6040516101c89190613fae565b60405180910390f35b3480156101dd57600080fd5b506101f860048036038101906101f3919061364a565b6107a3565b6040516102059190613c33565b60405180910390f35b34801561021a57600080fd5b50610223610904565b6040516102309190613fae565b60405180910390f35b34801561024557600080fd5b50610260600480360381019061025b91906135fb565b610914565b60405161026d9190613c33565b60405180910390f35b34801561028257600080fd5b5061029d60048036038101906102989190613764565b610cf7565b005b3480156102ab57600080fd5b506102c660048036038101906102c1919061364a565b610e27565b6040516102d39190613c33565b60405180910390f35b6102e4611015565b005b3480156102f257600080fd5b506102fb6111fc565b6040516103089190613fae565b60405180910390f35b34801561031d57600080fd5b5061033860048036038101906103339190613596565b61120c565b6040516103459190613fae565b60405180910390f35b34801561035a57600080fd5b5061037560048036038101906103709190613596565b611301565b6040516103829190613fae565b60405180910390f35b34801561039757600080fd5b506103b260048036038101906103ad91906136d8565b6113f6565b005b3480156103c057600080fd5b506103c9611572565b005b3480156103d757600080fd5b506103e06115fa565b6040516103ed9190613c18565b60405180910390f35b34801561040257600080fd5b5061040b611624565b6040516104189190613fae565b60405180910390f35b34801561042d57600080fd5b506104486004803603810190610443919061364a565b611630565b6040516104559190613c33565b60405180910390f35b34801561046a57600080fd5b506104856004803603810190610480919061364a565b611867565b6040516104929190613c33565b60405180910390f35b3480156104a757600080fd5b506104b0611aed565b6040516104bd9190613fae565b60405180910390f35b3480156104d257600080fd5b506104ed60048036038101906104e89190613764565b611baf565b005b6104f7611fbf565b005b34801561050557600080fd5b50610520600480360381019061051b91906135bf565b612082565b60405161052d9190613fae565b60405180910390f35b34801561054257600080fd5b5061055d60048036038101906105589190613596565b612109565b005b34801561056b57600080fd5b50610574612201565b6040516105819190613fae565b60405180910390f35b34801561059657600080fd5b506105b160048036038101906105ac9190613701565b6122c3565b005b3480156105bf57600080fd5b506105da60048036038101906105d591906136af565b61250f565b005b6105e46126d5565b73ffffffffffffffffffffffffffffffffffffffff166106026115fa565b73ffffffffffffffffffffffffffffffffffffffff1614610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f90613eae565b60405180910390fd5b6002606554141561069e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069590613f4e565b60405180910390fd5b600260658190555060006106b0610904565b6106b86111fc565b476106c39190614042565b6106cd9190614123565b905047831115610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070990613e6e565b60405180910390fd5b80831115610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c90613f6e565b60405180910390fd5b61077e838373ffffffffffffffffffffffffffffffffffffffff166126dd90919063ffffffff16565b5060016065819055505050565b60996020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080b90613eee565b60405180910390fd5b81609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516108f29190613fae565b60405180910390a36001905092915050565b600061090f30611301565b905090565b600081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156109d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cc90613dae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3c90613d0e565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aab90613ece565b60405180910390fd5b610abd33612803565b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3690613d2e565b60405180910390fd5b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b8e9190614123565b9250508190555081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c219190614123565b92505081905550610c3183612803565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c809190614042565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ce49190613fae565b60405180910390a3600190509392505050565b60026065541415610d3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3490613f4e565b60405180910390fd5b600260658190555080471015610d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7f90613f8e565b60405180910390fd5b610d9133612803565b610d9b33826129d8565b610dc4813373ffffffffffffffffffffffffffffffffffffffff166126dd90919063ffffffff16565b610dcc612be0565b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8242604051610e14929190613ff2565b60405180910390a2600160658190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8f90613eee565b60405180910390fd5b600082609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f229190614042565b905080609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516110029190613fae565b60405180910390a3600191505092915050565b6002606554141561105b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105290613f4e565b60405180910390fd5b600260658190555061106c33612f02565b34609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156110ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e590613cae565b60405180910390fd5b34609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461113d9190614123565b9250508190555034609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111939190614123565b925050819055506111a2612be0565b3373ffffffffffffffffffffffffffffffffffffffff167f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d34426040516111ea929190613ff2565b60405180910390a26001606581905550565b60006112073061120c565b905090565b6000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b81526004016112aa929190613fc9565b60206040518083038186803b1580156112c257600080fd5b505afa1580156112d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fa919061378d565b9050919050565b6000609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b815260040161139f929190613fc9565b60206040518083038186803b1580156113b757600080fd5b505afa1580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ef919061378d565b9050919050565b6113fe6126d5565b73ffffffffffffffffffffffffffffffffffffffff1661141c6115fa565b73ffffffffffffffffffffffffffffffffffffffff1614611472576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146990613eae565b60405180910390fd5b61147b81613117565b806114b25750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6114f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e890613d6e565b60405180910390fd5b80609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461156f5761156e612be0565b5b50565b61157a6126d5565b73ffffffffffffffffffffffffffffffffffffffff166115986115fa565b73ffffffffffffffffffffffffffffffffffffffff16146115ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e590613eae565b60405180910390fd5b6115f8600061313a565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b670d2f13f7789f000081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156116a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169890613eee565b60405180910390fd5b6000609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175c90613dee565b60405180910390fd5b600083826117739190614123565b905080609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516118539190613fae565b60405180910390a360019250505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156118d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cf90613d0e565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193e90613ece565b60405180910390fd5b61195033612803565b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156119d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c990613d2e565b60405180910390fd5b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550611a2883612803565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a779190614042565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611adb9190613fae565b60405180910390a36001905092915050565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd08331611b356111fc565b611b3d610904565b6040518363ffffffff1660e01b8152600401611b5a929190613ff2565b60206040518083038186803b158015611b7257600080fd5b505afa158015611b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baa919061378d565b905090565b600073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611c41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3890613e4e565b60405180910390fd5b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b8152600401611c9c9190613c18565b60206040518083038186803b158015611cb457600080fd5b505afa158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec9190613686565b611d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2290613c8e565b60405180910390fd5b6000611d35610904565b1415611d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6d90613e2e565b60405180910390fd5b60026065541415611dbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db390613f4e565b60405180910390fd5b600260658190555080471015611e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfe90613c4e565b60405180910390fd5b611e1033612f02565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e5f9190614042565b9250508190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611eb59190614042565b92505081905550611ee5813373ffffffffffffffffffffffffffffffffffffffff166126dd90919063ffffffff16565b611eed612be0565b3373ffffffffffffffffffffffffffffffffffffffff167fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d58242604051611f35929190613ff2565b60405180910390a26001606581905550670d2f13f7789f0000611f56610904565b670de0b6b3a7640000611f676111fc565b611f7191906140c9565b611f7b9190614098565b1115611fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb390613cee565b60405180910390fd5b50565b60026065541415612005576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffc90613f4e565b60405180910390fd5b600260658190555061201633612803565b6120203334613200565b612028612be0565b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a153442604051612070929190613ff2565b60405180910390a26001606581905550565b6000609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6121116126d5565b73ffffffffffffffffffffffffffffffffffffffff1661212f6115fa565b73ffffffffffffffffffffffffffffffffffffffff1614612185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217c90613eae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ec90613cce565b60405180910390fd5b6121fe8161313a565b50565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec6122496111fc565b612251610904565b6040518363ffffffff1660e01b815260040161226e929190613ff2565b60206040518083038186803b15801561228657600080fd5b505afa15801561229a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122be919061378d565b905090565b600060019054906101000a900460ff166122eb5760008054906101000a900460ff16156122f4565b6122f3613386565b5b612333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232a90613e0e565b60405180910390fd5b60008060019054906101000a900460ff161590508015612383576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61238c84613117565b6123cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c290613d6e565b60405180910390fd5b83609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506124d7613397565b6124df6133f0565b6124e7612be0565b80156125085760008060016101000a81548160ff0219169083151502179055505b5050505050565b6125176126d5565b73ffffffffffffffffffffffffffffffffffffffff166125356115fa565b73ffffffffffffffffffffffffffffffffffffffff161461258b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258290613eae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f290613f2e565b60405180910390fd5b61260481613117565b612643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263a90613d6e565b60405180910390fd5b80609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b920469426040516126ca9190613fae565b60405180910390a250565b600033905090565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115612738577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561276a5781602001600182028036833780820191505090505b506040516127789190613c01565b60006040518083038185875af1925050503d80600081146127b5576040519150601f19603f3d011682016040523d82523d6000602084013e6127ba565b606091505b50509050806127fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f590613d4e565b60405180910390fd5b505050565b600061280e82611301565b90506000609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261285d9190614123565b90506128698382613200565b8273ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e216182426040516128b1929190613ff2565b60405180910390a2609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336846040518263ffffffff1660e01b81526004016129149190613c18565b600060405180830381600087803b15801561292e57600080fd5b505af1158015612942573d6000803e3d6000fd5b50505050609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b81526004016129a19190613c18565b600060405180830381600087803b1580156129bb57600080fd5b505af11580156129cf573d6000803e3d6000fd5b50505050505050565b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5190613d8e565b60405180910390fd5b80609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad390613dce565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612bd49190613fae565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff16609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612c72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6990613c6e565b60405180910390fd5b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd08331612cf66111fc565b612cfe610904565b6040518363ffffffff1660e01b8152600401612d1b929190613ff2565b60206040518083038186803b158015612d3357600080fd5b505afa158015612d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6b919061378d565b6040518263ffffffff1660e01b8152600401612d879190613fae565b600060405180830381600087803b158015612da157600080fd5b505af1158015612db5573d6000803e3d6000fd5b50505050609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec612e3d6111fc565b612e45610904565b6040518363ffffffff1660e01b8152600401612e62929190613ff2565b60206040518083038186803b158015612e7a57600080fd5b505afa158015612e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb2919061378d565b6040518263ffffffff1660e01b8152600401612ece9190613fae565b600060405180830381600087803b158015612ee857600080fd5b505af1158015612efc573d6000803e3d6000fd5b50505050565b6000612f0d8261120c565b90506000609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612f5c9190614123565b905081609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ff19190614042565b92505081905550609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336846040518263ffffffff1660e01b81526004016130539190613c18565b600060405180830381600087803b15801561306d57600080fd5b505af1158015613081573d6000803e3d6000fd5b50505050609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b81526004016130e09190613c18565b600060405180830381600087803b1580156130fa57600080fd5b505af115801561310e573d6000803e3d6000fd5b50505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613270576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161326790613e8e565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546132bf9190614042565b9250508190555080609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133159190614042565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161337a9190613fae565b60405180910390a35050565b600061339130613117565b15905090565b600060019054906101000a900460ff166133e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133dd90613f0e565b60405180910390fd5b6133ee613449565b565b600060019054906101000a900460ff1661343f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161343690613f0e565b60405180910390fd5b6134476134aa565b565b600060019054906101000a900460ff16613498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161348f90613f0e565b60405180910390fd5b6134a86134a36126d5565b61313a565b565b600060019054906101000a900460ff166134f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134f090613f0e565b60405180910390fd5b6001606581905550565b60008135905061351281614a49565b92915050565b60008151905061352781614a60565b92915050565b60008135905061353c81614a77565b92915050565b60008135905061355181614a8e565b92915050565b60008135905061356681614aa5565b92915050565b60008135905061357b81614abc565b92915050565b60008151905061359081614abc565b92915050565b6000602082840312156135a857600080fd5b60006135b684828501613503565b91505092915050565b600080604083850312156135d257600080fd5b60006135e085828601613503565b92505060206135f185828601613503565b9150509250929050565b60008060006060848603121561361057600080fd5b600061361e86828701613503565b935050602061362f86828701613503565b92505060406136408682870161356c565b9150509250925092565b6000806040838503121561365d57600080fd5b600061366b85828601613503565b925050602061367c8582860161356c565b9150509250929050565b60006020828403121561369857600080fd5b60006136a684828501613518565b91505092915050565b6000602082840312156136c157600080fd5b60006136cf84828501613542565b91505092915050565b6000602082840312156136ea57600080fd5b60006136f884828501613557565b91505092915050565b6000806000806080858703121561371757600080fd5b600061372587828801613557565b945050602061373687828801613542565b93505060406137478782880161352d565b92505060606137588782880161352d565b91505092959194509250565b60006020828403121561377657600080fd5b60006137848482850161356c565b91505092915050565b60006020828403121561379f57600080fd5b60006137ad84828501613581565b91505092915050565b600080604083850312156137c957600080fd5b60006137d78582860161356c565b92505060206137e885828601613503565b9150509250929050565b6137fb81614157565b82525050565b61380a81614169565b82525050565b600061381b8261401b565b6138258185614026565b93506138358185602086016141d5565b80840191505092915050565b600061384e603683614031565b915061385982614266565b604082019050919050565b6000613871604d83614031565b915061387c826142b5565b606082019050919050565b6000613894603d83614031565b915061389f8261432a565b604082019050919050565b60006138b7603883614031565b91506138c282614379565b604082019050919050565b60006138da602683614031565b91506138e5826143c8565b604082019050919050565b60006138fd602f83614031565b915061390882614417565b604082019050919050565b6000613920602a83614031565b915061392b82614466565b604082019050919050565b6000613943602683614031565b915061394e826144b5565b604082019050919050565b6000613966603483614031565b915061397182614504565b604082019050919050565b6000613989601283614031565b915061399482614553565b602082019050919050565b60006139ac602783614031565b91506139b78261457c565b604082019050919050565b60006139cf603583614031565b91506139da826145cb565b604082019050919050565b60006139f2603783614031565b91506139fd8261461a565b604082019050919050565b6000613a15603583614031565b9150613a2082614669565b604082019050919050565b6000613a38602e83614031565b9150613a43826146b8565b604082019050919050565b6000613a5b602083614031565b9150613a6682614707565b602082019050919050565b6000613a7e602483614031565b9150613a8982614730565b604082019050919050565b6000613aa1603683614031565b9150613aac8261477f565b604082019050919050565b6000613ac4602683614031565b9150613acf826147ce565b604082019050919050565b6000613ae7602083614031565b9150613af28261481d565b602082019050919050565b6000613b0a602a83614031565b9150613b1582614846565b604082019050919050565b6000613b2d602a83614031565b9150613b3882614895565b604082019050919050565b6000613b50602b83614031565b9150613b5b826148e4565b604082019050919050565b6000613b73603383614031565b9150613b7e82614933565b604082019050919050565b6000613b96601f83614031565b9150613ba182614982565b602082019050919050565b6000613bb9603183614031565b9150613bc4826149ab565b604082019050919050565b6000613bdc602f83614031565b9150613be7826149fa565b604082019050919050565b613bfb816141cb565b82525050565b6000613c0d8284613810565b915081905092915050565b6000602082019050613c2d60008301846137f2565b92915050565b6000602082019050613c486000830184613801565b92915050565b60006020820190508181036000830152613c6781613841565b9050919050565b60006020820190508181036000830152613c8781613864565b9050919050565b60006020820190508181036000830152613ca781613887565b9050919050565b60006020820190508181036000830152613cc7816138aa565b9050919050565b60006020820190508181036000830152613ce7816138cd565b9050919050565b60006020820190508181036000830152613d07816138f0565b9050919050565b60006020820190508181036000830152613d2781613913565b9050919050565b60006020820190508181036000830152613d4781613936565b9050919050565b60006020820190508181036000830152613d6781613959565b9050919050565b60006020820190508181036000830152613d878161397c565b9050919050565b60006020820190508181036000830152613da78161399f565b9050919050565b60006020820190508181036000830152613dc7816139c2565b9050919050565b60006020820190508181036000830152613de7816139e5565b9050919050565b60006020820190508181036000830152613e0781613a08565b9050919050565b60006020820190508181036000830152613e2781613a2b565b9050919050565b60006020820190508181036000830152613e4781613a4e565b9050919050565b60006020820190508181036000830152613e6781613a71565b9050919050565b60006020820190508181036000830152613e8781613a94565b9050919050565b60006020820190508181036000830152613ea781613ab7565b9050919050565b60006020820190508181036000830152613ec781613ada565b9050919050565b60006020820190508181036000830152613ee781613afd565b9050919050565b60006020820190508181036000830152613f0781613b20565b9050919050565b60006020820190508181036000830152613f2781613b43565b9050919050565b60006020820190508181036000830152613f4781613b66565b9050919050565b60006020820190508181036000830152613f6781613b89565b9050919050565b60006020820190508181036000830152613f8781613bac565b9050919050565b60006020820190508181036000830152613fa781613bcf565b9050919050565b6000602082019050613fc36000830184613bf2565b92915050565b6000604082019050613fde6000830185613bf2565b613feb60208301846137f2565b9392505050565b60006040820190506140076000830185613bf2565b6140146020830184613bf2565b9392505050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061404d826141cb565b9150614058836141cb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561408d5761408c614208565b5b828201905092915050565b60006140a3826141cb565b91506140ae836141cb565b9250826140be576140bd614237565b5b828204905092915050565b60006140d4826141cb565b91506140df836141cb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561411857614117614208565b5b828202905092915050565b600061412e826141cb565b9150614139836141cb565b92508282101561414c5761414b614208565b5b828203905092915050565b6000614162826141ab565b9050919050565b60008115159050919050565b600061418082614157565b9050919050565b600061419282614157565b9050919050565b60006141a482614157565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156141f35780820151818401526020810190506141d8565b83811115614202576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f5468657265206973206e6f7420656e6f7567682066756e647320696e2074686560008201527f20706f6f6c20746f2066756e6420746865206c6f616e00000000000000000000602082015250565b7f506f6f6c2069732066726f7a656e3a2063616e6e6f7420706572666f726d206460008201527f65706f7369742c2077697468647261772c20626f72726f7720616e642072657060208201527f6179206f7065726174696f6e7300000000000000000000000000000000000000604082015250565b7f4f6e6c7920746865206163636f756e747320617574686f72697365642062792060008201527f626f72726f77657273207265676973747279206d617920626f72726f77000000602082015250565b7f596f752061726520747279696e6720746f207265706179206d6f72652074686160008201527f742077617320626f72726f776564206279206120757365720000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f54686520706f6f6c207574696c69736174696f6e2063616e6e6f74206265206760008201527f726561746572207468616e203935250000000000000000000000000000000000602082015250565b7f45524332303a2063616e6e6f74207472616e7366657220746f20746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b7f4d757374206265206120636f6e74726163740000000000000000000000000000600082015250565b7f45524332303a206275726e20616d6f756e74206578636565647320757365722060008201527f62616c616e636500000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f75676820746f6b656e7320616c6c6f77656420746f2074726160008201527f6e7366657220726571756972656420616d6f756e740000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e74206578636565647320637572726560008201527f6e7420706f6f6c20696e64657865642062616c616e6365000000000000000000602082015250565b7f43757272656e7420616c6c6f77616e636520697320736d616c6c65722074686160008201527f6e20746865207375627472616374656456616c75650000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f43616e6e6f7420626f72726f772066726f6d20616e20656d70747920706f6f6c600082015250565b7f426f72726f77657273207265676973747279206973206e6f7420636f6e66696760008201527f7572656400000000000000000000000000000000000000000000000000000000602082015250565b7f547279696e6720746f207265636f766572206d6f726520737572706c7573206660008201527f756e6473207468616e20706f6f6c2062616c616e636500000000000000000000602082015250565b7f45524332303a2063616e6e6f74206d696e7420746f20746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a2063616e6e6f74207472616e7366657220746f2074686520706f60008201527f6f6c206164647265737300000000000000000000000000000000000000000000602082015250565b7f416c6c6f77616e6365207370656e6465722063616e6e6f742062652061207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f54686520626f72726f776572732072656769737472792063616e6e6f7420736560008201527f7420746f2061206e756c6c206164647265737300000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f547279696e6720746f207265636f766572206d6f72652066756e64732074686160008201527f6e2063757272656e7420737572706c7573000000000000000000000000000000602082015250565b7f5468657265206973206e6f7420656e6f75676820617661696c61626c6520667560008201527f6e647320746f2077697468647261770000000000000000000000000000000000602082015250565b614a5281614157565b8114614a5d57600080fd5b50565b614a6981614169565b8114614a7457600080fd5b50565b614a8081614175565b8114614a8b57600080fd5b50565b614a9781614187565b8114614aa257600080fd5b50565b614aae81614199565b8114614ab957600080fd5b50565b614ac5816141cb565b8114614ad057600080fd5b5056fea2646970667358221220eddf9e7d706ef90d73fe0bd2b1d1d0ce7bcf46789f98a0adc3a4bff4a538d0cf64736f6c63430008040033a264697066735822122042c22d528f482847aa1dca8f7743cef0789c4ebc314843feebc9db228e6a0c6364736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061002b5760003560e01c806314d5275114610030575b600080fd5b61003861003a565b005b6000604051610048906100a1565b604051809103906000f080158015610064573d6000803e3d6000fd5b5090507ff0d1eeab175eee2e20b8dc452773bf2257b25724b323b42bc6e5b4616233ae1f8160405161009691906100bd565b60405180910390a150565b614b298061010b83390190565b6100b7816100d8565b82525050565b60006020820190506100d260008301846100ae565b92915050565b60006100e3826100ea565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff8216905091905056fe608060405234801561001057600080fd5b50614b09806100206000396000f3fe6080604052600436106101665760003560e01c8063715018a6116100d1578063c5ebeaec1161008a578063f2fde38b11610064578063f2fde38b14610536578063f36b24251461055f578063f8c8765e1461058a578063fc68f661146105b357610166565b8063c5ebeaec146104c6578063d0e30db0146104ef578063dd62ed3e146104f957610166565b8063715018a6146103b45780638da5cb5b146103cb5780639dcee9a4146103f6578063a457c2d714610421578063a9059cbb1461045e578063b790634e1461049b57610166565b80633950935111610123578063395093511461029f578063402d8883146102dc5780634c19386c146102e65780636011163e1461031157806370a082311461034e57806370d4cea01461038b57610166565b80630790ef9a1461016b5780630941cb3d14610194578063095ea7b3146101d157806318160ddd1461020e57806323b872dd146102395780632e1a7d4d14610276575b600080fd5b34801561017757600080fd5b50610192600480360381019061018d91906137b6565b6105dc565b005b3480156101a057600080fd5b506101bb60048036038101906101b69190613596565b61078b565b6040516101c89190613fae565b60405180910390f35b3480156101dd57600080fd5b506101f860048036038101906101f3919061364a565b6107a3565b6040516102059190613c33565b60405180910390f35b34801561021a57600080fd5b50610223610904565b6040516102309190613fae565b60405180910390f35b34801561024557600080fd5b50610260600480360381019061025b91906135fb565b610914565b60405161026d9190613c33565b60405180910390f35b34801561028257600080fd5b5061029d60048036038101906102989190613764565b610cf7565b005b3480156102ab57600080fd5b506102c660048036038101906102c1919061364a565b610e27565b6040516102d39190613c33565b60405180910390f35b6102e4611015565b005b3480156102f257600080fd5b506102fb6111fc565b6040516103089190613fae565b60405180910390f35b34801561031d57600080fd5b5061033860048036038101906103339190613596565b61120c565b6040516103459190613fae565b60405180910390f35b34801561035a57600080fd5b5061037560048036038101906103709190613596565b611301565b6040516103829190613fae565b60405180910390f35b34801561039757600080fd5b506103b260048036038101906103ad91906136d8565b6113f6565b005b3480156103c057600080fd5b506103c9611572565b005b3480156103d757600080fd5b506103e06115fa565b6040516103ed9190613c18565b60405180910390f35b34801561040257600080fd5b5061040b611624565b6040516104189190613fae565b60405180910390f35b34801561042d57600080fd5b506104486004803603810190610443919061364a565b611630565b6040516104559190613c33565b60405180910390f35b34801561046a57600080fd5b506104856004803603810190610480919061364a565b611867565b6040516104929190613c33565b60405180910390f35b3480156104a757600080fd5b506104b0611aed565b6040516104bd9190613fae565b60405180910390f35b3480156104d257600080fd5b506104ed60048036038101906104e89190613764565b611baf565b005b6104f7611fbf565b005b34801561050557600080fd5b50610520600480360381019061051b91906135bf565b612082565b60405161052d9190613fae565b60405180910390f35b34801561054257600080fd5b5061055d60048036038101906105589190613596565b612109565b005b34801561056b57600080fd5b50610574612201565b6040516105819190613fae565b60405180910390f35b34801561059657600080fd5b506105b160048036038101906105ac9190613701565b6122c3565b005b3480156105bf57600080fd5b506105da60048036038101906105d591906136af565b61250f565b005b6105e46126d5565b73ffffffffffffffffffffffffffffffffffffffff166106026115fa565b73ffffffffffffffffffffffffffffffffffffffff1614610658576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161064f90613eae565b60405180910390fd5b6002606554141561069e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161069590613f4e565b60405180910390fd5b600260658190555060006106b0610904565b6106b86111fc565b476106c39190614042565b6106cd9190614123565b905047831115610712576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070990613e6e565b60405180910390fd5b80831115610755576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074c90613f6e565b60405180910390fd5b61077e838373ffffffffffffffffffffffffffffffffffffffff166126dd90919063ffffffff16565b5060016065819055505050565b60996020528060005260406000206000915090505481565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610814576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161080b90613eee565b60405180910390fd5b81609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516108f29190613fae565b60405180910390a36001905092915050565b600061090f30611301565b905090565b600081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156109d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109cc90613dae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610a45576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a3c90613d0e565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610ab4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aab90613ece565b60405180910390fd5b610abd33612803565b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610b3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b3690613d2e565b60405180910390fd5b81609860008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b8e9190614123565b9250508190555081609760008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c219190614123565b92505081905550610c3183612803565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c809190614042565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ce49190613fae565b60405180910390a3600190509392505050565b60026065541415610d3d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3490613f4e565b60405180910390fd5b600260658190555080471015610d88576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d7f90613f8e565b60405180910390fd5b610d9133612803565b610d9b33826129d8565b610dc4813373ffffffffffffffffffffffffffffffffffffffff166126dd90919063ffffffff16565b610dcc612be0565b3373ffffffffffffffffffffffffffffffffffffffff167fdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb8242604051610e14929190613ff2565b60405180910390a2600160658190555050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415610e98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e8f90613eee565b60405180910390fd5b600082609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054610f229190614042565b905080609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516110029190613fae565b60405180910390a3600191505092915050565b6002606554141561105b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105290613f4e565b60405180910390fd5b600260658190555061106c33612f02565b34609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156110ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110e590613cae565b60405180910390fd5b34609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461113d9190614123565b9250508190555034609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546111939190614123565b925050819055506111a2612be0565b3373ffffffffffffffffffffffffffffffffffffffff167f24fcca58a997b1b2eff6db8107e860458544c09ddd3693b3b779e1df6c0d6c5d34426040516111ea929190613ff2565b60405180910390a26001606581905550565b60006112073061120c565b905090565b6000609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b81526004016112aa929190613fc9565b60206040518083038186803b1580156112c257600080fd5b505afa1580156112d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fa919061378d565b9050919050565b6000609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663966da889609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054846040518363ffffffff1660e01b815260040161139f929190613fc9565b60206040518083038186803b1580156113b757600080fd5b505afa1580156113cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113ef919061378d565b9050919050565b6113fe6126d5565b73ffffffffffffffffffffffffffffffffffffffff1661141c6115fa565b73ffffffffffffffffffffffffffffffffffffffff1614611472576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146990613eae565b60405180910390fd5b61147b81613117565b806114b25750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b6114f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114e890613d6e565b60405180910390fd5b80609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461156f5761156e612be0565b5b50565b61157a6126d5565b73ffffffffffffffffffffffffffffffffffffffff166115986115fa565b73ffffffffffffffffffffffffffffffffffffffff16146115ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e590613eae565b60405180910390fd5b6115f8600061313a565b565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b670d2f13f7789f000081565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156116a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169890613eee565b60405180910390fd5b6000609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015611765576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161175c90613dee565b60405180910390fd5b600083826117739190614123565b905080609760003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516118539190613fae565b60405180910390a360019250505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156118d8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118cf90613d0e565b60405180910390fd5b3073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161193e90613ece565b60405180910390fd5b61195033612803565b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156119d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119c990613d2e565b60405180910390fd5b81609860003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550611a2883612803565b81609860008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a779190614042565b925050819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611adb9190613fae565b60405180910390a36001905092915050565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd08331611b356111fc565b611b3d610904565b6040518363ffffffff1660e01b8152600401611b5a929190613ff2565b60206040518083038186803b158015611b7257600080fd5b505afa158015611b86573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611baa919061378d565b905090565b600073ffffffffffffffffffffffffffffffffffffffff16609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415611c41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3890613e4e565b60405180910390fd5b609b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630e7fc864336040518263ffffffff1660e01b8152600401611c9c9190613c18565b60206040518083038186803b158015611cb457600080fd5b505afa158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec9190613686565b611d2b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d2290613c8e565b60405180910390fd5b6000611d35610904565b1415611d76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d6d90613e2e565b60405180910390fd5b60026065541415611dbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611db390613f4e565b60405180910390fd5b600260658190555080471015611e07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dfe90613c4e565b60405180910390fd5b611e1033612f02565b80609960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611e5f9190614042565b9250508190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611eb59190614042565b92505081905550611ee5813373ffffffffffffffffffffffffffffffffffffffff166126dd90919063ffffffff16565b611eed612be0565b3373ffffffffffffffffffffffffffffffffffffffff167fd6b37be10b58108f696d9ed067fedad0bff7cb417ef4c28d2f8a25d6d83c98d58242604051611f35929190613ff2565b60405180910390a26001606581905550670d2f13f7789f0000611f56610904565b670de0b6b3a7640000611f676111fc565b611f7191906140c9565b611f7b9190614098565b1115611fbc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fb390613cee565b60405180910390fd5b50565b60026065541415612005576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ffc90613f4e565b60405180910390fd5b600260658190555061201633612803565b6120203334613200565b612028612be0565b3373ffffffffffffffffffffffffffffffffffffffff167f90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a153442604051612070929190613ff2565b60405180910390a26001606581905550565b6000609760008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b6121116126d5565b73ffffffffffffffffffffffffffffffffffffffff1661212f6115fa565b73ffffffffffffffffffffffffffffffffffffffff1614612185576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161217c90613eae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156121f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121ec90613cce565b60405180910390fd5b6121fe8161313a565b50565b6000609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec6122496111fc565b612251610904565b6040518363ffffffff1660e01b815260040161226e929190613ff2565b60206040518083038186803b15801561228657600080fd5b505afa15801561229a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122be919061378d565b905090565b600060019054906101000a900460ff166122eb5760008054906101000a900460ff16156122f4565b6122f3613386565b5b612333576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161232a90613e0e565b60405180910390fd5b60008060019054906101000a900460ff161590508015612383576001600060016101000a81548160ff02191690831515021790555060016000806101000a81548160ff0219169083151502179055505b61238c84613117565b6123cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123c290613d6e565b60405180910390fd5b83609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555084609a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555082609c60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081609d60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506124d7613397565b6124df6133f0565b6124e7612be0565b80156125085760008060016101000a81548160ff0219169083151502179055505b5050505050565b6125176126d5565b73ffffffffffffffffffffffffffffffffffffffff166125356115fa565b73ffffffffffffffffffffffffffffffffffffffff161461258b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161258290613eae565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156125fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125f290613f2e565b60405180910390fd5b61260481613117565b612643576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161263a90613d6e565b60405180910390fd5b80609b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508073ffffffffffffffffffffffffffffffffffffffff167f04dce7d074f7e287a2e6e3516c802271d58d5c14e0dede83a49719eb6b920469426040516126ca9190613fae565b60405180910390a250565b600033905090565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115612738577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561276a5781602001600182028036833780820191505090505b506040516127789190613c01565b60006040518083038185875af1925050503d80600081146127b5576040519150601f19603f3d011682016040523d82523d6000602084013e6127ba565b606091505b50509050806127fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127f590613d4e565b60405180910390fd5b505050565b600061280e82611301565b90506000609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548261285d9190614123565b90506128698382613200565b8273ffffffffffffffffffffffffffffffffffffffff167f9bbd517758fbae61197f1c1c04c8614064e89512dbaf4350dcdf76fcaa5e216182426040516128b1929190613ff2565b60405180910390a2609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336846040518263ffffffff1660e01b81526004016129149190613c18565b600060405180830381600087803b15801561292e57600080fd5b505af1158015612942573d6000803e3d6000fd5b50505050609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b81526004016129a19190613c18565b600060405180830381600087803b1580156129bb57600080fd5b505af11580156129cf573d6000803e3d6000fd5b50505050505050565b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612a5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5190613d8e565b60405180910390fd5b80609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015612adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ad390613dce565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051612bd49190613fae565b60405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff16609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612c72576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c6990613c6e565b60405180910390fd5b609c60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16637cd08331612cf66111fc565b612cfe610904565b6040518363ffffffff1660e01b8152600401612d1b929190613ff2565b60206040518083038186803b158015612d3357600080fd5b505afa158015612d47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d6b919061378d565b6040518263ffffffff1660e01b8152600401612d879190613fae565b600060405180830381600087803b158015612da157600080fd5b505af1158015612db5573d6000803e3d6000fd5b50505050609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166334fcf437609a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663df841eec612e3d6111fc565b612e45610904565b6040518363ffffffff1660e01b8152600401612e62929190613ff2565b60206040518083038186803b158015612e7a57600080fd5b505afa158015612e8e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eb2919061378d565b6040518263ffffffff1660e01b8152600401612ece9190613fae565b600060405180830381600087803b158015612ee857600080fd5b505af1158015612efc573d6000803e3d6000fd5b50505050565b6000612f0d8261120c565b90506000609960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482612f5c9190614123565b905081609960008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080609960003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254612ff19190614042565b92505081905550609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336846040518263ffffffff1660e01b81526004016130539190613c18565b600060405180830381600087803b15801561306d57600080fd5b505af1158015613081573d6000803e3d6000fd5b50505050609d60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ed03b336306040518263ffffffff1660e01b81526004016130e09190613c18565b600060405180830381600087803b1580156130fa57600080fd5b505af115801561310e573d6000803e3d6000fd5b50505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000603360009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905081603360006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415613270576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161326790613e8e565b60405180910390fd5b80609860008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546132bf9190614042565b9250508190555080609860003073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546133159190614042565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161337a9190613fae565b60405180910390a35050565b600061339130613117565b15905090565b600060019054906101000a900460ff166133e6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133dd90613f0e565b60405180910390fd5b6133ee613449565b565b600060019054906101000a900460ff1661343f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161343690613f0e565b60405180910390fd5b6134476134aa565b565b600060019054906101000a900460ff16613498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161348f90613f0e565b60405180910390fd5b6134a86134a36126d5565b61313a565b565b600060019054906101000a900460ff166134f9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016134f090613f0e565b60405180910390fd5b6001606581905550565b60008135905061351281614a49565b92915050565b60008151905061352781614a60565b92915050565b60008135905061353c81614a77565b92915050565b60008135905061355181614a8e565b92915050565b60008135905061356681614aa5565b92915050565b60008135905061357b81614abc565b92915050565b60008151905061359081614abc565b92915050565b6000602082840312156135a857600080fd5b60006135b684828501613503565b91505092915050565b600080604083850312156135d257600080fd5b60006135e085828601613503565b92505060206135f185828601613503565b9150509250929050565b60008060006060848603121561361057600080fd5b600061361e86828701613503565b935050602061362f86828701613503565b92505060406136408682870161356c565b9150509250925092565b6000806040838503121561365d57600080fd5b600061366b85828601613503565b925050602061367c8582860161356c565b9150509250929050565b60006020828403121561369857600080fd5b60006136a684828501613518565b91505092915050565b6000602082840312156136c157600080fd5b60006136cf84828501613542565b91505092915050565b6000602082840312156136ea57600080fd5b60006136f884828501613557565b91505092915050565b6000806000806080858703121561371757600080fd5b600061372587828801613557565b945050602061373687828801613542565b93505060406137478782880161352d565b92505060606137588782880161352d565b91505092959194509250565b60006020828403121561377657600080fd5b60006137848482850161356c565b91505092915050565b60006020828403121561379f57600080fd5b60006137ad84828501613581565b91505092915050565b600080604083850312156137c957600080fd5b60006137d78582860161356c565b92505060206137e885828601613503565b9150509250929050565b6137fb81614157565b82525050565b61380a81614169565b82525050565b600061381b8261401b565b6138258185614026565b93506138358185602086016141d5565b80840191505092915050565b600061384e603683614031565b915061385982614266565b604082019050919050565b6000613871604d83614031565b915061387c826142b5565b606082019050919050565b6000613894603d83614031565b915061389f8261432a565b604082019050919050565b60006138b7603883614031565b91506138c282614379565b604082019050919050565b60006138da602683614031565b91506138e5826143c8565b604082019050919050565b60006138fd602f83614031565b915061390882614417565b604082019050919050565b6000613920602a83614031565b915061392b82614466565b604082019050919050565b6000613943602683614031565b915061394e826144b5565b604082019050919050565b6000613966603483614031565b915061397182614504565b604082019050919050565b6000613989601283614031565b915061399482614553565b602082019050919050565b60006139ac602783614031565b91506139b78261457c565b604082019050919050565b60006139cf603583614031565b91506139da826145cb565b604082019050919050565b60006139f2603783614031565b91506139fd8261461a565b604082019050919050565b6000613a15603583614031565b9150613a2082614669565b604082019050919050565b6000613a38602e83614031565b9150613a43826146b8565b604082019050919050565b6000613a5b602083614031565b9150613a6682614707565b602082019050919050565b6000613a7e602483614031565b9150613a8982614730565b604082019050919050565b6000613aa1603683614031565b9150613aac8261477f565b604082019050919050565b6000613ac4602683614031565b9150613acf826147ce565b604082019050919050565b6000613ae7602083614031565b9150613af28261481d565b602082019050919050565b6000613b0a602a83614031565b9150613b1582614846565b604082019050919050565b6000613b2d602a83614031565b9150613b3882614895565b604082019050919050565b6000613b50602b83614031565b9150613b5b826148e4565b604082019050919050565b6000613b73603383614031565b9150613b7e82614933565b604082019050919050565b6000613b96601f83614031565b9150613ba182614982565b602082019050919050565b6000613bb9603183614031565b9150613bc4826149ab565b604082019050919050565b6000613bdc602f83614031565b9150613be7826149fa565b604082019050919050565b613bfb816141cb565b82525050565b6000613c0d8284613810565b915081905092915050565b6000602082019050613c2d60008301846137f2565b92915050565b6000602082019050613c486000830184613801565b92915050565b60006020820190508181036000830152613c6781613841565b9050919050565b60006020820190508181036000830152613c8781613864565b9050919050565b60006020820190508181036000830152613ca781613887565b9050919050565b60006020820190508181036000830152613cc7816138aa565b9050919050565b60006020820190508181036000830152613ce7816138cd565b9050919050565b60006020820190508181036000830152613d07816138f0565b9050919050565b60006020820190508181036000830152613d2781613913565b9050919050565b60006020820190508181036000830152613d4781613936565b9050919050565b60006020820190508181036000830152613d6781613959565b9050919050565b60006020820190508181036000830152613d878161397c565b9050919050565b60006020820190508181036000830152613da78161399f565b9050919050565b60006020820190508181036000830152613dc7816139c2565b9050919050565b60006020820190508181036000830152613de7816139e5565b9050919050565b60006020820190508181036000830152613e0781613a08565b9050919050565b60006020820190508181036000830152613e2781613a2b565b9050919050565b60006020820190508181036000830152613e4781613a4e565b9050919050565b60006020820190508181036000830152613e6781613a71565b9050919050565b60006020820190508181036000830152613e8781613a94565b9050919050565b60006020820190508181036000830152613ea781613ab7565b9050919050565b60006020820190508181036000830152613ec781613ada565b9050919050565b60006020820190508181036000830152613ee781613afd565b9050919050565b60006020820190508181036000830152613f0781613b20565b9050919050565b60006020820190508181036000830152613f2781613b43565b9050919050565b60006020820190508181036000830152613f4781613b66565b9050919050565b60006020820190508181036000830152613f6781613b89565b9050919050565b60006020820190508181036000830152613f8781613bac565b9050919050565b60006020820190508181036000830152613fa781613bcf565b9050919050565b6000602082019050613fc36000830184613bf2565b92915050565b6000604082019050613fde6000830185613bf2565b613feb60208301846137f2565b9392505050565b60006040820190506140076000830185613bf2565b6140146020830184613bf2565b9392505050565b600081519050919050565b600081905092915050565b600082825260208201905092915050565b600061404d826141cb565b9150614058836141cb565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561408d5761408c614208565b5b828201905092915050565b60006140a3826141cb565b91506140ae836141cb565b9250826140be576140bd614237565b5b828204905092915050565b60006140d4826141cb565b91506140df836141cb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561411857614117614208565b5b828202905092915050565b600061412e826141cb565b9150614139836141cb565b92508282101561414c5761414b614208565b5b828203905092915050565b6000614162826141ab565b9050919050565b60008115159050919050565b600061418082614157565b9050919050565b600061419282614157565b9050919050565b60006141a482614157565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60005b838110156141f35780820151818401526020810190506141d8565b83811115614202576000848401525b50505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f5468657265206973206e6f7420656e6f7567682066756e647320696e2074686560008201527f20706f6f6c20746f2066756e6420746865206c6f616e00000000000000000000602082015250565b7f506f6f6c2069732066726f7a656e3a2063616e6e6f7420706572666f726d206460008201527f65706f7369742c2077697468647261772c20626f72726f7720616e642072657060208201527f6179206f7065726174696f6e7300000000000000000000000000000000000000604082015250565b7f4f6e6c7920746865206163636f756e747320617574686f72697365642062792060008201527f626f72726f77657273207265676973747279206d617920626f72726f77000000602082015250565b7f596f752061726520747279696e6720746f207265706179206d6f72652074686160008201527f742077617320626f72726f776564206279206120757365720000000000000000602082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f54686520706f6f6c207574696c69736174696f6e2063616e6e6f74206265206760008201527f726561746572207468616e203935250000000000000000000000000000000000602082015250565b7f45524332303a2063616e6e6f74207472616e7366657220746f20746865207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f5472616e7366657248656c7065723a3a736166655472616e736665724554483a60008201527f20455448207472616e73666572206661696c6564000000000000000000000000602082015250565b7f4d757374206265206120636f6e74726163740000000000000000000000000000600082015250565b7f45524332303a206275726e20616d6f756e74206578636565647320757365722060008201527f62616c616e636500000000000000000000000000000000000000000000000000602082015250565b7f4e6f7420656e6f75676820746f6b656e7320616c6c6f77656420746f2074726160008201527f6e7366657220726571756972656420616d6f756e740000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e74206578636565647320637572726560008201527f6e7420706f6f6c20696e64657865642062616c616e6365000000000000000000602082015250565b7f43757272656e7420616c6c6f77616e636520697320736d616c6c65722074686160008201527f6e20746865207375627472616374656456616c75650000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f43616e6e6f7420626f72726f772066726f6d20616e20656d70747920706f6f6c600082015250565b7f426f72726f77657273207265676973747279206973206e6f7420636f6e66696760008201527f7572656400000000000000000000000000000000000000000000000000000000602082015250565b7f547279696e6720746f207265636f766572206d6f726520737572706c7573206660008201527f756e6473207468616e20706f6f6c2062616c616e636500000000000000000000602082015250565b7f45524332303a2063616e6e6f74206d696e7420746f20746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f45524332303a2063616e6e6f74207472616e7366657220746f2074686520706f60008201527f6f6c206164647265737300000000000000000000000000000000000000000000602082015250565b7f416c6c6f77616e6365207370656e6465722063616e6e6f742062652061207a6560008201527f726f206164647265737300000000000000000000000000000000000000000000602082015250565b7f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960008201527f6e697469616c697a696e67000000000000000000000000000000000000000000602082015250565b7f54686520626f72726f776572732072656769737472792063616e6e6f7420736560008201527f7420746f2061206e756c6c206164647265737300000000000000000000000000602082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f547279696e6720746f207265636f766572206d6f72652066756e64732074686160008201527f6e2063757272656e7420737572706c7573000000000000000000000000000000602082015250565b7f5468657265206973206e6f7420656e6f75676820617661696c61626c6520667560008201527f6e647320746f2077697468647261770000000000000000000000000000000000602082015250565b614a5281614157565b8114614a5d57600080fd5b50565b614a6981614169565b8114614a7457600080fd5b50565b614a8081614175565b8114614a8b57600080fd5b50565b614a9781614187565b8114614aa257600080fd5b50565b614aae81614199565b8114614ab957600080fd5b50565b614ac5816141cb565b8114614ad057600080fd5b5056fea2646970667358221220eddf9e7d706ef90d73fe0bd2b1d1d0ce7bcf46789f98a0adc3a4bff4a538d0cf64736f6c63430008040033a264697066735822122042c22d528f482847aa1dca8f7743cef0789c4ebc314843feebc9db228e6a0c6364736f6c63430008040033",
  "devdoc": {
    "details": "Contract factory allowing anyone to deploy a pool contract",
    "events": {
      "PoolDeployed(address)": {
        "details": "emitted after pool is deployed by any user",
        "params": {
          "poolAddress": "of deployed pool*"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "PoolFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}