{
  "address": "0x0D184ADF34065598311233A1d37765f76fbC5a72",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BREAKPOINT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "calculateBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "getPoolUtilisation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x670ed8531c3c4a317c50b397b98c147d952b6c228330ac0b02dfaf405a508e96",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x0D184ADF34065598311233A1d37765f76fbC5a72",
    "transactionIndex": 0,
    "gasUsed": "761980",
    "logsBloom": "0x
    "blockHash": "0x41aea851f7bf04564dcada0db1cafaa46953d575fbcf413dda0cf000a19fd46d",
    "transactionHash": "0x670ed8531c3c4a317c50b397b98c147d952b6c228330ac0b02dfaf405a508e96",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 11643699,
        "transactionHash": "0x670ed8531c3c4a317c50b397b98c147d952b6c228330ac0b02dfaf405a508e96",
        "address": "0x0D184ADF34065598311233A1d37765f76fbC5a72",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x41aea851f7bf04564dcada0db1cafaa46953d575fbcf413dda0cf000a19fd46d"
      }
    ],
    "blockNumber": 11643699,
    "cumulativeGasUsed": "761980",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "975af537ad9cf0868365ba6d0c5c961c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BREAKPOINT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"}],\"name\":\"calculateBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"}],\"name\":\"calculateDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"}],\"name\":\"getPoolUtilisation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract which calculates the interest rates based on pool utilisation. Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool. Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1 and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above which second piece is considered) and MAX_RATE (value at pool utilisation of 1).*\",\"kind\":\"dev\",\"methods\":{\"calculateBorrowingRate(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"calculateDepositRate(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"getPoolUtilisation(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"VariableUtilisationRatesCalculator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateBorrowingRate(uint256,uint256)\":{\"notice\":\"Returns the current borrowing rate The value is based on the pool utilisation according to the piecewise linear formula: 1) for pool utilisation lower than or equal to breakpoint: borrowing_rate = SLOPE_1 * utilisation + OFFSET 2) for pool utilisation greater than breakpoint: borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\"},\"calculateDepositRate(uint256,uint256)\":{\"notice\":\"Returns the current deposit rate The value is based on the current borrowing rate and satisfies the invariant: value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\"},\"getPoolUtilisation(uint256,uint256)\":{\"notice\":\"Returns the pool utilisation, which is a ratio between loans and deposits utilisation = value_of_loans / value_of_deposits\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VariableUtilisationRatesCalculator.sol\":\"VariableUtilisationRatesCalculator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VariableUtilisationRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\n\\n/**\\n * @title VariableUtilisationRatesCalculator\\n * @dev Contract which calculates the interest rates based on pool utilisation.\\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\\n **/\\ncontract VariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\\n  uint256 public constant SLOPE_1 = 0.12e18;\\n  uint256 public constant OFFSET = 0.05e18;\\n  // BREAKPOINT must be lower than 1e18\\n  uint256 public constant BREAKPOINT = 0.8e18;\\n  uint256 public constant MAX_RATE = 0.75e18;\\n\\n  // calculated off-chain for gas efficiency with following formula:\\n  // (MAX_RATE - OFFSET - SLOPE_1 * BREAKPOINT) / (1 - BREAKPOINT)\\n  uint256 public constant SLOPE_2 = 3.02e18;\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  /**\\n   * Returns the pool utilisation, which is a ratio between loans and deposits\\n   * utilisation = value_of_loans / value_of_deposits\\n   * @dev _totalLoans total value of loans\\n   * @dev _totalDeposits total value of deposits\\n   **/\\n  function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\\n    if (_totalDeposits == 0) return 0;\\n\\n    return (_totalLoans * 1e18) / _totalDeposits;\\n  }\\n\\n  /**\\n   * Returns the current deposit rate\\n   * The value is based on the current borrowing rate and satisfies the invariant:\\n   * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\\n   * @dev _totalLoans total value of loans\\n   * @dev _totalDeposits total value of deposits\\n   **/\\n  function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\\n    if (_totalDeposits == 0) return 0;\\n\\n    if (_totalLoans >= _totalDeposits) {\\n      return MAX_RATE;\\n    } else {\\n      return (this.calculateBorrowingRate(_totalLoans, _totalDeposits) * _totalLoans) / _totalDeposits;\\n    }\\n  }\\n\\n  /**\\n   * Returns the current borrowing rate\\n   * The value is based on the pool utilisation according to the piecewise linear formula:\\n   * 1) for pool utilisation lower than or equal to breakpoint:\\n   * borrowing_rate = SLOPE_1 * utilisation + OFFSET\\n   * 2) for pool utilisation greater than breakpoint:\\n   * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\\n   * @dev _totalLoans total value of loans\\n   * @dev _totalDeposits total value of deposits\\n   **/\\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view override returns (uint256) {\\n    if (totalDeposits == 0) return OFFSET;\\n\\n    uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\\n\\n    if (poolUtilisation >= 1e18) {\\n      return MAX_RATE;\\n    } else if (poolUtilisation <= BREAKPOINT) {\\n      return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET;\\n    } else {\\n      // full formula derived from piecewise linear function calculation except for SLOPE_2 subtraction (separated for\\n      // unsigned integer safety check)\\n      uint256 value = (poolUtilisation * SLOPE_2) / 1e18 + MAX_RATE;\\n\\n      require(value >= SLOPE_2, \\\"Out of range value when calculating the borrowing rate. Consider checking if SLOPE_2 is calculated correctly\\\");\\n\\n      return value - SLOPE_2;\\n    }\\n  }\\n}\",\"keccak256\":\"0xe89b2f9ade94d51024f106f7c2d9c273cc37d4c51712327069044611c6863ad0\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed using commit: ;\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n  function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x953a720aee8eb8e0861259d568fc0c123d3e72f81be777dc087166885b8cf05c\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003260201b60201c565b61003a60201b60201c565b6100fe565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610c608061010d6000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80639ceca965116100715780639ceca96514610142578063b64b087714610172578063c24dbebd14610190578063ce665dd8146101ae578063df841eec146101cc578063f2fde38b146101fc576100a9565b8063321105fb146100ae5780633bf42d4b146100cc578063715018a6146100ea5780637cd08331146100f45780638da5cb5b14610124575b600080fd5b6100b6610218565b6040516100c391906108e5565b60405180910390f35b6100d4610224565b6040516100e191906108e5565b60405180910390f35b6100f2610230565b005b61010e600480360381019061010991906107a7565b6102b8565b60405161011b91906108e5565b60405180910390f35b61012c61038c565b604051610139919061086a565b60405180910390f35b61015c600480360381019061015791906107a7565b6103b5565b60405161016991906108e5565b60405180910390f35b61017a6103f0565b60405161018791906108e5565b60405180910390f35b6101986103fc565b6040516101a591906108e5565b60405180910390f35b6101b6610408565b6040516101c391906108e5565b60405180910390f35b6101e660048036038101906101e191906107a7565b610413565b6040516101f391906108e5565b60405180910390f35b61021660048036038101906102119190610755565b610552565b005b6701aa535d3d0c000081565b6729e931ffd5ae000081565b61023861064a565b73ffffffffffffffffffffffffffffffffffffffff1661025661038c565b73ffffffffffffffffffffffffffffffffffffffff16146102ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a3906108c5565b60405180910390fd5b6102b66000610652565b565b6000808214156102cb5760009050610386565b8183106102e257670a688906bd8b00009050610386565b81833073ffffffffffffffffffffffffffffffffffffffff1663df841eec86866040518363ffffffff1660e01b815260040161031f929190610900565b60206040518083038186803b15801561033757600080fd5b505afa15801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f919061077e565b61037991906109c1565b6103839190610990565b90505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808214156103c857600090506103ea565b81670de0b6b3a7640000846103dd91906109c1565b6103e79190610990565b90505b92915050565b670b1a2bc2ec50000081565b670a688906bd8b000081565b66b1a2bc2ec5000081565b60008082141561042c5766b1a2bc2ec50000905061054c565b600061043884846103b5565b9050670de0b6b3a7640000811061045a57670a688906bd8b000091505061054c565b670b1a2bc2ec50000081116104aa5766b1a2bc2ec50000670de0b6b3a76400006701aa535d3d0c00008361048e91906109c1565b6104989190610990565b6104a2919061093a565b91505061054c565b6000670a688906bd8b0000670de0b6b3a76400006729e931ffd5ae0000846104d291906109c1565b6104dc9190610990565b6104e6919061093a565b90506729e931ffd5ae0000811015610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a90610885565b60405180910390fd5b6729e931ffd5ae0000816105479190610a1b565b925050505b92915050565b61055a61064a565b73ffffffffffffffffffffffffffffffffffffffff1661057861038c565b73ffffffffffffffffffffffffffffffffffffffff16146105ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c5906108c5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561063e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610635906108a5565b60405180910390fd5b61064781610652565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061072581610bfc565b92915050565b60008135905061073a81610c13565b92915050565b60008151905061074f81610c13565b92915050565b60006020828403121561076757600080fd5b600061077584828501610716565b91505092915050565b60006020828403121561079057600080fd5b600061079e84828501610740565b91505092915050565b600080604083850312156107ba57600080fd5b60006107c88582860161072b565b92505060206107d98582860161072b565b9150509250929050565b6107ec81610a4f565b82525050565b60006107ff606c83610929565b915061080a82610ae9565b608082019050919050565b6000610822602683610929565b915061082d82610b84565b604082019050919050565b6000610845602083610929565b915061085082610bd3565b602082019050919050565b61086481610a81565b82525050565b600060208201905061087f60008301846107e3565b92915050565b6000602082019050818103600083015261089e816107f2565b9050919050565b600060208201905081810360008301526108be81610815565b9050919050565b600060208201905081810360008301526108de81610838565b9050919050565b60006020820190506108fa600083018461085b565b92915050565b6000604082019050610915600083018561085b565b610922602083018461085b565b9392505050565b600082825260208201905092915050565b600061094582610a81565b915061095083610a81565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561098557610984610a8b565b5b828201905092915050565b600061099b82610a81565b91506109a683610a81565b9250826109b6576109b5610aba565b5b828204905092915050565b60006109cc82610a81565b91506109d783610a81565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a1057610a0f610a8b565b5b828202905092915050565b6000610a2682610a81565b9150610a3183610a81565b925082821015610a4457610a43610a8b565b5b828203905092915050565b6000610a5a82610a61565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f7574206f662072616e67652076616c7565207768656e2063616c63756c617460008201527f696e672074686520626f72726f77696e6720726174652e20436f6e736964657260208201527f20636865636b696e6720696620534c4f50455f322069732063616c63756c617460408201527f656420636f72726563746c790000000000000000000000000000000000000000606082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610c0581610a4f565b8114610c1057600080fd5b50565b610c1c81610a81565b8114610c2757600080fd5b5056fea26469706673582212206c4ef0518bba1931918838ff85fb0780708b80399fb2fb1f6a36f6c6c201d31264736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a95760003560e01c80639ceca965116100715780639ceca96514610142578063b64b087714610172578063c24dbebd14610190578063ce665dd8146101ae578063df841eec146101cc578063f2fde38b146101fc576100a9565b8063321105fb146100ae5780633bf42d4b146100cc578063715018a6146100ea5780637cd08331146100f45780638da5cb5b14610124575b600080fd5b6100b6610218565b6040516100c391906108e5565b60405180910390f35b6100d4610224565b6040516100e191906108e5565b60405180910390f35b6100f2610230565b005b61010e600480360381019061010991906107a7565b6102b8565b60405161011b91906108e5565b60405180910390f35b61012c61038c565b604051610139919061086a565b60405180910390f35b61015c600480360381019061015791906107a7565b6103b5565b60405161016991906108e5565b60405180910390f35b61017a6103f0565b60405161018791906108e5565b60405180910390f35b6101986103fc565b6040516101a591906108e5565b60405180910390f35b6101b6610408565b6040516101c391906108e5565b60405180910390f35b6101e660048036038101906101e191906107a7565b610413565b6040516101f391906108e5565b60405180910390f35b61021660048036038101906102119190610755565b610552565b005b6701aa535d3d0c000081565b6729e931ffd5ae000081565b61023861064a565b73ffffffffffffffffffffffffffffffffffffffff1661025661038c565b73ffffffffffffffffffffffffffffffffffffffff16146102ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102a3906108c5565b60405180910390fd5b6102b66000610652565b565b6000808214156102cb5760009050610386565b8183106102e257670a688906bd8b00009050610386565b81833073ffffffffffffffffffffffffffffffffffffffff1663df841eec86866040518363ffffffff1660e01b815260040161031f929190610900565b60206040518083038186803b15801561033757600080fd5b505afa15801561034b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036f919061077e565b61037991906109c1565b6103839190610990565b90505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808214156103c857600090506103ea565b81670de0b6b3a7640000846103dd91906109c1565b6103e79190610990565b90505b92915050565b670b1a2bc2ec50000081565b670a688906bd8b000081565b66b1a2bc2ec5000081565b60008082141561042c5766b1a2bc2ec50000905061054c565b600061043884846103b5565b9050670de0b6b3a7640000811061045a57670a688906bd8b000091505061054c565b670b1a2bc2ec50000081116104aa5766b1a2bc2ec50000670de0b6b3a76400006701aa535d3d0c00008361048e91906109c1565b6104989190610990565b6104a2919061093a565b91505061054c565b6000670a688906bd8b0000670de0b6b3a76400006729e931ffd5ae0000846104d291906109c1565b6104dc9190610990565b6104e6919061093a565b90506729e931ffd5ae0000811015610533576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052a90610885565b60405180910390fd5b6729e931ffd5ae0000816105479190610a1b565b925050505b92915050565b61055a61064a565b73ffffffffffffffffffffffffffffffffffffffff1661057861038c565b73ffffffffffffffffffffffffffffffffffffffff16146105ce576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c5906108c5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561063e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610635906108a5565b60405180910390fd5b61064781610652565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061072581610bfc565b92915050565b60008135905061073a81610c13565b92915050565b60008151905061074f81610c13565b92915050565b60006020828403121561076757600080fd5b600061077584828501610716565b91505092915050565b60006020828403121561079057600080fd5b600061079e84828501610740565b91505092915050565b600080604083850312156107ba57600080fd5b60006107c88582860161072b565b92505060206107d98582860161072b565b9150509250929050565b6107ec81610a4f565b82525050565b60006107ff606c83610929565b915061080a82610ae9565b608082019050919050565b6000610822602683610929565b915061082d82610b84565b604082019050919050565b6000610845602083610929565b915061085082610bd3565b602082019050919050565b61086481610a81565b82525050565b600060208201905061087f60008301846107e3565b92915050565b6000602082019050818103600083015261089e816107f2565b9050919050565b600060208201905081810360008301526108be81610815565b9050919050565b600060208201905081810360008301526108de81610838565b9050919050565b60006020820190506108fa600083018461085b565b92915050565b6000604082019050610915600083018561085b565b610922602083018461085b565b9392505050565b600082825260208201905092915050565b600061094582610a81565b915061095083610a81565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561098557610984610a8b565b5b828201905092915050565b600061099b82610a81565b91506109a683610a81565b9250826109b6576109b5610aba565b5b828204905092915050565b60006109cc82610a81565b91506109d783610a81565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610a1057610a0f610a8b565b5b828202905092915050565b6000610a2682610a81565b9150610a3183610a81565b925082821015610a4457610a43610a8b565b5b828203905092915050565b6000610a5a82610a61565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f7574206f662072616e67652076616c7565207768656e2063616c63756c617460008201527f696e672074686520626f72726f77696e6720726174652e20436f6e736964657260208201527f20636865636b696e6720696620534c4f50455f322069732063616c63756c617460408201527f656420636f72726563746c790000000000000000000000000000000000000000606082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610c0581610a4f565b8114610c1057600080fd5b50565b610c1c81610a81565b8114610c2757600080fd5b5056fea26469706673582212206c4ef0518bba1931918838ff85fb0780708b80399fb2fb1f6a36f6c6c201d31264736f6c63430008040033",
  "devdoc": {
    "details": "Contract which calculates the interest rates based on pool utilisation. Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool. Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1 and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above which second piece is considered) and MAX_RATE (value at pool utilisation of 1).*",
    "kind": "dev",
    "methods": {
      "calculateBorrowingRate(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "calculateDepositRate(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "getPoolUtilisation(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "VariableUtilisationRatesCalculator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateBorrowingRate(uint256,uint256)": {
        "notice": "Returns the current borrowing rate The value is based on the pool utilisation according to the piecewise linear formula: 1) for pool utilisation lower than or equal to breakpoint: borrowing_rate = SLOPE_1 * utilisation + OFFSET 2) for pool utilisation greater than breakpoint: borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2"
      },
      "calculateDepositRate(uint256,uint256)": {
        "notice": "Returns the current deposit rate The value is based on the current borrowing rate and satisfies the invariant: value_of_loans * borrowing_rate = value_of_deposits * deposit_rate"
      },
      "getPoolUtilisation(uint256,uint256)": {
        "notice": "Returns the pool utilisation, which is a ratio between loans and deposits utilisation = value_of_loans / value_of_deposits"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VariableUtilisationRatesCalculator.sol:VariableUtilisationRatesCalculator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}