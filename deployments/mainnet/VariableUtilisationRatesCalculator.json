{
  "address": "0x4353C7e82e554D539B9572AeBD34d9E73494C069",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BREAKPOINT_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "BREAKPOINT_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MAX_RATE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "OFFSET_3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_1",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_2",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "SLOPE_3",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "calculateBorrowingRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "calculateDepositRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositRateFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_totalLoans",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalDeposits",
          "type": "uint256"
        }
      ],
      "name": "getPoolUtilisation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "factor",
          "type": "uint256"
        }
      ],
      "name": "setDepositRateFactor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5b7e6da937bf9497782b6b154efd65c7f0b56ffca09913661a475d108e4426c2",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x4353C7e82e554D539B9572AeBD34d9E73494C069",
    "transactionIndex": 0,
    "gasUsed": "851014",
    "logsBloom": "0x00000010000000000000200000000000000000000000000000800000000000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000040000000000020000000000000000000800000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000020000000000000008000800000000000000000000000000000000000000000000000",
    "blockHash": "0xeb588e2eb42e4e528ea7636e99d42def95d140b02722d8aa6a7d72eff19d3435",
    "transactionHash": "0x5b7e6da937bf9497782b6b154efd65c7f0b56ffca09913661a475d108e4426c2",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 16100989,
        "transactionHash": "0x5b7e6da937bf9497782b6b154efd65c7f0b56ffca09913661a475d108e4426c2",
        "address": "0x4353C7e82e554D539B9572AeBD34d9E73494C069",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bac44698844f13cf0af423b19040659b688ef036"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xeb588e2eb42e4e528ea7636e99d42def95d140b02722d8aa6a7d72eff19d3435"
      }
    ],
    "blockNumber": 16100989,
    "cumulativeGasUsed": "851014",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 3,
  "solcInputHash": "e41fb9ccf40baa8118df8221ab408431",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BREAKPOINT_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"BREAKPOINT_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MAX_RATE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OFFSET_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_1\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_2\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SLOPE_3\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalDeposits\",\"type\":\"uint256\"}],\"name\":\"calculateBorrowingRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"}],\"name\":\"calculateDepositRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositRateFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_totalLoans\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalDeposits\",\"type\":\"uint256\"}],\"name\":\"getPoolUtilisation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"factor\",\"type\":\"uint256\"}],\"name\":\"setDepositRateFactor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract which calculates the interest rates based on pool utilisation. Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool. Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1 and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above which second piece is considered) and MAX_RATE (value at pool utilisation of 1).*\",\"kind\":\"dev\",\"methods\":{\"calculateBorrowingRate(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"calculateDepositRate(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"getPoolUtilisation(uint256,uint256)\":{\"details\":\"_totalLoans total value of loans_totalDeposits total value of deposits*\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDepositRateFactor(uint256)\":{\"details\":\"_newRate total value of loans*\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"VariableUtilisationRatesCalculator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateBorrowingRate(uint256,uint256)\":{\"notice\":\"Returns the current borrowing rate The value is based on the pool utilisation according to the piecewise linear formula: 1) for pool utilisation lower than or equal to breakpoint: borrowing_rate = SLOPE_1 * utilisation + OFFSET 2) for pool utilisation greater than breakpoint: borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\"},\"calculateDepositRate(uint256,uint256)\":{\"notice\":\"Returns the current deposit rate The value is based on the current borrowing rate and satisfies the invariant: value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\"},\"getPoolUtilisation(uint256,uint256)\":{\"notice\":\"Returns the pool utilisation, which is a ratio between loans and deposits utilisation = value_of_loans / value_of_deposits\"},\"setDepositRateFactor(uint256)\":{\"notice\":\"Sets deposit rate factor This factor is needed to account for arithmetic inaccuracy and keep pool balanced. Should be close to 1000\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/VariableUtilisationRatesCalculator.sol\":\"VariableUtilisationRatesCalculator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/VariableUtilisationRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: 48991ca286a107aedf142ae9fd21b421b08f5025;\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IRatesCalculator.sol\\\";\\n\\n/**\\n * @title VariableUtilisationRatesCalculator\\n * @dev Contract which calculates the interest rates based on pool utilisation.\\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\\n **/\\ncontract VariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\\n  uint256 public constant SLOPE_1 = 0;\\n  uint256 public constant OFFSET_1 = 0.03e18;\\n\\n  uint256 public constant BREAKPOINT_1 = 0.6e18;\\n\\n  uint256 public constant SLOPE_2 = 0.45e18;\\n  //negative, hence minus in calculations\\n  uint256 public constant OFFSET_2 = 0.24e18;\\n\\n  uint256 public constant BREAKPOINT_2 = 0.8e18;\\n\\n  uint256 public constant SLOPE_3 = 3.15e18;\\n  //negative, hence minus in calculations\\n  uint256 public constant OFFSET_3 = 2.4e18;\\n\\n  // BREAKPOINT must be lower than 1e18\\n  uint256 public constant MAX_RATE = 0.75e18;\\n\\n  //accuracy of 1000\\n  uint256 public depositRateFactor = 995;\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  /**\\n   * Returns the pool utilisation, which is a ratio between loans and deposits\\n   * utilisation = value_of_loans / value_of_deposits\\n   * @dev _totalLoans total value of loans\\n   * @dev _totalDeposits total value of deposits\\n   **/\\n  function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\\n    if (_totalDeposits == 0) return 0;\\n\\n    return (_totalLoans * 1e18) / _totalDeposits;\\n  }\\n\\n  /**\\n   * Returns the current deposit rate\\n   * The value is based on the current borrowing rate and satisfies the invariant:\\n   * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\\n   * @dev _totalLoans total value of loans\\n   * @dev _totalDeposits total value of deposits\\n   **/\\n  function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\\n    if (_totalDeposits == 0) return 0;\\n\\n    if (_totalLoans >= _totalDeposits) {\\n      return MAX_RATE * depositRateFactor / 1000;\\n    } else {\\n      uint256 rate = this.calculateBorrowingRate(_totalLoans, _totalDeposits) * depositRateFactor * _totalLoans / (_totalDeposits * 1000);\\n        return rate;\\n    }\\n  }\\n\\n  /**\\n   * Returns the current borrowing rate\\n   * The value is based on the pool utilisation according to the piecewise linear formula:\\n   * 1) for pool utilisation lower than or equal to breakpoint:\\n   * borrowing_rate = SLOPE_1 * utilisation + OFFSET\\n   * 2) for pool utilisation greater than breakpoint:\\n   * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\\n   * @dev _totalLoans total value of loans\\n   * @dev _totalDeposits total value of deposits\\n   **/\\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external pure override returns (uint256) {\\n    if (totalDeposits == 0) return OFFSET_1;\\n\\n    uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\\n\\n    if (poolUtilisation >= 1e18) {\\n      return MAX_RATE;\\n    } else if (poolUtilisation <= BREAKPOINT_1) {\\n      return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET_1;\\n    } else if (poolUtilisation <= BREAKPOINT_2) {\\n      return (poolUtilisation * SLOPE_2) / 1e18 - OFFSET_2;\\n    } else {\\n      // full formula derived from piecewise linear function calculation except for SLOPE_2 subtraction (separated for\\n      // unsigned integer safety check)\\n      return (poolUtilisation * SLOPE_3) / 1e18 - OFFSET_3;\\n    }\\n  }\\n\\n  /* ========== SETTERS ========== */\\n  /**\\n   * Sets deposit rate factor\\n   * This factor is needed to account for arithmetic inaccuracy and keep pool balanced. Should be close to 1000\\n   * @dev _newRate total value of loans\\n   **/\\n  function setDepositRateFactor(uint256 factor) external onlyOwner {\\n    depositRateFactor = factor;\\n  }\\n}\",\"keccak256\":\"0x24c07f8ccfb6f27fcafa074a010bb3cc5a46557677d27ce9eff75937fae3807d\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IRatesCalculator.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: ;\\npragma solidity ^0.8.4;\\n\\n/**\\n * @title IRatesCalculator\\n * @dev Interface defining base method for contracts implementing interest rates calculation.\\n * The calculated value could be based on the relation between funds borrowed and deposited.\\n */\\ninterface IRatesCalculator {\\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n\\n  function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x59a5851c6baab0436ce25c29fc185d87690400b0f1039788ecb63591226c4171\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040526103e360015534801561001657600080fd5b5061003361002861003860201b60201c565b61004060201b60201c565b610104565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b610d94806101136000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063bfe7cfd211610071578063bfe7cfd214610286578063c24dbebd146102a4578063df841eec146102c2578063e280703b146102f2578063f2fde38b146103105761010b565b8063715018a6146101fe5780637cd08331146102085780638da5cb5b146102385780639ceca965146102565761010b565b80633bf42d4b116100de5780633bf42d4b1461018657806356f21639146101a45780636e28a05d146101c257806370935a50146101e05761010b565b806301a5e5a01461011057806318c544b11461012e57806324fec9391461014c578063321105fb14610168575b600080fd5b61011861032c565b6040516101259190610ab4565b60405180910390f35b610136610338565b6040516101439190610ab4565b60405180910390f35b61016660048036038101906101619190610967565b610343565b005b6101706103c9565b60405161017d9190610ab4565b60405180910390f35b61018e6103ce565b60405161019b9190610ab4565b60405180910390f35b6101ac6103da565b6040516101b99190610ab4565b60405180910390f35b6101ca6103e6565b6040516101d79190610ab4565b60405180910390f35b6101e86103f2565b6040516101f59190610ab4565b60405180910390f35b6102066103fe565b005b610222600480360381019061021d91906109b9565b610486565b60405161022f9190610ab4565b60405180910390f35b610240610594565b60405161024d9190610a59565b60405180910390f35b610270600480360381019061026b91906109b9565b6105bd565b60405161027d9190610ab4565b60405180910390f35b61028e6105f8565b60405161029b9190610ab4565b60405180910390f35b6102ac610604565b6040516102b99190610ab4565b60405180910390f35b6102dc60048036038101906102d791906109b9565b610610565b6040516102e99190610ab4565b60405180910390f35b6102fa610735565b6040516103079190610ab4565b60405180910390f35b61032a6004803603810190610325919061093e565b61073b565b005b670853a0d2313c000081565b666a94d74f43000081565b61034b610833565b73ffffffffffffffffffffffffffffffffffffffff16610369610594565b73ffffffffffffffffffffffffffffffffffffffff16146103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b690610a94565b60405180910390fd5b8060018190555050565b600081565b67063eb89da4ed000081565b67214e8348c4f0000081565b670354a6ba7a18000081565b670b1a2bc2ec50000081565b610406610833565b73ffffffffffffffffffffffffffffffffffffffff16610424610594565b73ffffffffffffffffffffffffffffffffffffffff161461047a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047190610a94565b60405180910390fd5b610484600061083b565b565b600080821415610499576000905061058e565b8183106104ca576103e8600154670a688906bd8b00006104b99190610b90565b6104c39190610b5f565b905061058e565b60006103e8836104da9190610b90565b846001543073ffffffffffffffffffffffffffffffffffffffff1663df841eec88886040518363ffffffff1660e01b8152600401610519929190610acf565b60206040518083038186803b15801561053157600080fd5b505afa158015610545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105699190610990565b6105739190610b90565b61057d9190610b90565b6105879190610b5f565b9050809150505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808214156105d057600090506105f2565b81670de0b6b3a7640000846105e59190610b90565b6105ef9190610b5f565b90505b92915050565b672bb70c4f827b000081565b670a688906bd8b000081565b60008082141561062957666a94d74f430000905061072f565b600061063584846105bd565b9050670de0b6b3a7640000811061065757670a688906bd8b000091505061072f565b670853a0d2313c000081116106a057666a94d74f430000670de0b6b3a76400006000836106849190610b90565b61068e9190610b5f565b6106989190610b09565b91505061072f565b670b1a2bc2ec50000081116106f157670354a6ba7a180000670de0b6b3a764000067063eb89da4ed0000836106d59190610b90565b6106df9190610b5f565b6106e99190610bea565b91505061072f565b67214e8348c4f00000670de0b6b3a7640000672bb70c4f827b0000836107179190610b90565b6107219190610b5f565b61072b9190610bea565b9150505b92915050565b60015481565b610743610833565b73ffffffffffffffffffffffffffffffffffffffff16610761610594565b73ffffffffffffffffffffffffffffffffffffffff16146107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae90610a94565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081e90610a74565b60405180910390fd5b6108308161083b565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061090e81610d30565b92915050565b60008135905061092381610d47565b92915050565b60008151905061093881610d47565b92915050565b60006020828403121561095057600080fd5b600061095e848285016108ff565b91505092915050565b60006020828403121561097957600080fd5b600061098784828501610914565b91505092915050565b6000602082840312156109a257600080fd5b60006109b084828501610929565b91505092915050565b600080604083850312156109cc57600080fd5b60006109da85828601610914565b92505060206109eb85828601610914565b9150509250929050565b6109fe81610c1e565b82525050565b6000610a11602683610af8565b9150610a1c82610cb8565b604082019050919050565b6000610a34602083610af8565b9150610a3f82610d07565b602082019050919050565b610a5381610c50565b82525050565b6000602082019050610a6e60008301846109f5565b92915050565b60006020820190508181036000830152610a8d81610a04565b9050919050565b60006020820190508181036000830152610aad81610a27565b9050919050565b6000602082019050610ac96000830184610a4a565b92915050565b6000604082019050610ae46000830185610a4a565b610af16020830184610a4a565b9392505050565b600082825260208201905092915050565b6000610b1482610c50565b9150610b1f83610c50565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b5457610b53610c5a565b5b828201905092915050565b6000610b6a82610c50565b9150610b7583610c50565b925082610b8557610b84610c89565b5b828204905092915050565b6000610b9b82610c50565b9150610ba683610c50565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bdf57610bde610c5a565b5b828202905092915050565b6000610bf582610c50565b9150610c0083610c50565b925082821015610c1357610c12610c5a565b5b828203905092915050565b6000610c2982610c30565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610d3981610c1e565b8114610d4457600080fd5b50565b610d5081610c50565b8114610d5b57600080fd5b5056fea26469706673582212207cf5160fab963531dff04a564158a1e918161615e014f55120ee574367f6d81764736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c8063715018a6116100a2578063bfe7cfd211610071578063bfe7cfd214610286578063c24dbebd146102a4578063df841eec146102c2578063e280703b146102f2578063f2fde38b146103105761010b565b8063715018a6146101fe5780637cd08331146102085780638da5cb5b146102385780639ceca965146102565761010b565b80633bf42d4b116100de5780633bf42d4b1461018657806356f21639146101a45780636e28a05d146101c257806370935a50146101e05761010b565b806301a5e5a01461011057806318c544b11461012e57806324fec9391461014c578063321105fb14610168575b600080fd5b61011861032c565b6040516101259190610ab4565b60405180910390f35b610136610338565b6040516101439190610ab4565b60405180910390f35b61016660048036038101906101619190610967565b610343565b005b6101706103c9565b60405161017d9190610ab4565b60405180910390f35b61018e6103ce565b60405161019b9190610ab4565b60405180910390f35b6101ac6103da565b6040516101b99190610ab4565b60405180910390f35b6101ca6103e6565b6040516101d79190610ab4565b60405180910390f35b6101e86103f2565b6040516101f59190610ab4565b60405180910390f35b6102066103fe565b005b610222600480360381019061021d91906109b9565b610486565b60405161022f9190610ab4565b60405180910390f35b610240610594565b60405161024d9190610a59565b60405180910390f35b610270600480360381019061026b91906109b9565b6105bd565b60405161027d9190610ab4565b60405180910390f35b61028e6105f8565b60405161029b9190610ab4565b60405180910390f35b6102ac610604565b6040516102b99190610ab4565b60405180910390f35b6102dc60048036038101906102d791906109b9565b610610565b6040516102e99190610ab4565b60405180910390f35b6102fa610735565b6040516103079190610ab4565b60405180910390f35b61032a6004803603810190610325919061093e565b61073b565b005b670853a0d2313c000081565b666a94d74f43000081565b61034b610833565b73ffffffffffffffffffffffffffffffffffffffff16610369610594565b73ffffffffffffffffffffffffffffffffffffffff16146103bf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103b690610a94565b60405180910390fd5b8060018190555050565b600081565b67063eb89da4ed000081565b67214e8348c4f0000081565b670354a6ba7a18000081565b670b1a2bc2ec50000081565b610406610833565b73ffffffffffffffffffffffffffffffffffffffff16610424610594565b73ffffffffffffffffffffffffffffffffffffffff161461047a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047190610a94565b60405180910390fd5b610484600061083b565b565b600080821415610499576000905061058e565b8183106104ca576103e8600154670a688906bd8b00006104b99190610b90565b6104c39190610b5f565b905061058e565b60006103e8836104da9190610b90565b846001543073ffffffffffffffffffffffffffffffffffffffff1663df841eec88886040518363ffffffff1660e01b8152600401610519929190610acf565b60206040518083038186803b15801561053157600080fd5b505afa158015610545573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105699190610990565b6105739190610b90565b61057d9190610b90565b6105879190610b5f565b9050809150505b92915050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000808214156105d057600090506105f2565b81670de0b6b3a7640000846105e59190610b90565b6105ef9190610b5f565b90505b92915050565b672bb70c4f827b000081565b670a688906bd8b000081565b60008082141561062957666a94d74f430000905061072f565b600061063584846105bd565b9050670de0b6b3a7640000811061065757670a688906bd8b000091505061072f565b670853a0d2313c000081116106a057666a94d74f430000670de0b6b3a76400006000836106849190610b90565b61068e9190610b5f565b6106989190610b09565b91505061072f565b670b1a2bc2ec50000081116106f157670354a6ba7a180000670de0b6b3a764000067063eb89da4ed0000836106d59190610b90565b6106df9190610b5f565b6106e99190610bea565b91505061072f565b67214e8348c4f00000670de0b6b3a7640000672bb70c4f827b0000836107179190610b90565b6107219190610b5f565b61072b9190610bea565b9150505b92915050565b60015481565b610743610833565b73ffffffffffffffffffffffffffffffffffffffff16610761610594565b73ffffffffffffffffffffffffffffffffffffffff16146107b7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107ae90610a94565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081e90610a74565b60405180910390fd5b6108308161083b565b50565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008135905061090e81610d30565b92915050565b60008135905061092381610d47565b92915050565b60008151905061093881610d47565b92915050565b60006020828403121561095057600080fd5b600061095e848285016108ff565b91505092915050565b60006020828403121561097957600080fd5b600061098784828501610914565b91505092915050565b6000602082840312156109a257600080fd5b60006109b084828501610929565b91505092915050565b600080604083850312156109cc57600080fd5b60006109da85828601610914565b92505060206109eb85828601610914565b9150509250929050565b6109fe81610c1e565b82525050565b6000610a11602683610af8565b9150610a1c82610cb8565b604082019050919050565b6000610a34602083610af8565b9150610a3f82610d07565b602082019050919050565b610a5381610c50565b82525050565b6000602082019050610a6e60008301846109f5565b92915050565b60006020820190508181036000830152610a8d81610a04565b9050919050565b60006020820190508181036000830152610aad81610a27565b9050919050565b6000602082019050610ac96000830184610a4a565b92915050565b6000604082019050610ae46000830185610a4a565b610af16020830184610a4a565b9392505050565b600082825260208201905092915050565b6000610b1482610c50565b9150610b1f83610c50565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610b5457610b53610c5a565b5b828201905092915050565b6000610b6a82610c50565b9150610b7583610c50565b925082610b8557610b84610c89565b5b828204905092915050565b6000610b9b82610c50565b9150610ba683610c50565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610bdf57610bde610c5a565b5b828202905092915050565b6000610bf582610c50565b9150610c0083610c50565b925082821015610c1357610c12610c5a565b5b828203905092915050565b6000610c2982610c30565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b610d3981610c1e565b8114610d4457600080fd5b50565b610d5081610c50565b8114610d5b57600080fd5b5056fea26469706673582212207cf5160fab963531dff04a564158a1e918161615e014f55120ee574367f6d81764736f6c63430008040033",
  "devdoc": {
    "details": "Contract which calculates the interest rates based on pool utilisation. Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool. Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1 and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above which second piece is considered) and MAX_RATE (value at pool utilisation of 1).*",
    "kind": "dev",
    "methods": {
      "calculateBorrowingRate(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "calculateDepositRate(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "getPoolUtilisation(uint256,uint256)": {
        "details": "_totalLoans total value of loans_totalDeposits total value of deposits*"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDepositRateFactor(uint256)": {
        "details": "_newRate total value of loans*"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "VariableUtilisationRatesCalculator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateBorrowingRate(uint256,uint256)": {
        "notice": "Returns the current borrowing rate The value is based on the pool utilisation according to the piecewise linear formula: 1) for pool utilisation lower than or equal to breakpoint: borrowing_rate = SLOPE_1 * utilisation + OFFSET 2) for pool utilisation greater than breakpoint: borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2"
      },
      "calculateDepositRate(uint256,uint256)": {
        "notice": "Returns the current deposit rate The value is based on the current borrowing rate and satisfies the invariant: value_of_loans * borrowing_rate = value_of_deposits * deposit_rate"
      },
      "getPoolUtilisation(uint256,uint256)": {
        "notice": "Returns the pool utilisation, which is a ratio between loans and deposits utilisation = value_of_loans / value_of_deposits"
      },
      "setDepositRateFactor(uint256)": {
        "notice": "Sets deposit rate factor This factor is needed to account for arithmetic inaccuracy and keep pool balanced. Should be close to 1000"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/VariableUtilisationRatesCalculator.sol:VariableUtilisationRatesCalculator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 165,
        "contract": "contracts/VariableUtilisationRatesCalculator.sol:VariableUtilisationRatesCalculator",
        "label": "depositRateFactor",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}