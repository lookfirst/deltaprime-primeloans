{
  "language": "Solidity",
  "sources": {
    "contracts/VariableUtilisationRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IRatesCalculator.sol\";\n\n/**\n * @title VariableUtilisationRatesCalculator\n * @dev Contract which calculates the interest rates based on pool utilisation.\n * Utilisation is computed as the ratio between funds borrowed and funds deposited to the pool.\n * Borrowing rates are calculated using a piecewise linear function. The first piece is defined by SLOPE_1\n * and OFFSET (shift). Second piece is defined by SLOPE_2 (calculated off-chain), BREAKPOINT (threshold value above\n * which second piece is considered) and MAX_RATE (value at pool utilisation of 1).\n **/\ncontract VariableUtilisationRatesCalculator is IRatesCalculator, Ownable {\n  uint256 public constant SLOPE_1 = 0.12e18;\n  uint256 public constant OFFSET = 0.05e18;\n  // BREAKPOINT must be lower than 1e18\n  uint256 public constant BREAKPOINT = 0.8e18;\n  uint256 public constant MAX_RATE = 0.75e18;\n\n  // calculated off-chain for gas efficiency with following formula:\n  // (MAX_RATE - OFFSET - SLOPE_1 * BREAKPOINT) / (1 - BREAKPOINT)\n  uint256 public constant SLOPE_2 = 3.02e18;\n\n  /* ========== VIEW FUNCTIONS ========== */\n\n  /**\n   * Returns the pool utilisation, which is a ratio between loans and deposits\n   * utilisation = value_of_loans / value_of_deposits\n   * @dev _totalLoans total value of loans\n   * @dev _totalDeposits total value of deposits\n   **/\n  function getPoolUtilisation(uint256 _totalLoans, uint256 _totalDeposits) public pure returns (uint256) {\n    if (_totalDeposits == 0) return 0;\n\n    return (_totalLoans * 1e18) / _totalDeposits;\n  }\n\n  /**\n   * Returns the current deposit rate\n   * The value is based on the current borrowing rate and satisfies the invariant:\n   * value_of_loans * borrowing_rate = value_of_deposits * deposit_rate\n   * @dev _totalLoans total value of loans\n   * @dev _totalDeposits total value of deposits\n   **/\n  function calculateDepositRate(uint256 _totalLoans, uint256 _totalDeposits) external view override returns (uint256) {\n    if (_totalDeposits == 0) return 0;\n\n    if (_totalLoans >= _totalDeposits) {\n      return MAX_RATE;\n    } else {\n      return (this.calculateBorrowingRate(_totalLoans, _totalDeposits) * _totalLoans) / _totalDeposits;\n    }\n  }\n\n  /**\n   * Returns the current borrowing rate\n   * The value is based on the pool utilisation according to the piecewise linear formula:\n   * 1) for pool utilisation lower than or equal to breakpoint:\n   * borrowing_rate = SLOPE_1 * utilisation + OFFSET\n   * 2) for pool utilisation greater than breakpoint:\n   * borrowing_rate = SLOPE_2 * utilisation + MAX_RATE - SLOPE_2\n   * @dev _totalLoans total value of loans\n   * @dev _totalDeposits total value of deposits\n   **/\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view override returns (uint256) {\n    if (totalDeposits == 0) return OFFSET;\n\n    uint256 poolUtilisation = getPoolUtilisation(totalLoans, totalDeposits);\n\n    if (poolUtilisation >= 1e18) {\n      return MAX_RATE;\n    } else if (poolUtilisation <= BREAKPOINT) {\n      return (poolUtilisation * SLOPE_1) / 1e18 + OFFSET;\n    } else {\n      // full formula derived from piecewise linear function calculation except for SLOPE_2 subtraction (separated for\n      // unsigned integer safety check)\n      uint256 value = (poolUtilisation * SLOPE_2) / 1e18 + MAX_RATE;\n\n      require(value >= SLOPE_2, \"Out of range value when calculating the borrowing rate. Consider checking if SLOPE_2 is calculated correctly\");\n\n      return value - SLOPE_2;\n    }\n  }\n}"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "contracts/interfaces/IRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Last deployed using commit: ;\npragma solidity ^0.8.4;\n\n/**\n * @title IRatesCalculator\n * @dev Interface defining base method for contracts implementing interest rates calculation.\n * The calculated value could be based on the relation between funds borrowed and deposited.\n */\ninterface IRatesCalculator {\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\n\n  function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}