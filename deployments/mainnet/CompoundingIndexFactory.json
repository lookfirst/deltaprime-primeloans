{
  "address": "0x9C187688A14ba8EA67EA1D3e80Ca5aEE8c6cfE3D",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "indexAddress",
          "type": "address"
        }
      ],
      "name": "IndexDeployed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        }
      ],
      "name": "deployIndex",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x06c9e504723be63f49f7eff3b75ac9f9826a14ce8781c41c351890a23fe82608",
  "receipt": {
    "to": null,
    "from": "0xbAc44698844f13cF0AF423b19040659b688ef036",
    "contractAddress": "0x9C187688A14ba8EA67EA1D3e80Ca5aEE8c6cfE3D",
    "transactionIndex": 0,
    "gasUsed": "1147449",
    "logsBloom": "0x
    "blockHash": "0x47d0fdc54cb3ac3a087a04e6a5e346d2c7ab69558d510c116dd16ada2c2d296e",
    "transactionHash": "0x06c9e504723be63f49f7eff3b75ac9f9826a14ce8781c41c351890a23fe82608",
    "logs": [],
    "blockNumber": 11644666,
    "cumulativeGasUsed": "1147449",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a19b0e96024982d26743f2eb89d7d0dc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"indexAddress\",\"type\":\"address\"}],\"name\":\"IndexDeployed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"}],\"name\":\"deployIndex\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract factory allowing anyone to deploy a compounding index contract\",\"events\":{\"IndexDeployed(address)\":{\"details\":\"emitted after compounding index is deployed by any user\",\"params\":{\"indexAddress\":\"of deployed compounding index contract*\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"CompoundingIndexFactory\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/deployment/CompoundingIndexFactory.sol\":\"CompoundingIndexFactory\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/CompoundingIndex.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity ^0.8.4;\\n\\nimport \\\"./lib/WadRayMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * CompoundingIndex\\n * The contract contains logic for time-based index recalculation with minimal memory footprint.\\n * It could be used as a base building block for any index-based entities like deposits and loans.\\n * @dev updatedRate the value of updated rate\\n **/\\ncontract CompoundingIndex is Ownable {\\n  using WadRayMath for uint256;\\n\\n  uint256 private constant SECONDS_IN_YEAR = 365 days;\\n  uint256 private constant BASE_RATE = 1e18;\\n\\n  uint256 public start = block.timestamp;\\n\\n  uint256 public index = BASE_RATE;\\n  uint256 public indexUpdateTime = start;\\n\\n  mapping(uint256 => uint256) prevIndex;\\n  mapping(address => uint256) userUpdateTime;\\n\\n  uint256 public rate;\\n\\n  constructor(address owner_) {\\n    if (address(owner_) != address(0)) {\\n      transferOwnership(owner_);\\n    }\\n  }\\n\\n  /* ========== SETTERS ========== */\\n\\n  /**\\n   * Sets the new rate\\n   * Before the new rate is set, the index is updated accumulating interest\\n   * @dev updatedRate the value of updated rate\\n   **/\\n  function setRate(uint256 _rate) public onlyOwner {\\n    updateIndex();\\n    rate = _rate;\\n    emit RateUpdated(rate);\\n  }\\n\\n  /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n  /**\\n   * Updates user index\\n   * It persists the update time and the update index time->index mapping\\n   * @dev user address of the index owner\\n   **/\\n  function updateUser(address user) public onlyOwner {\\n    userUpdateTime[user] = block.timestamp;\\n    prevIndex[block.timestamp] = getIndex();\\n  }\\n\\n  /* ========== VIEW FUNCTIONS ========== */\\n\\n  /**\\n   * Gets current value of the compounding index\\n   * It recalculates the value on-demand without updating the storage\\n   **/\\n  function getIndex() public view returns (uint256) {\\n    uint256 period = block.timestamp - indexUpdateTime;\\n    if (period > 0) {\\n      return index.wadToRay().rayMul(getCompoundedFactor(period)).rayToWad();\\n    } else {\\n      return index;\\n    }\\n  }\\n\\n  /**\\n   * Gets the user value recalculated to the current index\\n   * It recalculates the value on-demand without updating the storage\\n   * Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude\\n   * of 1 Wei)\\n   **/\\n  function getIndexedValue(uint256 value, address user) public view returns (uint256) {\\n    uint256 userTime = userUpdateTime[user];\\n    uint256 prevUserIndex = userTime == 0 ? BASE_RATE : prevIndex[userTime];\\n\\n    return value.wadToRay().rayMul(getIndex().wadToRay()).rayDiv(prevUserIndex.wadToRay()).rayToWad();\\n  }\\n\\n  /* ========== INTERNAL FUNCTIONS ========== */\\n\\n  function updateIndex() internal {\\n    prevIndex[indexUpdateTime] = index;\\n\\n    index = getIndex();\\n    indexUpdateTime = block.timestamp;\\n  }\\n\\n  /**\\n   * Returns compounded factor in Ray\\n   **/\\n  function getCompoundedFactor(uint256 period) internal view returns (uint256) {\\n    return ((rate.wadToRay() / SECONDS_IN_YEAR) + WadRayMath.ray()).rayPow(period);\\n  }\\n\\n  /* ========== EVENTS ========== */\\n\\n  /**\\n   * @dev updatedRate the value of updated rate\\n   **/\\n  event RateUpdated(uint256 updatedRate);\\n}\\n\",\"keccak256\":\"0x4523ca643e5992023f6d8c33511b6444762ac77cadf9604b72e629ac69bfaabe\",\"license\":\"UNLICENSED\"},\"contracts/deployment/CompoundingIndexFactory.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\\npragma solidity ^0.8.4;\\n\\nimport \\\"../CompoundingIndex.sol\\\";\\n\\n\\n/**\\n * @title CompoundingIndexFactory\\n * @dev Contract factory allowing anyone to deploy a compounding index contract\\n */\\ncontract CompoundingIndexFactory {\\n  function deployIndex(address owner_) public {\\n    CompoundingIndex index = new CompoundingIndex(owner_);\\n    emit IndexDeployed(address(index));\\n  }\\n\\n  /**\\n   * @dev emitted after compounding index is deployed by any user\\n   * @param indexAddress of deployed compounding index contract\\n   **/\\n  event IndexDeployed(address indexAddress);\\n}\",\"keccak256\":\"0xf72b0305f38519c116ba11c439e59457895fc385c607b9441badf5996915bbc3\",\"license\":\"UNLICENSED\"},\"contracts/lib/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL3\\npragma solidity ^0.8.4;\\n\\n/******************\\n@title WadRayMath library\\n@author Aave\\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\\n@dev https://github.com/aave/aave-protocol/blob/master/contracts/libraries/WadRayMath.sol\\n */\\n\\nlibrary WadRayMath {\\n  uint256 internal constant WAD = 1e18;\\n  uint256 internal constant halfWAD = WAD / 2;\\n\\n  uint256 internal constant RAY = 1e27;\\n  uint256 internal constant halfRAY = RAY / 2;\\n\\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n  function ray() internal pure returns (uint256) {\\n    return RAY;\\n  }\\n\\n  function wad() internal pure returns (uint256) {\\n    return WAD;\\n  }\\n\\n  function halfRay() internal pure returns (uint256) {\\n    return halfRAY;\\n  }\\n\\n  function halfWad() internal pure returns (uint256) {\\n    return halfWAD;\\n  }\\n\\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    //return halfWAD.add(a.mul(b)).div(WAD);\\n    return (halfWAD + (a * b)) / WAD;\\n  }\\n\\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n\\n    //return halfB.add(a.mul(WAD)).div(b);\\n    return (halfB + (a * WAD)) / b;\\n  }\\n\\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n    //return halfRAY.add(a.mul(b)).div(RAY);\\n    return (halfRAY + (a * b)) / RAY;\\n  }\\n\\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    uint256 halfB = b / 2;\\n\\n    //return halfB.add(a.mul(RAY)).div(b);\\n    return (halfB + (a * RAY)) / b;\\n  }\\n\\n  function rayToWad(uint256 a) internal pure returns (uint256) {\\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\\n\\n    //return halfRatio.add(a).div(WAD_RAY_RATIO);\\n    return (halfRatio + a) / WAD_RAY_RATIO;\\n  }\\n\\n  function wadToRay(uint256 a) internal pure returns (uint256) {\\n    //return a.mul(WAD_RAY_RATIO);\\n    return a * WAD_RAY_RATIO;\\n  }\\n\\n  /**\\n   * @dev calculates base^exp. The code uses the ModExp precompile\\n   */\\n  //solium-disable-next-line\\n  function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\\n    z = n % 2 != 0 ? x : RAY;\\n\\n    for (n /= 2; n != 0; n /= 2) {\\n      x = rayMul(x, x);\\n\\n      if (n % 2 != 0) {\\n        z = rayMul(z, x);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xef7c4f4bff6fb6054160dad2dce84a7d46c92058f0842bd08ebede11be88b752\",\"license\":\"AGPL3\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Contract factory allowing anyone to deploy a compounding index contract",
    "events": {
      "IndexDeployed(address)": {
        "details": "emitted after compounding index is deployed by any user",
        "params": {
          "indexAddress": "of deployed compounding index contract*"
        }
      }
    },
    "kind": "dev",
    "methods": {},
    "title": "CompoundingIndexFactory",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}