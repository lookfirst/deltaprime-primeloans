{
  "language": "Solidity",
  "sources": {
    "contracts/LiquidationFlashloan.sol": {
      "content": "pragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./aave_v3/flashloan/base/FlashLoanReceiverBase.sol\";\nimport \"./facets/SmartLoanLiquidationFacet.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\n\ncontract LiquidationFlashloan is FlashLoanReceiverBase, OwnableUpgradeable {\n  using TransferHelper for address payable;\n  using TransferHelper for address;\n\n  IUniswapV2Router01 uniswapV2Router;\n  address wrappedNativeToken;\n\n  struct AssetAmount {\n    address asset;\n    uint256 amount;\n  }\n\n  struct LiqEnrichedParams {\n    address loan;\n    address liquidator;\n    address tokenManager;\n    uint256 bonus;\n  }\n\n  struct FlashLoanArgs {\n    address[] assets;\n    uint256[] amounts;\n    uint256[] interestRateModes;\n    bytes params;\n    uint256 bonus;\n    address liquidator;\n    address loanAddress;\n    address tokenManager;\n  }\n\n  constructor(\n    address _addressProvider,\n    address _uniswapV2Router,\n    address _wrappedNativeToken\n  ) FlashLoanReceiverBase(IPoolAddressesProvider(_addressProvider)) {\n    uniswapV2Router = IUniswapV2Router01(_uniswapV2Router);\n    wrappedNativeToken = _wrappedNativeToken;\n  }\n\n  // ---- Extract calldata arguments ----\n  function getAssets() internal view returns (address[] calldata result) {\n    assembly {\n      result.length := calldataload(add(calldataload(0x04), 0x04))\n      result.offset := add(calldataload(0x04), 0x24)\n    }\n    return result;\n  }\n\n  function getAmounts() internal view returns (uint256[] calldata result) {\n    assembly {\n      result.length := calldataload(add(calldataload(0x24), 0x04))\n      result.offset := add(calldataload(0x24), 0x24)\n    }\n    return result;\n  }\n\n  function getPremiums() internal view returns (uint256[] calldata result) {\n    assembly {\n      result.length := calldataload(add(calldataload(0x44), 0x04))\n      result.offset := add(calldataload(0x44), 0x24)\n    }\n    return result;\n  }\n  // --------------------------------------\n\n  /**\n   * @notice Executes an operation after receiving the flash-borrowed assets\n   * @dev Ensure that the contract can return the debt + premium, e.g., has\n   *      enough funds to repay and has approved the Pool to pull the total amount\n   * assets The addresses of the flash-borrowed assets\n   * amounts The amounts of the flash-borrowed assets\n   * premiums The fee of each flash-borrowed asset\n   * @param _initiator The address of the flashloan initiator\n   * @param _params The byte-encoded params passed when initiating the flashloan\n   * @return True if the execution of the operation succeeds, false otherwise\n   */\n  function executeOperation(\n    address[] calldata,\n    uint256[] calldata,\n    uint256[] calldata,\n    address _initiator,\n    bytes calldata _params\n  ) public override returns (bool) {\n    LiqEnrichedParams memory lep = getLiqEnrichedParams(_params);\n    address[] memory supportedTokens = TokenManager(lep.tokenManager).getSupportedTokensAddresses();\n\n    AssetAmount[] memory assetSurplus = new AssetAmount[](supportedTokens.length);\n    AssetAmount[] memory assetDeficit = new AssetAmount[](supportedTokens.length);\n\n    // Use calldata instead of memory in order to avoid the \"Stack Too deep\" CompileError\n    address[] calldata assets = getAssets();\n    uint256[] calldata amounts = getAmounts();\n    uint256[] calldata premiums = getPremiums();\n\n    for (uint32 i = 0; i < assets.length; i++) {\n      IERC20(assets[i]).approve(lep.loan, 0);\n      IERC20(assets[i]).approve(lep.loan, amounts[i]);\n    }\n\n    // Liquidate loan\n    {\n      (bool success,) = lep.loan.call(\n        abi.encodePacked(\n          abi.encodeWithSelector(\n            SmartLoanLiquidationFacet.liquidateLoan.selector,\n            TokenManager(lep.tokenManager).getAllPoolAssets(),\n            amounts,\n            lep.bonus\n          ),\n          _params\n        )\n      );\n      require(success, \"Liquidation failed\");\n    }\n\n    // Calculate surpluses & deficits\n    for (uint32 i = 0; i < supportedTokens.length; i++) {\n      int256 index = findIndex(supportedTokens[i], assets);\n      uint256 balance = IERC20Metadata(supportedTokens[i]).balanceOf(address(this));\n\n      if (index != - 1) {\n        int256 amount = int256(balance) - int256(amounts[uint256(index)]) - int256(premiums[uint256(index)]);\n        if (amount > 0) {\n          assetSurplus[i] = AssetAmount(supportedTokens[uint256(index)], uint256(amount));\n        } else if (amount < 0) {\n          assetDeficit[i] = AssetAmount(supportedTokens[uint256(index)], uint256(amount * - 1));\n        }\n      } else if (balance > 0){\n          assetSurplus[i] = AssetAmount(\n            supportedTokens[i],\n            balance\n          );\n      }\n    }\n\n    // Swap to negate deficits\n    for (uint32 i = 0; i < assetDeficit.length; i++) {\n      if (assetDeficit[i].amount != 0) {\n        for (uint32 j = 0; j < assetSurplus.length; j++) {\n          if (assetSurplus[j].amount != 0) {\n            if (swapToNegateDeficits(assetDeficit[i], assetSurplus[j])) {\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    // Send remaining tokens (bonus) to initiator\n    for (uint32 i = 0; i < assetSurplus.length; i++) {\n      if (assetSurplus[i].amount != 0) {\n        address(assetSurplus[i].asset).safeTransfer(\n          lep.liquidator,\n          assetSurplus[i].amount\n        );\n      }\n    }\n\n    // Approve AAVE POOL\n    for (uint32 i = 0; i < assets.length; i++) {\n      IERC20(assets[i]).approve(address(POOL), 0);\n      IERC20(assets[i]).approve(address(POOL), amounts[i] + premiums[i]);\n    }\n\n    return true;\n  }\n\n  function executeFlashloan(FlashLoanArgs calldata _args) public {\n    bytes memory enrichedParams = bytes.concat(abi.encodePacked(_args.loanAddress), abi.encodePacked(_args.liquidator), abi.encodePacked(_args.tokenManager), abi.encodePacked(_args.bonus), _args.params);\n\n    IPool(address(POOL)).flashLoan(\n      address(this),\n      _args.assets,\n      _args.amounts,\n      _args.interestRateModes,\n      address(this),\n      enrichedParams,\n      0\n    );\n  }\n\n  function getLiqEnrichedParams(bytes memory _enrichedParams) internal returns (LiqEnrichedParams memory) {\n    address _loan;\n    address _liquidator;\n    address _tokenManager;\n    uint256 _bonus;\n    assembly {\n    // Read 32 bytes from _enrichedParams ptr + 32 bytes offset, shift right 12 bytes\n      _loan := shr(mul(0x0c, 0x08), mload(add(_enrichedParams, 0x20)))\n    // Read 32 bytes from _enrichedParams ptr + 52 bytes offset, shift right 12 bytes\n      _liquidator := shr(mul(0x0c, 0x08), mload(add(_enrichedParams, 0x34)))\n    // Read 32 bytes from _enrichedParams ptr + 72 bytes offset, shift right 12 bytes\n      _tokenManager := shr(mul(0x0c, 0x08), mload(add(_enrichedParams, 0x48)))\n    // Read 32 bytes from _enrichedParams ptr + 92 bytes offset\n      _bonus := mload(add(_enrichedParams, 0x5c))\n    }\n    return LiqEnrichedParams({\n      loan : _loan,\n      liquidator : _liquidator,\n      tokenManager : _tokenManager,\n      bonus : _bonus\n    });\n  }\n\n  function swapToNegateDeficits(\n    AssetAmount memory _deficit,\n    AssetAmount memory _surplus\n  ) private returns (bool shouldBreak) {\n\n    uint256[] memory amounts;\n    uint256 soldTokenAmountNeeded = uniswapV2Router\n    .getAmountsIn(\n      _deficit.amount,\n      getPath(_surplus.asset, _deficit.asset)\n    )[0];\n\n    if (soldTokenAmountNeeded > _surplus.amount) {\n      address(_surplus.asset).safeApprove(address(uniswapV2Router), 0);\n      address(_surplus.asset).safeApprove(\n        address(uniswapV2Router),\n        _surplus.amount\n      );\n\n      amounts = uniswapV2Router.swapExactTokensForTokens(\n        _surplus.amount,\n        0,\n        getPath(_surplus.asset, _deficit.asset),\n        address(this),\n        block.timestamp\n      );\n      _deficit.amount = _deficit.amount - amounts[amounts.length - 1];\n      _surplus.amount = _surplus.amount - amounts[0];\n      return false;\n    } else {\n      address(_surplus.asset).safeApprove(address(uniswapV2Router), 0);\n      address(_surplus.asset).safeApprove(\n        address(uniswapV2Router),\n        soldTokenAmountNeeded\n      );\n\n      amounts = uniswapV2Router.swapTokensForExactTokens(\n        _deficit.amount,\n        soldTokenAmountNeeded,\n        getPath(_surplus.asset, _deficit.asset),\n        address(this),\n        block.timestamp\n      );\n      _deficit.amount = _deficit.amount - amounts[amounts.length - 1];\n      _surplus.amount = _surplus.amount - amounts[0];\n      return true;\n    }\n  }\n\n  //TODO: pretty inefficient, find better way\n  function findIndex(address addr, address[] memory array)\n  internal\n  view\n  returns (int256)\n  {\n    int256 index = - 1;\n    for (uint256 i; i < array.length; i++) {\n      if (array[i] == addr) {\n        index = int256(i);\n        break;\n      }\n    }\n\n    return index;\n  }\n\n  function getPath(address _token1, address _token2) internal virtual view returns (address[] memory) {\n    address[] memory path;\n\n    if (_token1 != wrappedNativeToken && _token2 != wrappedNativeToken) {\n      path = new address[](3);\n      path[0] = _token1;\n      path[1] = wrappedNativeToken;\n      path[2] = _token2;\n    } else {\n      path = new address[](2);\n      path[0] = _token1;\n      path[1] = _token2;\n    }\n\n    return path;\n  }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/aave_v3/flashloan/base/FlashLoanReceiverBase.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.4;\n\nimport {IFlashLoanReceiver} from \"../interfaces/IFlashLoanReceiver.sol\";\nimport {IPoolAddressesProvider} from \"../../interfaces/IPoolAddressesProvider.sol\";\nimport {IPool} from \"../../interfaces/IPool.sol\";\n\n/**\n * @title FlashLoanReceiverBase\n * @author Aave\n * @notice Base contract to develop a flashloan-receiver contract.\n */\nabstract contract FlashLoanReceiverBase is IFlashLoanReceiver {\n    IPoolAddressesProvider public immutable override ADDRESSES_PROVIDER;\n    IPool public immutable override POOL;\n\n    constructor(IPoolAddressesProvider provider) {\n        ADDRESSES_PROVIDER = provider;\n        POOL = IPool(provider.getPool());\n    }\n}\n"
    },
    "contracts/facets/SmartLoanLiquidationFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../ReentrancyGuardKeccak.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport \"../lib/SolvencyMethods.sol\";\nimport \"../Pool.sol\";\nimport \"../TokenManager.sol\";\n\n//This path is updated during deployment\nimport \"../lib/avalanche/DeploymentConstants.sol\";\n\nimport \"./SolvencyFacetProd.sol\";\n\ncontract SmartLoanLiquidationFacet is ReentrancyGuardKeccak, SolvencyMethods {\n    //IMPORTANT: KEEP IT IDENTICAL ACROSS FACETS TO BE PROPERLY UPDATED BY DEPLOYMENT SCRIPTS\n    uint256 private constant _MAX_HEALTH_AFTER_LIQUIDATION = 1.042e18;\n\n    //IMPORTANT: KEEP IT IDENTICAL ACROSS FACETS TO BE PROPERLY UPDATED BY DEPLOYMENT SCRIPTS\n    uint256 private constant _MAX_LIQUIDATION_BONUS = 100;\n\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    /** @param assetsToRepay names of tokens to be repaid to pools\n    /** @param amountsToRepay amounts of tokens to be repaid to pools\n      * @param liquidationBonus per mille bonus for liquidator. Must be smaller or equal to getMaxLiquidationBonus(). Defined for\n      * liquidating loans where debt ~ total value\n      * @param allowUnprofitableLiquidation allows performing liquidation of bankrupt loans (total value smaller than debt)\n    **/\n\n    struct LiquidationConfig {\n        bytes32[] assetsToRepay;\n        uint256[] amountsToRepay;\n        uint256 liquidationBonus;\n        bool allowUnprofitableLiquidation;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n      * Returns maximum acceptable health ratio after liquidation\n      **/\n    function getMaxHealthAfterLiquidation() public pure returns (uint256) {\n        return _MAX_HEALTH_AFTER_LIQUIDATION;\n    }\n\n    /**\n      * Returns maximum acceptable liquidation bonus (bonus is provided by a liquidator)\n      **/\n    function getMaxLiquidationBonus() public pure returns (uint256) {\n        return _MAX_LIQUIDATION_BONUS;\n    }\n\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\n\n    /**\n    * This function can be accessed by any user when Prime Account is insolvent or bankrupt and repay part of the loan\n    * with his approved tokens.\n    * BE CAREFUL: in contrast to liquidateLoan() method, this one doesn't necessarily return tokens to liquidator, nor give him\n    * a bonus. It's purpose is to bring the loan to a solvent position even if it's unprofitable for liquidator.\n    * @dev This function uses the redstone-evm-connector\n    * @param assetsToRepay bytes32[] names of tokens provided by liquidator for repayment\n    * @param amountsToRepay utin256[] amounts of tokens provided by liquidator for repayment\n    * @param _liquidationBonus per mille bonus for liquidator. Must be lower than or equal to getMaxLiquidationBonus()\n    **/\n    function unsafeLiquidateLoan(bytes32[] memory assetsToRepay, uint256[] memory amountsToRepay, uint256 _liquidationBonus) external payable nonReentrant {\n        liquidate(\n            LiquidationConfig({\n                assetsToRepay : assetsToRepay,\n                amountsToRepay : amountsToRepay,\n                liquidationBonus : _liquidationBonus,\n                allowUnprofitableLiquidation : true\n            })\n        );\n    }\n\n    /**\n    * This function can be accessed by any user when Prime Account is insolvent and liquidate part of the loan\n    * with his approved tokens.\n    * A liquidator has to approve adequate amount of tokens to repay debts to liquidity pools if\n    * there is not enough of them in a SmartLoan. For that he will receive the corresponding amount from SmartLoan\n    * with the same USD value + bonus.\n    * @dev This function uses the redstone-evm-connector\n    * @param assetsToRepay bytes32[] names of tokens provided by liquidator for repayment\n    * @param amountsToRepay utin256[] amounts of tokens provided by liquidator for repayment\n    * @param _liquidationBonus per mille bonus for liquidator. Must be lower than or equal to  getMaxLiquidationBonus()\n    **/\n    function liquidateLoan(bytes32[] memory assetsToRepay, uint256[] memory amountsToRepay, uint256 _liquidationBonus) external payable nonReentrant {\n        liquidate(\n            LiquidationConfig({\n                assetsToRepay : assetsToRepay,\n                amountsToRepay : amountsToRepay,\n                liquidationBonus : _liquidationBonus,\n                allowUnprofitableLiquidation : false\n            })\n        );\n    }\n\n    /**\n    * This function can be accessed when Prime Account is insolvent and perform a partial liquidation of the loan\n    * (selling assets, closing positions and repaying debts) to bring the account back to a solvent state. At the end\n    * of liquidation resulting solvency of account is checked to make sure that the account is between maximum and minimum\n    * solvency.\n    * To diminish the potential effect of manipulation of liquidity pools by a liquidator, there are no swaps performed\n    * during liquidation.\n    * @dev This function uses the redstone-evm-connector\n    * @param config configuration for liquidation\n    **/\n    function liquidate(LiquidationConfig memory config) internal {\n        SolvencyFacetProd.CachedPrices memory cachedPrices = _getAllPricesForLiquidation(config.assetsToRepay);\n        \n        uint256 initialTotal = _getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices); \n        uint256 initialDebt = _getDebtWithPrices(cachedPrices.debtAssetsPrices); \n\n        require(config.liquidationBonus <= getMaxLiquidationBonus(), \"Defined liquidation bonus higher than max. value\");\n        require(!_isSolventWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.debtAssetsPrices, cachedPrices.stakedPositionsPrices), \"Cannot sellout a solvent account\");\n        require(initialDebt < initialTotal || config.allowUnprofitableLiquidation, \"Trying to liquidate bankrupt loan\");\n\n        //healing means bringing a bankrupt loan to a state when debt is smaller than total value again\n        bool healingLoan = config.allowUnprofitableLiquidation && initialDebt > initialTotal;\n\n        uint256 suppliedInUSD;\n        uint256 repaidInUSD;\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        for (uint256 i = 0; i < config.assetsToRepay.length; i++) {\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(config.assetsToRepay[i], true));\n\n            uint256 balance = token.balanceOf(address(this));\n            uint256 needed;\n\n            if (healingLoan) {\n                needed = config.amountsToRepay[i];\n            } else if (config.amountsToRepay[i] > balance) {\n                needed = config.amountsToRepay[i] - balance;\n            }\n\n            if (needed > 0) {\n                require(needed <= token.allowance(msg.sender, address(this)), \"Not enough allowance for the token\");\n                require(needed <= token.balanceOf(msg.sender), \"Msg.sender supplied token balance is insufficient\");\n\n                address(token).safeTransferFrom(msg.sender, address(this), needed);\n                suppliedInUSD += needed * cachedPrices.assetsToRepayPrices[i].price * 10 ** 10 / 10 ** token.decimals();\n            }\n\n            Pool pool = Pool(tokenManager.getPoolAddress(config.assetsToRepay[i]));\n\n            uint256 repayAmount = Math.min(pool.getBorrowed(address(this)), config.amountsToRepay[i]);\n\n            address(token).safeApprove(address(pool), 0);\n            address(token).safeApprove(address(pool), repayAmount);\n\n            repaidInUSD += repayAmount * cachedPrices.assetsToRepayPrices[i].price * 10 ** 10 / 10 ** token.decimals();\n\n            pool.repay(repayAmount);\n\n            if (token.balanceOf(address(this)) == 0) {\n                DiamondStorageLib.removeOwnedAsset(config.assetsToRepay[i]);\n            }\n\n            emit LiquidationRepay(msg.sender, config.assetsToRepay[i], repayAmount, block.timestamp);\n        }\n\n        bytes32[] memory assetsOwned = DeploymentConstants.getAllOwnedAssets();\n        uint256 bonus;\n\n        //after healing bankrupt loan (debt > total value), no tokens are returned to liquidator\n\n        bonus = repaidInUSD * config.liquidationBonus / DeploymentConstants.getPercentagePrecision();\n\n        //meaning returning all tokens\n        uint256 partToReturn = 10 ** 18; // 1\n        uint256 assetsValue = _getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices);\n\n        if (!healingLoan && assetsValue >= suppliedInUSD + bonus) {\n            //in that scenario we calculate how big part of token to return\n            partToReturn = (suppliedInUSD + bonus) * 10 ** 18 / assetsValue;\n        }\n\n        // Native token transfer\n        if (address(this).balance > 0) {\n            payable(msg.sender).safeTransferETH(address(this).balance * partToReturn / 10 ** 18);\n        }\n\n        for (uint256 i; i < assetsOwned.length; i++) {\n            IERC20Metadata token = getERC20TokenInstance(assetsOwned[i], true);\n            uint256 balance = token.balanceOf(address(this));\n\n            address(token).safeTransfer(msg.sender, balance * partToReturn / 10 ** 18);\n            emit LiquidationTransfer(msg.sender, assetsOwned[i], balance * partToReturn / 10 ** 18, block.timestamp);\n        }\n\n        uint256 health = _getHealthRatioWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.debtAssetsPrices, cachedPrices.stakedPositionsPrices); // 2\n\n        if (msg.sender != DiamondStorageLib.smartLoanStorage().contractOwner && !healingLoan) {\n            require(health <= getMaxHealthAfterLiquidation(), \"This operation would result in a loan with health ratio higher than Maxium Health Ratio which would put loan's owner in a risk of an unnecessarily high loss\");\n        }\n\n        if (healingLoan) {\n            require(_getDebtWithPrices(cachedPrices.debtAssetsPrices) == 0, \"Healing a loan must end up with 0 debt\");\n            require(_getTotalValueWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.stakedPositionsPrices) == 0, \"Healing a loan must end up with 0 total value\");\n        }\n\n        require(_isSolventWithPrices(cachedPrices.ownedAssetsPrices, cachedPrices.debtAssetsPrices, cachedPrices.stakedPositionsPrices), \"This operation would not result in bringing the loan back to a solvent state\");\n\n        //TODO: include final debt and tv\n        emit Liquidated(msg.sender, healingLoan, initialTotal, initialDebt, repaidInUSD, bonus, health, block.timestamp);\n    }\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /**\n     * @dev emitted after a successful liquidation operation\n     * @param liquidator the address that initiated the liquidation operation\n     * @param healing was the liquidation covering the bad debt (unprofitable liquidation)\n     * @param initialTotal total value of assets before the liquidation\n     * @param initialDebt sum of all debts before the liquidation\n     * @param repayAmount requested amount (AVAX) of liquidation\n     * @param bonus an amount of bonus (AVAX) received by the liquidator\n     * @param health a new health ratio after the liquidation operation\n     * @param timestamp a time of the liquidation\n     **/\n    event Liquidated(address indexed liquidator, bool indexed healing, uint256 initialTotal, uint256 initialDebt, uint256 repayAmount, uint256 bonus, uint256 health, uint256 timestamp);\n\n    /**\n     * @dev emitted when funds are repaid to the pool during a liquidation\n     * @param liquidator the address initiating repayment\n     * @param asset asset repaid by a liquidator\n     * @param amount of repaid funds\n     * @param timestamp of the repayment\n     **/\n    event LiquidationRepay(address indexed liquidator, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    /**\n     * @dev emitted when funds are sent to liquidator during liquidation\n     * @param liquidator the address initiating repayment\n     * @param asset token sent to a liquidator\n     * @param amount of sent funds\n     * @param timestamp of the transfer\n     **/\n    event LiquidationTransfer(address indexed liquidator, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n}\n\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol": {
      "content": "pragma solidity >=0.6.2;\n\ninterface IUniswapV2Router01 {\n    function factory() external pure returns (address);\n    function WETH() external pure returns (address);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint amountADesired,\n        uint amountBDesired,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB, uint liquidity);\n    function addLiquidityETH(\n        address token,\n        uint amountTokenDesired,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external payable returns (uint amountToken, uint amountETH, uint liquidity);\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETH(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline\n    ) external returns (uint amountToken, uint amountETH);\n    function removeLiquidityWithPermit(\n        address tokenA,\n        address tokenB,\n        uint liquidity,\n        uint amountAMin,\n        uint amountBMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountA, uint amountB);\n    function removeLiquidityETHWithPermit(\n        address token,\n        uint liquidity,\n        uint amountTokenMin,\n        uint amountETHMin,\n        address to,\n        uint deadline,\n        bool approveMax, uint8 v, bytes32 r, bytes32 s\n    ) external returns (uint amountToken, uint amountETH);\n    function swapExactTokensForTokens(\n        uint amountIn,\n        uint amountOutMin,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapTokensForExactTokens(\n        uint amountOut,\n        uint amountInMax,\n        address[] calldata path,\n        address to,\n        uint deadline\n    ) external returns (uint[] memory amounts);\n    function swapExactETHForTokens(uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n    function swapTokensForExactETH(uint amountOut, uint amountInMax, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapExactTokensForETH(uint amountIn, uint amountOutMin, address[] calldata path, address to, uint deadline)\n        external\n        returns (uint[] memory amounts);\n    function swapETHForExactTokens(uint amountOut, address[] calldata path, address to, uint deadline)\n        external\n        payable\n        returns (uint[] memory amounts);\n\n    function quote(uint amountA, uint reserveA, uint reserveB) external pure returns (uint amountB);\n    function getAmountOut(uint amountIn, uint reserveIn, uint reserveOut) external pure returns (uint amountOut);\n    function getAmountIn(uint amountOut, uint reserveIn, uint reserveOut) external pure returns (uint amountIn);\n    function getAmountsOut(uint amountIn, address[] calldata path) external view returns (uint[] memory amounts);\n    function getAmountsIn(uint amountOut, address[] calldata path) external view returns (uint[] memory amounts);\n}\n"
    },
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/aave_v3/flashloan/interfaces/IFlashLoanReceiver.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.4;\n\nimport {IPoolAddressesProvider} from \"../../interfaces/IPoolAddressesProvider.sol\";\nimport {IPool} from \"../../interfaces/IPool.sol\";\n\n/**\n * @title IFlashLoanReceiver\n * @author Aave\n * @notice Defines the basic interface of a flashloan-receiver contract.\n * @dev Implement this interface to develop a flashloan-compatible flashLoanReceiver contract\n **/\ninterface IFlashLoanReceiver {\n    /**\n     * @notice Executes an operation after receiving the flash-borrowed assets\n     * @dev Ensure that the contract can return the debt + premium, e.g., has\n     *      enough funds to repay and has approved the Pool to pull the total amount\n     * @param assets The addresses of the flash-borrowed assets\n     * @param amounts The amounts of the flash-borrowed assets\n     * @param premiums The fee of each flash-borrowed asset\n     * @param initiator The address of the flashloan initiator\n     * @param params The byte-encoded params passed when initiating the flashloan\n     * @return True if the execution of the operation succeeds, false otherwise\n     */\n    function executeOperation(\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata premiums,\n        address initiator,\n        bytes calldata params\n    ) external returns (bool);\n\n    function ADDRESSES_PROVIDER()\n        external\n        view\n        returns (IPoolAddressesProvider);\n\n    function POOL() external view returns (IPool);\n}\n"
    },
    "contracts/aave_v3/interfaces/IPoolAddressesProvider.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.4;\n\n/**\n * @title IPoolAddressesProvider\n * @author Aave\n * @notice Defines the basic interface for a Pool Addresses Provider.\n **/\ninterface IPoolAddressesProvider {\n    /**\n     * @dev Emitted when the market identifier is updated.\n     * @param oldMarketId The old id of the market\n     * @param newMarketId The new id of the market\n     */\n    event MarketIdSet(string indexed oldMarketId, string indexed newMarketId);\n\n    /**\n     * @dev Emitted when the pool is updated.\n     * @param oldAddress The old address of the Pool\n     * @param newAddress The new address of the Pool\n     */\n    event PoolUpdated(address indexed oldAddress, address indexed newAddress);\n\n    /**\n     * @dev Emitted when the pool configurator is updated.\n     * @param oldAddress The old address of the PoolConfigurator\n     * @param newAddress The new address of the PoolConfigurator\n     */\n    event PoolConfiguratorUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the price oracle is updated.\n     * @param oldAddress The old address of the PriceOracle\n     * @param newAddress The new address of the PriceOracle\n     */\n    event PriceOracleUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the ACL manager is updated.\n     * @param oldAddress The old address of the ACLManager\n     * @param newAddress The new address of the ACLManager\n     */\n    event ACLManagerUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the ACL admin is updated.\n     * @param oldAddress The old address of the ACLAdmin\n     * @param newAddress The new address of the ACLAdmin\n     */\n    event ACLAdminUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the price oracle sentinel is updated.\n     * @param oldAddress The old address of the PriceOracleSentinel\n     * @param newAddress The new address of the PriceOracleSentinel\n     */\n    event PriceOracleSentinelUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the pool data provider is updated.\n     * @param oldAddress The old address of the PoolDataProvider\n     * @param newAddress The new address of the PoolDataProvider\n     */\n    event PoolDataProviderUpdated(\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when a new proxy is created.\n     * @param id The identifier of the proxy\n     * @param proxyAddress The address of the created proxy contract\n     * @param implementationAddress The address of the implementation contract\n     */\n    event ProxyCreated(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        address indexed implementationAddress\n    );\n\n    /**\n     * @dev Emitted when a new non-proxied contract address is registered.\n     * @param id The identifier of the contract\n     * @param oldAddress The address of the old contract\n     * @param newAddress The address of the new contract\n     */\n    event AddressSet(\n        bytes32 indexed id,\n        address indexed oldAddress,\n        address indexed newAddress\n    );\n\n    /**\n     * @dev Emitted when the implementation of the proxy registered with id is updated\n     * @param id The identifier of the contract\n     * @param proxyAddress The address of the proxy contract\n     * @param oldImplementationAddress The address of the old implementation contract\n     * @param newImplementationAddress The address of the new implementation contract\n     */\n    event AddressSetAsProxy(\n        bytes32 indexed id,\n        address indexed proxyAddress,\n        address oldImplementationAddress,\n        address indexed newImplementationAddress\n    );\n\n    /**\n     * @notice Returns the id of the Aave market to which this contract points to.\n     * @return The market id\n     **/\n    function getMarketId() external view returns (string memory);\n\n    /**\n     * @notice Associates an id with a specific PoolAddressesProvider.\n     * @dev This can be used to create an onchain registry of PoolAddressesProviders to\n     * identify and validate multiple Aave markets.\n     * @param newMarketId The market id\n     */\n    function setMarketId(string calldata newMarketId) external;\n\n    /**\n     * @notice Returns an address by its identifier.\n     * @dev The returned address might be an EOA or a contract, potentially proxied\n     * @dev It returns ZERO if there is no registered address with the given id\n     * @param id The id\n     * @return The address of the registered for the specified id\n     */\n    function getAddress(bytes32 id) external view returns (address);\n\n    /**\n     * @notice General function to update the implementation of a proxy registered with\n     * certain `id`. If there is no proxy registered, it will instantiate one and\n     * set as implementation the `newImplementationAddress`.\n     * @dev IMPORTANT Use this function carefully, only for ids that don't have an explicit\n     * setter function, in order to avoid unexpected consequences\n     * @param id The id\n     * @param newImplementationAddress The address of the new implementation\n     */\n    function setAddressAsProxy(bytes32 id, address newImplementationAddress)\n        external;\n\n    /**\n     * @notice Sets an address for an id replacing the address saved in the addresses map.\n     * @dev IMPORTANT Use this function carefully, as it will do a hard replacement\n     * @param id The id\n     * @param newAddress The address to set\n     */\n    function setAddress(bytes32 id, address newAddress) external;\n\n    /**\n     * @notice Returns the address of the Pool proxy.\n     * @return The Pool proxy address\n     **/\n    function getPool() external view returns (address);\n\n    /**\n     * @notice Updates the implementation of the Pool, or creates a proxy\n     * setting the new `pool` implementation when the function is called for the first time.\n     * @param newPoolImpl The new Pool implementation\n     **/\n    function setPoolImpl(address newPoolImpl) external;\n\n    /**\n     * @notice Returns the address of the PoolConfigurator proxy.\n     * @return The PoolConfigurator proxy address\n     **/\n    function getPoolConfigurator() external view returns (address);\n\n    /**\n     * @notice Updates the implementation of the PoolConfigurator, or creates a proxy\n     * setting the new `PoolConfigurator` implementation when the function is called for the first time.\n     * @param newPoolConfiguratorImpl The new PoolConfigurator implementation\n     **/\n    function setPoolConfiguratorImpl(address newPoolConfiguratorImpl) external;\n\n    /**\n     * @notice Returns the address of the price oracle.\n     * @return The address of the PriceOracle\n     */\n    function getPriceOracle() external view returns (address);\n\n    /**\n     * @notice Updates the address of the price oracle.\n     * @param newPriceOracle The address of the new PriceOracle\n     */\n    function setPriceOracle(address newPriceOracle) external;\n\n    /**\n     * @notice Returns the address of the ACL manager.\n     * @return The address of the ACLManager\n     */\n    function getACLManager() external view returns (address);\n\n    /**\n     * @notice Updates the address of the ACL manager.\n     * @param newAclManager The address of the new ACLManager\n     **/\n    function setACLManager(address newAclManager) external;\n\n    /**\n     * @notice Returns the address of the ACL admin.\n     * @return The address of the ACL admin\n     */\n    function getACLAdmin() external view returns (address);\n\n    /**\n     * @notice Updates the address of the ACL admin.\n     * @param newAclAdmin The address of the new ACL admin\n     */\n    function setACLAdmin(address newAclAdmin) external;\n\n    /**\n     * @notice Returns the address of the price oracle sentinel.\n     * @return The address of the PriceOracleSentinel\n     */\n    function getPriceOracleSentinel() external view returns (address);\n\n    /**\n     * @notice Updates the address of the price oracle sentinel.\n     * @param newPriceOracleSentinel The address of the new PriceOracleSentinel\n     **/\n    function setPriceOracleSentinel(address newPriceOracleSentinel) external;\n\n    /**\n     * @notice Returns the address of the data provider.\n     * @return The address of the DataProvider\n     */\n    function getPoolDataProvider() external view returns (address);\n\n    /**\n     * @notice Updates the address of the data provider.\n     * @param newDataProvider The address of the new DataProvider\n     **/\n    function setPoolDataProvider(address newDataProvider) external;\n}\n"
    },
    "contracts/aave_v3/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.8.4;\n\nimport {IPoolAddressesProvider} from \"./IPoolAddressesProvider.sol\";\nimport {DataTypes} from \"../protocol/libraries/types/DataTypes.sol\";\n\n/**\n * @title IPool\n * @author Aave\n * @notice Defines the basic interface for an Aave Pool.\n **/\ninterface IPool {\n    /**\n     * @dev Emitted on mintUnbacked()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the supply\n     * @param onBehalfOf The beneficiary of the supplied assets, receiving the aTokens\n     * @param amount The amount of supplied assets\n     * @param referralCode The referral code used\n     **/\n    event MintUnbacked(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on backUnbacked()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param backer The address paying for the backing\n     * @param amount The amount added as backing\n     * @param fee The amount paid in fees\n     **/\n    event BackUnbacked(\n        address indexed reserve,\n        address indexed backer,\n        uint256 amount,\n        uint256 fee\n    );\n\n    /**\n     * @dev Emitted on supply()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address initiating the supply\n     * @param onBehalfOf The beneficiary of the supply, receiving the aTokens\n     * @param amount The amount supplied\n     * @param referralCode The referral code used\n     **/\n    event Supply(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on withdraw()\n     * @param reserve The address of the underlying asset being withdrawn\n     * @param user The address initiating the withdrawal, owner of aTokens\n     * @param to The address that will receive the underlying\n     * @param amount The amount to be withdrawn\n     **/\n    event Withdraw(\n        address indexed reserve,\n        address indexed user,\n        address indexed to,\n        uint256 amount\n    );\n\n    /**\n     * @dev Emitted on borrow() and flashLoan() when debt needs to be opened\n     * @param reserve The address of the underlying asset being borrowed\n     * @param user The address of the user initiating the borrow(), receiving the funds on borrow() or just\n     * initiator of the transaction on flashLoan()\n     * @param onBehalfOf The address that will be getting the debt\n     * @param amount The amount borrowed out\n     * @param interestRateMode The rate mode: 1 for Stable, 2 for Variable\n     * @param borrowRate The numeric rate at which the user has borrowed, expressed in ray\n     * @param referralCode The referral code used\n     **/\n    event Borrow(\n        address indexed reserve,\n        address user,\n        address indexed onBehalfOf,\n        uint256 amount,\n        DataTypes.InterestRateMode interestRateMode,\n        uint256 borrowRate,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted on repay()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The beneficiary of the repayment, getting his debt reduced\n     * @param repayer The address of the user initiating the repay(), providing the funds\n     * @param amount The amount repaid\n     * @param useATokens True if the repayment is done using aTokens, `false` if done with underlying asset directly\n     **/\n    event Repay(\n        address indexed reserve,\n        address indexed user,\n        address indexed repayer,\n        uint256 amount,\n        bool useATokens\n    );\n\n    /**\n     * @dev Emitted on swapBorrowRateMode()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user swapping his rate mode\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n     **/\n    event SwapBorrowRateMode(\n        address indexed reserve,\n        address indexed user,\n        DataTypes.InterestRateMode interestRateMode\n    );\n\n    /**\n     * @dev Emitted on borrow(), repay() and liquidationCall() when using isolated assets\n     * @param asset The address of the underlying asset of the reserve\n     * @param totalDebt The total isolation mode debt for the reserve\n     */\n    event IsolationModeTotalDebtUpdated(\n        address indexed asset,\n        uint256 totalDebt\n    );\n\n    /**\n     * @dev Emitted when the user selects a certain asset category for eMode\n     * @param user The address of the user\n     * @param categoryId The category id\n     **/\n    event UserEModeSet(address indexed user, uint8 categoryId);\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralEnabled(\n        address indexed reserve,\n        address indexed user\n    );\n\n    /**\n     * @dev Emitted on setUserUseReserveAsCollateral()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user enabling the usage as collateral\n     **/\n    event ReserveUsedAsCollateralDisabled(\n        address indexed reserve,\n        address indexed user\n    );\n\n    /**\n     * @dev Emitted on rebalanceStableBorrowRate()\n     * @param reserve The address of the underlying asset of the reserve\n     * @param user The address of the user for which the rebalance has been executed\n     **/\n    event RebalanceStableBorrowRate(\n        address indexed reserve,\n        address indexed user\n    );\n\n    /**\n     * @dev Emitted on flashLoan()\n     * @param target The address of the flash loan receiver contract\n     * @param initiator The address initiating the flash loan\n     * @param asset The address of the asset being flash borrowed\n     * @param amount The amount flash borrowed\n     * @param interestRateMode The flashloan mode: 0 for regular flashloan, 1 for Stable debt, 2 for Variable debt\n     * @param premium The fee flash borrowed\n     * @param referralCode The referral code used\n     **/\n    event FlashLoan(\n        address indexed target,\n        address initiator,\n        address indexed asset,\n        uint256 amount,\n        DataTypes.InterestRateMode interestRateMode,\n        uint256 premium,\n        uint16 indexed referralCode\n    );\n\n    /**\n     * @dev Emitted when a borrower is liquidated.\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param liquidatedCollateralAmount The amount of collateral received by the liquidator\n     * @param liquidator The address of the liquidator\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    event LiquidationCall(\n        address indexed collateralAsset,\n        address indexed debtAsset,\n        address indexed user,\n        uint256 debtToCover,\n        uint256 liquidatedCollateralAmount,\n        address liquidator,\n        bool receiveAToken\n    );\n\n    /**\n     * @dev Emitted when the state of a reserve is updated.\n     * @param reserve The address of the underlying asset of the reserve\n     * @param liquidityRate The next liquidity rate\n     * @param stableBorrowRate The next stable borrow rate\n     * @param variableBorrowRate The next variable borrow rate\n     * @param liquidityIndex The next liquidity index\n     * @param variableBorrowIndex The next variable borrow index\n     **/\n    event ReserveDataUpdated(\n        address indexed reserve,\n        uint256 liquidityRate,\n        uint256 stableBorrowRate,\n        uint256 variableBorrowRate,\n        uint256 liquidityIndex,\n        uint256 variableBorrowIndex\n    );\n\n    /**\n     * @dev Emitted when the protocol treasury receives minted aTokens from the accrued interest.\n     * @param reserve The address of the reserve\n     * @param amountMinted The amount minted to the treasury\n     **/\n    event MintedToTreasury(address indexed reserve, uint256 amountMinted);\n\n    /**\n     * @dev Mints an `amount` of aTokens to the `onBehalfOf`\n     * @param asset The address of the underlying asset to mint\n     * @param amount The amount to mint\n     * @param onBehalfOf The address that will receive the aTokens\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function mintUnbacked(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @dev Back the current unbacked underlying with `amount` and pay `fee`.\n     * @param asset The address of the underlying asset to back\n     * @param amount The amount to back\n     * @param fee The amount paid in fees\n     **/\n    function backUnbacked(\n        address asset,\n        uint256 amount,\n        uint256 fee\n    ) external;\n\n    /**\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function supply(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Supply with transfer approval of asset to be supplied done via permit function\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param deadline The deadline timestamp that the permit is valid\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param permitV The V parameter of ERC712 permit sig\n     * @param permitR The R parameter of ERC712 permit sig\n     * @param permitS The S parameter of ERC712 permit sig\n     **/\n    function supplyWithPermit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode,\n        uint256 deadline,\n        uint8 permitV,\n        bytes32 permitR,\n        bytes32 permitS\n    ) external;\n\n    /**\n     * @notice Withdraws an `amount` of underlying asset from the reserve, burning the equivalent aTokens owned\n     * E.g. User has 100 aUSDC, calls withdraw() and receives 100 USDC, burning the 100 aUSDC\n     * @param asset The address of the underlying asset to withdraw\n     * @param amount The underlying amount to be withdrawn\n     *   - Send the value type(uint256).max in order to withdraw the whole aToken balance\n     * @param to The address that will receive the underlying, same as msg.sender if the user\n     *   wants to receive it on his own wallet, or a different address if the beneficiary is a\n     *   different wallet\n     * @return The final amount withdrawn\n     **/\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    /**\n     * @notice Allows users to borrow a specific `amount` of the reserve underlying asset, provided that the borrower\n     * already supplied enough collateral, or he was given enough allowance by a credit delegator on the\n     * corresponding debt token (StableDebtToken or VariableDebtToken)\n     * - E.g. User borrows 100 USDC passing as `onBehalfOf` his own address, receiving the 100 USDC in his wallet\n     *   and 100 stable/variable debt tokens, depending on the `interestRateMode`\n     * @param asset The address of the underlying asset to borrow\n     * @param amount The amount to be borrowed\n     * @param interestRateMode The interest rate mode at which the user wants to borrow: 1 for Stable, 2 for Variable\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     * @param onBehalfOf The address of the user who will receive the debt. Should be the address of the borrower itself\n     * calling the function if he wants to borrow against his own collateral, or the address of the credit delegator\n     * if he has been given credit delegation allowance\n     **/\n    function borrow(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        uint16 referralCode,\n        address onBehalfOf\n    ) external;\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve, burning the equivalent debt tokens owned\n     * - E.g. User repays 100 USDC, burning 100 variable/stable debt tokens of the `onBehalfOf` address\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf The address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @return The final amount repaid\n     **/\n    function repay(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        address onBehalfOf\n    ) external returns (uint256);\n\n    /**\n     * @notice Repay with transfer approval of asset to be repaid done via permit function\n     * see: https://eips.ethereum.org/EIPS/eip-2612 and https://eips.ethereum.org/EIPS/eip-713\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @param onBehalfOf Address of the user who will get his debt reduced/removed. Should be the address of the\n     * user calling the function if he wants to reduce/remove his own debt, or the address of any other\n     * other borrower whose debt should be removed\n     * @param deadline The deadline timestamp that the permit is valid\n     * @param permitV The V parameter of ERC712 permit sig\n     * @param permitR The R parameter of ERC712 permit sig\n     * @param permitS The S parameter of ERC712 permit sig\n     * @return The final amount repaid\n     **/\n    function repayWithPermit(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode,\n        address onBehalfOf,\n        uint256 deadline,\n        uint8 permitV,\n        bytes32 permitR,\n        bytes32 permitS\n    ) external returns (uint256);\n\n    /**\n     * @notice Repays a borrowed `amount` on a specific reserve using the reserve aTokens, burning the\n     * equivalent debt tokens\n     * - E.g. User repays 100 USDC using 100 aUSDC, burning 100 variable/stable debt tokens\n     * @dev  Passing uint256.max as amount will clean up any residual aToken dust balance, if the user aToken\n     * balance is not enough to cover the whole debt\n     * @param asset The address of the borrowed underlying asset previously borrowed\n     * @param amount The amount to repay\n     * - Send the value type(uint256).max in order to repay the whole debt for `asset` on the specific `debtMode`\n     * @param interestRateMode The interest rate mode at of the debt the user wants to repay: 1 for Stable, 2 for Variable\n     * @return The final amount repaid\n     **/\n    function repayWithATokens(\n        address asset,\n        uint256 amount,\n        uint256 interestRateMode\n    ) external returns (uint256);\n\n    /**\n     * @notice Allows a borrower to swap his debt between stable and variable mode, or vice versa\n     * @param asset The address of the underlying asset borrowed\n     * @param interestRateMode The current interest rate mode of the position being swapped: 1 for Stable, 2 for Variable\n     **/\n    function swapBorrowRateMode(address asset, uint256 interestRateMode)\n        external;\n\n    /**\n     * @notice Rebalances the stable interest rate of a user to the current stable rate defined on the reserve.\n     * - Users can be rebalanced if the following conditions are satisfied:\n     *     1. Usage ratio is above 95%\n     *     2. the current supply APY is below REBALANCE_UP_THRESHOLD * maxVariableBorrowRate, which means that too\n     *        much has been borrowed at a stable rate and suppliers are not earning enough\n     * @param asset The address of the underlying asset borrowed\n     * @param user The address of the user to be rebalanced\n     **/\n    function rebalanceStableBorrowRate(address asset, address user) external;\n\n    /**\n     * @notice Allows suppliers to enable/disable a specific supplied asset as collateral\n     * @param asset The address of the underlying asset supplied\n     * @param useAsCollateral True if the user wants to use the supply as collateral, false otherwise\n     **/\n    function setUserUseReserveAsCollateral(address asset, bool useAsCollateral)\n        external;\n\n    /**\n     * @notice Function to liquidate a non-healthy position collateral-wise, with Health Factor below 1\n     * - The caller (liquidator) covers `debtToCover` amount of debt of the user getting liquidated, and receives\n     *   a proportionally amount of the `collateralAsset` plus a bonus to cover market risk\n     * @param collateralAsset The address of the underlying asset used as collateral, to receive as result of the liquidation\n     * @param debtAsset The address of the underlying borrowed asset to be repaid with the liquidation\n     * @param user The address of the borrower getting liquidated\n     * @param debtToCover The debt amount of borrowed `asset` the liquidator wants to cover\n     * @param receiveAToken True if the liquidators wants to receive the collateral aTokens, `false` if he wants\n     * to receive the underlying collateral asset directly\n     **/\n    function liquidationCall(\n        address collateralAsset,\n        address debtAsset,\n        address user,\n        uint256 debtToCover,\n        bool receiveAToken\n    ) external;\n\n    /**\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n     * into consideration. For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanReceiver interface\n     * @param assets The addresses of the assets being flash-borrowed\n     * @param amounts The amounts of the assets being flash-borrowed\n     * @param interestRateModes Types of the debt to open if the flash loan is not returned:\n     *   0 -> Don't open any debt, just revert if funds can't be transferred from the receiver\n     *   1 -> Open debt at stable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     *   2 -> Open debt at variable rate for the value of the amount flash-borrowed to the `onBehalfOf` address\n     * @param onBehalfOf The address  that will receive the debt in the case of using on `modes` 1 or 2\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoan(\n        address receiverAddress,\n        address[] calldata assets,\n        uint256[] calldata amounts,\n        uint256[] calldata interestRateModes,\n        address onBehalfOf,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Allows smartcontracts to access the liquidity of the pool within one transaction,\n     * as long as the amount taken plus a fee is returned.\n     * @dev IMPORTANT There are security concerns for developers of flashloan receiver contracts that must be kept\n     * into consideration. For further details please visit https://developers.aave.com\n     * @param receiverAddress The address of the contract receiving the funds, implementing IFlashLoanSimpleReceiver interface\n     * @param asset The address of the asset being flash-borrowed\n     * @param amount The amount of the asset being flash-borrowed\n     * @param params Variadic packed params to pass to the receiver as extra information\n     * @param referralCode The code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function flashLoanSimple(\n        address receiverAddress,\n        address asset,\n        uint256 amount,\n        bytes calldata params,\n        uint16 referralCode\n    ) external;\n\n    /**\n     * @notice Returns the user account data across all the reserves\n     * @param user The address of the user\n     * @return totalCollateralBase The total collateral of the user in the base currency used by the price feed\n     * @return totalDebtBase The total debt of the user in the base currency used by the price feed\n     * @return availableBorrowsBase The borrowing power left of the user in the base currency used by the price feed\n     * @return currentLiquidationThreshold The liquidation threshold of the user\n     * @return ltv The loan to value of The user\n     * @return healthFactor The current health factor of the user\n     **/\n    function getUserAccountData(address user)\n        external\n        view\n        returns (\n            uint256 totalCollateralBase,\n            uint256 totalDebtBase,\n            uint256 availableBorrowsBase,\n            uint256 currentLiquidationThreshold,\n            uint256 ltv,\n            uint256 healthFactor\n        );\n\n    /**\n     * @notice Initializes a reserve, activating it, assigning an aToken and debt tokens and an\n     * interest rate strategy\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param aTokenAddress The address of the aToken that will be assigned to the reserve\n     * @param stableDebtAddress The address of the StableDebtToken that will be assigned to the reserve\n     * @param variableDebtAddress The address of the VariableDebtToken that will be assigned to the reserve\n     * @param interestRateStrategyAddress The address of the interest rate strategy contract\n     **/\n    function initReserve(\n        address asset,\n        address aTokenAddress,\n        address stableDebtAddress,\n        address variableDebtAddress,\n        address interestRateStrategyAddress\n    ) external;\n\n    /**\n     * @notice Drop a reserve\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     **/\n    function dropReserve(address asset) external;\n\n    /**\n     * @notice Updates the address of the interest rate strategy contract\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param rateStrategyAddress The address of the interest rate strategy contract\n     **/\n    function setReserveInterestRateStrategyAddress(\n        address asset,\n        address rateStrategyAddress\n    ) external;\n\n    /**\n     * @notice Sets the configuration bitmap of the reserve as a whole\n     * @dev Only callable by the PoolConfigurator contract\n     * @param asset The address of the underlying asset of the reserve\n     * @param configuration The new configuration bitmap\n     **/\n    function setConfiguration(\n        address asset,\n        DataTypes.ReserveConfigurationMap calldata configuration\n    ) external;\n\n    /**\n     * @notice Returns the configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The configuration of the reserve\n     **/\n    function getConfiguration(address asset)\n        external\n        view\n        returns (DataTypes.ReserveConfigurationMap memory);\n\n    /**\n     * @notice Returns the configuration of the user across all the reserves\n     * @param user The user address\n     * @return The configuration of the user\n     **/\n    function getUserConfiguration(address user)\n        external\n        view\n        returns (DataTypes.UserConfigurationMap memory);\n\n    /**\n     * @notice Returns the normalized income normalized income of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve's normalized income\n     */\n    function getReserveNormalizedIncome(address asset)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Returns the normalized variable debt per unit of asset\n     * @param asset The address of the underlying asset of the reserve\n     * @return The reserve normalized variable debt\n     */\n    function getReserveNormalizedVariableDebt(address asset)\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Returns the state and configuration of the reserve\n     * @param asset The address of the underlying asset of the reserve\n     * @return The state and configuration data of the reserve\n     **/\n    function getReserveData(address asset)\n        external\n        view\n        returns (DataTypes.ReserveData memory);\n\n    /**\n     * @notice Validates and finalizes an aToken transfer\n     * @dev Only callable by the overlying aToken of the `asset`\n     * @param asset The address of the underlying asset of the aToken\n     * @param from The user from which the aTokens are transferred\n     * @param to The user receiving the aTokens\n     * @param amount The amount being transferred/withdrawn\n     * @param balanceFromBefore The aToken balance of the `from` user before the transfer\n     * @param balanceToBefore The aToken balance of the `to` user before the transfer\n     */\n    function finalizeTransfer(\n        address asset,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 balanceFromBefore,\n        uint256 balanceToBefore\n    ) external;\n\n    /**\n     * @notice Returns the list of the underlying assets of all the initialized reserves\n     * @dev It does not include dropped reserves\n     * @return The addresses of the underlying assets of the initialized reserves\n     **/\n    function getReservesList() external view returns (address[] memory);\n\n    /**\n     * @notice Returns the address of the underlying asset of a reserve by the reserve id as stored in the DataTypes.ReserveData struct\n     * @param id The id of the reserve as stored in the DataTypes.ReserveData struct\n     * @return The address of the reserve associated with id\n     **/\n    function getReserveAddressById(uint16 id) external view returns (address);\n\n    /**\n     * @notice Returns the PoolAddressesProvider connected to this contract\n     * @return The address of the PoolAddressesProvider\n     **/\n    function ADDRESSES_PROVIDER()\n        external\n        view\n        returns (IPoolAddressesProvider);\n\n    /**\n     * @notice Updates the protocol fee on the bridging\n     * @param bridgeProtocolFee The part of the premium sent to the protocol treasury\n     */\n    function updateBridgeProtocolFee(uint256 bridgeProtocolFee) external;\n\n    /**\n     * @notice Updates flash loan premiums. Flash loan premium consists of two parts:\n     * - A part is sent to aToken holders as extra, one time accumulated interest\n     * - A part is collected by the protocol treasury\n     * @dev The total premium is calculated on the total borrowed amount\n     * @dev The premium to protocol is calculated on the total premium, being a percentage of `flashLoanPremiumTotal`\n     * @dev Only callable by the PoolConfigurator contract\n     * @param flashLoanPremiumTotal The total premium, expressed in bps\n     * @param flashLoanPremiumToProtocol The part of the premium sent to the protocol treasury, expressed in bps\n     */\n    function updateFlashloanPremiums(\n        uint128 flashLoanPremiumTotal,\n        uint128 flashLoanPremiumToProtocol\n    ) external;\n\n    /**\n     * @notice Configures a new category for the eMode.\n     * @dev In eMode, the protocol allows very high borrowing power to borrow assets of the same category.\n     * The category 0 is reserved as it's the default for volatile assets\n     * @param id The id of the category\n     * @param config The configuration of the category\n     */\n    function configureEModeCategory(\n        uint8 id,\n        DataTypes.EModeCategory memory config\n    ) external;\n\n    /**\n     * @notice Returns the data of an eMode category\n     * @param id The id of the category\n     * @return The configuration data of the category\n     */\n    function getEModeCategoryData(uint8 id)\n        external\n        view\n        returns (DataTypes.EModeCategory memory);\n\n    /**\n     * @notice Allows a user to use the protocol in eMode\n     * @param categoryId The id of the category\n     */\n    function setUserEMode(uint8 categoryId) external;\n\n    /**\n     * @notice Returns the eMode the user is using\n     * @param user The address of the user\n     * @return The eMode id\n     */\n    function getUserEMode(address user) external view returns (uint256);\n\n    /**\n     * @notice Resets the isolation mode total debt of the given asset to zero\n     * @dev It requires the given asset has zero debt ceiling\n     * @param asset The address of the underlying asset to reset the isolationModeTotalDebt\n     */\n    function resetIsolationModeTotalDebt(address asset) external;\n\n    /**\n     * @notice Returns the percentage of available liquidity that can be borrowed at once at stable rate\n     * @return The percentage of available liquidity to borrow, expressed in bps\n     */\n    function MAX_STABLE_RATE_BORROW_SIZE_PERCENT()\n        external\n        view\n        returns (uint256);\n\n    /**\n     * @notice Returns the total fee on flash loans\n     * @return The total fee on flashloans\n     */\n    function FLASHLOAN_PREMIUM_TOTAL() external view returns (uint128);\n\n    /**\n     * @notice Returns the part of the bridge fees sent to protocol\n     * @return The bridge fee sent to the protocol treasury\n     */\n    function BRIDGE_PROTOCOL_FEE() external view returns (uint256);\n\n    /**\n     * @notice Returns the part of the flashloan fees sent to protocol\n     * @return The flashloan fee sent to the protocol treasury\n     */\n    function FLASHLOAN_PREMIUM_TO_PROTOCOL() external view returns (uint128);\n\n    /**\n     * @notice Returns the maximum number of reserves supported to be listed in this Pool\n     * @return The maximum number of reserves supported\n     */\n    function MAX_NUMBER_RESERVES() external view returns (uint16);\n\n    /**\n     * @notice Mints the assets accrued through the reserve factor to the treasury in the form of aTokens\n     * @param assets The list of reserves for which the minting needs to be executed\n     **/\n    function mintToTreasury(address[] calldata assets) external;\n\n    /**\n     * @notice Rescue and transfer tokens locked in this contract\n     * @param token The address of the token\n     * @param to The address of the recipient\n     * @param amount The amount of token to transfer\n     */\n    function rescueTokens(\n        address token,\n        address to,\n        uint256 amount\n    ) external;\n\n    /**\n     * @notice Supplies an `amount` of underlying asset into the reserve, receiving in return overlying aTokens.\n     * - E.g. User supplies 100 USDC and gets in return 100 aUSDC\n     * @dev Deprecated: Use the `supply` function instead\n     * @param asset The address of the underlying asset to supply\n     * @param amount The amount to be supplied\n     * @param onBehalfOf The address that will receive the aTokens, same as msg.sender if the user\n     *   wants to receive them on his own wallet, or a different address if the beneficiary of aTokens\n     *   is a different wallet\n     * @param referralCode Code used to register the integrator originating the operation, for potential rewards.\n     *   0 if the action is executed directly by the user, without any middle-man\n     **/\n    function deposit(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n}\n"
    },
    "contracts/aave_v3/protocol/libraries/types/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.4;\n\nlibrary DataTypes {\n    struct ReserveData {\n        //stores the reserve configuration\n        ReserveConfigurationMap configuration;\n        //the liquidity index. Expressed in ray\n        uint128 liquidityIndex;\n        //the current supply rate. Expressed in ray\n        uint128 currentLiquidityRate;\n        //variable borrow index. Expressed in ray\n        uint128 variableBorrowIndex;\n        //the current variable borrow rate. Expressed in ray\n        uint128 currentVariableBorrowRate;\n        //the current stable borrow rate. Expressed in ray\n        uint128 currentStableBorrowRate;\n        //timestamp of last update\n        uint40 lastUpdateTimestamp;\n        //the id of the reserve. Represents the position in the list of the active reserves\n        uint16 id;\n        //aToken address\n        address aTokenAddress;\n        //stableDebtToken address\n        address stableDebtTokenAddress;\n        //variableDebtToken address\n        address variableDebtTokenAddress;\n        //address of the interest rate strategy\n        address interestRateStrategyAddress;\n        //the current treasury balance, scaled\n        uint128 accruedToTreasury;\n        //the outstanding unbacked aTokens minted through the bridging feature\n        uint128 unbacked;\n        //the outstanding debt borrowed against this asset in isolation mode\n        uint128 isolationModeTotalDebt;\n    }\n\n    struct ReserveConfigurationMap {\n        //bit 0-15: LTV\n        //bit 16-31: Liq. threshold\n        //bit 32-47: Liq. bonus\n        //bit 48-55: Decimals\n        //bit 56: reserve is active\n        //bit 57: reserve is frozen\n        //bit 58: borrowing is enabled\n        //bit 59: stable rate borrowing enabled\n        //bit 60: asset is paused\n        //bit 61: borrowing in isolation mode is enabled\n        //bit 62-63: reserved\n        //bit 64-79: reserve factor\n        //bit 80-115 borrow cap in whole tokens, borrowCap == 0 => no cap\n        //bit 116-151 supply cap in whole tokens, supplyCap == 0 => no cap\n        //bit 152-167 liquidation protocol fee\n        //bit 168-175 eMode category\n        //bit 176-211 unbacked mint cap in whole tokens, unbackedMintCap == 0 => minting disabled\n        //bit 212-251 debt ceiling for isolation mode with (ReserveConfiguration::DEBT_CEILING_DECIMALS) decimals\n        //bit 252-255 unused\n\n        uint256 data;\n    }\n\n    struct UserConfigurationMap {\n        /**\n         * @dev Bitmap of the users collaterals and borrows. It is divided in pairs of bits, one pair per asset.\n         * The first bit indicates if an asset is used as collateral by the user, the second whether an\n         * asset is borrowed by the user.\n         */\n        uint256 data;\n    }\n\n    struct EModeCategory {\n        // each eMode category has a custom ltv and liquidation threshold\n        uint16 ltv;\n        uint16 liquidationThreshold;\n        uint16 liquidationBonus;\n        // each eMode category may or may not have a custom oracle to override the individual assets price oracles\n        address priceSource;\n        string label;\n    }\n\n    enum InterestRateMode {\n        NONE,\n        STABLE,\n        VARIABLE\n    }\n\n    struct ReserveCache {\n        uint256 currScaledVariableDebt;\n        uint256 nextScaledVariableDebt;\n        uint256 currPrincipalStableDebt;\n        uint256 currAvgStableBorrowRate;\n        uint256 currTotalStableDebt;\n        uint256 nextAvgStableBorrowRate;\n        uint256 nextTotalStableDebt;\n        uint256 currLiquidityIndex;\n        uint256 nextLiquidityIndex;\n        uint256 currVariableBorrowIndex;\n        uint256 nextVariableBorrowIndex;\n        uint256 currLiquidityRate;\n        uint256 currVariableBorrowRate;\n        uint256 reserveFactor;\n        ReserveConfigurationMap reserveConfiguration;\n        address aTokenAddress;\n        address stableDebtTokenAddress;\n        address variableDebtTokenAddress;\n        uint40 reserveLastUpdateTimestamp;\n        uint40 stableDebtLastUpdateTimestamp;\n    }\n\n    struct ExecuteLiquidationCallParams {\n        uint256 reservesCount;\n        uint256 debtToCover;\n        address collateralAsset;\n        address debtAsset;\n        address user;\n        bool receiveAToken;\n        address priceOracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n    }\n\n    struct ExecuteSupplyParams {\n        address asset;\n        uint256 amount;\n        address onBehalfOf;\n        uint16 referralCode;\n    }\n\n    struct ExecuteBorrowParams {\n        address asset;\n        address user;\n        address onBehalfOf;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        uint16 referralCode;\n        bool releaseUnderlying;\n        uint256 maxStableRateBorrowSizePercent;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n    }\n\n    struct ExecuteRepayParams {\n        address asset;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        address onBehalfOf;\n        bool useATokens;\n    }\n\n    struct ExecuteWithdrawParams {\n        address asset;\n        uint256 amount;\n        address to;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n    }\n\n    struct ExecuteSetUserEModeParams {\n        uint256 reservesCount;\n        address oracle;\n        uint8 categoryId;\n    }\n\n    struct FinalizeTransferParams {\n        address asset;\n        address from;\n        address to;\n        uint256 amount;\n        uint256 balanceFromBefore;\n        uint256 balanceToBefore;\n        uint256 reservesCount;\n        address oracle;\n        uint8 fromEModeCategory;\n    }\n\n    struct FlashloanParams {\n        address receiverAddress;\n        address[] assets;\n        uint256[] amounts;\n        uint256[] interestRateModes;\n        address onBehalfOf;\n        bytes params;\n        uint16 referralCode;\n        uint256 flashLoanPremiumToProtocol;\n        uint256 flashLoanPremiumTotal;\n        uint256 maxStableRateBorrowSizePercent;\n        uint256 reservesCount;\n        address addressesProvider;\n        uint8 userEModeCategory;\n        bool isAuthorizedFlashBorrower;\n    }\n\n    struct FlashloanSimpleParams {\n        address receiverAddress;\n        address asset;\n        uint256 amount;\n        bytes params;\n        uint16 referralCode;\n        uint256 flashLoanPremiumToProtocol;\n        uint256 flashLoanPremiumTotal;\n    }\n\n    struct FlashLoanRepaymentParams {\n        uint256 amount;\n        uint256 totalPremium;\n        uint256 flashLoanPremiumToProtocol;\n        address asset;\n        address receiverAddress;\n        uint16 referralCode;\n    }\n\n    struct CalculateUserAccountDataParams {\n        UserConfigurationMap userConfig;\n        uint256 reservesCount;\n        address user;\n        address oracle;\n        uint8 userEModeCategory;\n    }\n\n    struct ValidateBorrowParams {\n        ReserveCache reserveCache;\n        UserConfigurationMap userConfig;\n        address asset;\n        address userAddress;\n        uint256 amount;\n        InterestRateMode interestRateMode;\n        uint256 maxStableLoanPercent;\n        uint256 reservesCount;\n        address oracle;\n        uint8 userEModeCategory;\n        address priceOracleSentinel;\n        bool isolationModeActive;\n        address isolationModeCollateralAddress;\n        uint256 isolationModeDebtCeiling;\n    }\n\n    struct ValidateLiquidationCallParams {\n        ReserveCache debtReserveCache;\n        uint256 totalDebt;\n        uint256 healthFactor;\n        address priceOracleSentinel;\n    }\n\n    struct CalculateInterestRatesParams {\n        uint256 unbacked;\n        uint256 liquidityAdded;\n        uint256 liquidityTaken;\n        uint256 totalStableDebt;\n        uint256 totalVariableDebt;\n        uint256 averageStableBorrowRate;\n        uint256 reserveFactor;\n        address reserve;\n        address aToken;\n    }\n\n    struct InitReserveParams {\n        address asset;\n        address aTokenAddress;\n        address stableDebtAddress;\n        address variableDebtAddress;\n        address interestRateStrategyAddress;\n        uint16 reservesCount;\n        uint16 maxNumberReserves;\n    }\n}\n"
    },
    "contracts/ReentrancyGuardKeccak.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\n// contract that uses keccak slots instead of the standard storage layout.\n\nimport {DiamondStorageLib} from \"./lib/DiamondStorageLib.sol\";\n\npragma solidity 0.8.17;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n */\nabstract contract ReentrancyGuardKeccak {\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        DiamondStorageLib.ReentrancyGuardStorage storage rgs = DiamondStorageLib.reentrancyGuardStorage();\n        // On the first call to nonReentrant, _notEntered will be true\n        require(rgs._status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        rgs._status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        rgs._status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a / b + (a % b == 0 ? 0 : 1);\n    }\n}\n"
    },
    "contracts/lib/SolvencyMethods.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\";\nimport \"../facets/SolvencyFacetProd.sol\";\nimport \"../DiamondHelper.sol\";\n\n// TODO Rename to contract instead of lib\ncontract SolvencyMethods is DiamondHelper, ProxyConnector {\n    // This function executes SolvencyFacetProd.getDebt()\n    function _getDebt() internal virtual returns (uint256 debt) {\n        debt = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebt.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getDebt.selector)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getDebtWithPrices()\n    function _getDebtWithPrices(SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) internal virtual returns (uint256 debt) {\n        debt = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtWithPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtWithPrices.selector, debtAssetsPrices)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.isSolventWithPrices()\n    function _isSolventWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) internal virtual returns (bool solvent){\n        solvent = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolventWithPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.isSolventWithPrices.selector, ownedAssetsPrices, debtAssetsPrices, stakedPositionsPrices)\n            ),\n            (bool)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.isSolvent()\n    function _isSolvent() internal virtual returns (bool solvent){\n        solvent = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.isSolvent.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.isSolvent.selector)\n            ),\n            (bool)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getTotalValue()\n    function _getTotalValue() internal virtual returns (uint256 totalValue) {\n        totalValue = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValue.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValue.selector)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getTotalAssetsValue()\n    function _getTotalAssetsValue() internal virtual returns (uint256 assetsValue) {\n        assetsValue = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalAssetsValue.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalAssetsValue.selector)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getHealthRatioWithPrices()\n    function _getHealthRatioWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) public virtual returns (uint256 health) {\n        health = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatioWithPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatioWithPrices.selector, ownedAssetsPrices, debtAssetsPrices, stakedPositionsPrices)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getHealthRatio()\n    function _getHealthRatio() public virtual returns (uint256 health) {\n        health = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getHealthRatio.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getHealthRatio.selector)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getPrices()\n    function getPrices(bytes32[] memory symbols) public virtual returns (uint256[] memory prices) {\n        prices = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getPrices.selector, symbols)\n            ),\n            (uint256[])\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getPrices()\n    function _getAllPricesForLiquidation(bytes32[] memory assetsToRepay) public virtual returns (SolvencyFacetProd.CachedPrices memory result) {\n        result = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getAllPricesForLiquidation.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getAllPricesForLiquidation.selector, assetsToRepay)\n            ),\n            (SolvencyFacetProd.CachedPrices)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getOwnedAssetsPrices()\n    function _getOwnedAssetsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices) {\n        ownedAssetsPrices = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getOwnedAssetsPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getOwnedAssetsPrices.selector)\n            ),\n            (SolvencyFacetProd.AssetPrice[])\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getDebtAssetsPrices()\n    function _getDebtAssetsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory debtAssetsPrices) {\n        debtAssetsPrices = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getDebtAssetsPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getDebtAssetsPrices.selector)\n            ),\n            (SolvencyFacetProd.AssetPrice[])\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getStakedPositionsPrices()\n    function _getStakedPositionsPrices() internal virtual returns (SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) {\n        stakedPositionsPrices = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getStakedPositionsPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getStakedPositionsPrices.selector)\n            ),\n            (SolvencyFacetProd.AssetPrice[])\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getTotalAssetsValueWithPrices()\n    function _getTotalValueWithPrices(SolvencyFacetProd.AssetPrice[] memory ownedAssetsPrices, SolvencyFacetProd.AssetPrice[] memory stakedPositionsPrices) internal virtual returns (uint256 totalValue) {\n        totalValue = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getTotalValueWithPrices.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getTotalValueWithPrices.selector, ownedAssetsPrices, stakedPositionsPrices)\n            ),\n            (uint256)\n        );\n    }\n\n    // This function executes SolvencyFacetProd.getPrices()\n    function getPrice(bytes32 symbol) public virtual returns (uint256 price) {\n        price = abi.decode(\n            proxyDelegateCalldata(\n                DiamondHelper._getFacetAddress(SolvencyFacetProd.getPrice.selector),\n                abi.encodeWithSelector(SolvencyFacetProd.getPrice.selector, symbol)\n            ),\n            (uint256)\n        );\n    }\n\n    /**\n     * Returns IERC20Metadata instance of a token\n     * @param _asset the code of an asset\n     **/\n    function getERC20TokenInstance(bytes32 _asset, bool allowInactive) internal view returns (IERC20Metadata) {\n        return IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(_asset, allowInactive));\n    }\n\n    /**\n    * Checks whether account is solvent (health higher than 1)\n    * @dev This modifier uses the redstone-evm-connector\n    **/\n    modifier remainsSolvent() {\n        _;\n\n        require(_isSolvent(), \"The action may cause an account to become insolvent\");\n    }\n}\n"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 2e9f2aba0ab8e419a7d1bf6e83f967ae0bc9c538;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"./interfaces/IIndex.sol\";\nimport \"./interfaces/IRatesCalculator.sol\";\nimport \"./interfaces/IBorrowersRegistry.sol\";\nimport \"./interfaces/IPoolRewarder.sol\";\n\n\n/**\n * @title Pool\n * @dev Contract allowing user to deposit to and borrow from a dedicated user account\n * Depositors are rewarded with the interest rates collected from borrowers.\n * The interest rates calculation is delegated to an external calculator contract.\n */\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\n    using TransferHelper for address payable;\n\n    uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.95e18;\n\n    mapping(address => mapping(address => uint256)) private _allowed;\n    mapping(address => uint256) internal _deposited;\n\n    mapping(address => uint256) public borrowed;\n    mapping(address => bool) public canDeposit;\n\n    IRatesCalculator public ratesCalculator;\n    IBorrowersRegistry public borrowersRegistry;\n    IPoolRewarder public poolRewarder;\n\n    IIndex public depositIndex;\n    IIndex public borrowIndex;\n\n    address payable public tokenAddress;\n\n    function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, IIndex depositIndex_, IIndex borrowIndex_, address payable tokenAddress_, IPoolRewarder poolRewarder_) public initializer {\n        require(AddressUpgradeable.isContract(address(ratesCalculator_))\n            && AddressUpgradeable.isContract(address(borrowersRegistry_))\n            && AddressUpgradeable.isContract(address(depositIndex_))\n            && AddressUpgradeable.isContract(address(borrowIndex_))\n            && (AddressUpgradeable.isContract(address(poolRewarder_)) || address(poolRewarder_) == address(0)), \"Wrong init arguments\");\n\n        borrowersRegistry = borrowersRegistry_;\n        ratesCalculator = ratesCalculator_;\n        depositIndex = depositIndex_;\n        borrowIndex = borrowIndex_;\n        poolRewarder = poolRewarder_;\n        tokenAddress = tokenAddress_;\n\n        __Ownable_init();\n        __ReentrancyGuard_init();\n        _updateRates();\n    }\n\n    /* ========== TEST-DEPLOYMENT ========== */\n\n    /* ========== SETTERS ========== */\n    function setAccess(address user, bool allowDeposit) external onlyOwner {\n        canDeposit[user] = allowDeposit;\n    }\n\n    /**\n     * Sets the new Pool Rewarder.\n     * The IPoolRewarder that distributes additional token rewards to people having a stake in this pool proportionally to their stake and time of participance.\n     * Only the owner of the Contract can execute this function.\n     * @dev _poolRewarder the address of PoolRewarder\n    **/\n    function setPoolRewarder(IPoolRewarder _poolRewarder) external onlyOwner {\n        require(AddressUpgradeable.isContract(address(_poolRewarder)) || address(_poolRewarder) == address(0), \"Must be a contract\");\n        poolRewarder = _poolRewarder;\n\n        emit PoolRewarderChanged(address(_poolRewarder), block.timestamp);\n    }\n\n    /**\n     * Sets the new rate calculator.\n     * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\n     * Only the owner of the Contract can execute this function.\n     * @dev ratesCalculator the address of rates calculator\n     **/\n    function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\n        // setting address(0) ratesCalculator_ freezes the pool\n        require(AddressUpgradeable.isContract(address(ratesCalculator_)) || address(ratesCalculator_) == address(0), \"Must be a contract\");\n        ratesCalculator = ratesCalculator_;\n        if (address(ratesCalculator_) != address(0)) {\n            _updateRates();\n        }\n\n        emit RatesCalculatorChanged(address(ratesCalculator_), block.timestamp);\n    }\n\n    /**\n     * Sets the new borrowers registry contract.\n     * The borrowers registry decides if an account can borrow funds.\n     * Only the owner of the Contract can execute this function.\n     * @dev borrowersRegistry the address of borrowers registry\n     **/\n    function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\n        require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \"Must be a contract\");\n\n        borrowersRegistry = borrowersRegistry_;\n        emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n    function transfer(address recipient, uint256 amount) external override returns (bool) {\n        require(recipient != address(0), \"ERC20: cannot transfer to the zero address\");\n        require(recipient != address(this), \"ERC20: cannot transfer to the pool address\");\n\n        _accumulateDepositInterest(msg.sender);\n\n        require(_deposited[msg.sender] >= amount, \"ERC20: transfer amount exceeds balance\");\n\n        // (this is verified in \"require\" above)\n        unchecked {\n            _deposited[msg.sender] -= amount;\n        }\n\n        _accumulateDepositInterest(recipient);\n        _deposited[recipient] += amount;\n\n        emit Transfer(msg.sender, recipient, amount);\n\n        return true;\n    }\n\n    function allowance(address owner, address spender) external view override returns (uint256) {\n        return _allowed[owner][spender];\n    }\n\n//    function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n//        require(spender != address(0), \"Spender cannot be a zero address\");\n//        uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\n//        _allowed[msg.sender][spender] = newAllowance;\n//\n//        emit Approval(msg.sender, spender, newAllowance);\n//        return true;\n//    }\n//\n//    function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n//        require(spender != address(0), \"Spender cannot be a zero address\");\n//        uint256 currentAllowance = _allowed[msg.sender][spender];\n//        require(currentAllowance >= subtractedValue, \"Current allowance is too small\");\n//\n//        uint256 newAllowance = currentAllowance - subtractedValue;\n//        _allowed[msg.sender][spender] = newAllowance;\n//\n//        emit Approval(msg.sender, spender, newAllowance);\n//        return true;\n//    }\n\n    function approve(address spender, uint256 amount) external override returns (bool) {\n        require(spender != address(0), \"Spender cannot be a zero address\");\n        _allowed[msg.sender][spender] = amount;\n\n        emit Approval(msg.sender, spender, amount);\n\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n        require(_allowed[sender][msg.sender] >= amount, \"Not enough tokens allowed\");\n        require(recipient != address(0), \"ERC20: cannot transfer to the zero address\");\n        require(recipient != address(this), \"ERC20: cannot transfer to the pool address\");\n\n        _accumulateDepositInterest(sender);\n\n        require(_deposited[sender] >= amount, \"ERC20: transfer amount exceeds balance\");\n\n        _deposited[sender] -= amount;\n        _allowed[sender][msg.sender] -= amount;\n\n        _accumulateDepositInterest(recipient);\n        _deposited[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        return true;\n    }\n\n\n    /**\n     * Deposits the amount\n     * It updates user deposited balance, total deposited and rates\n     **/\n    function deposit(uint256 _amount) public virtual nonReentrant {\n        require(canDeposit[msg.sender], \"User not permitted to create a loan\");\n\n        require(_amount>0, \"Deposit amount must be > 0\");\n        _accumulateDepositInterest(msg.sender);\n\n        _transferToPool(msg.sender, _amount);\n\n        _mint(msg.sender, _amount);\n        _deposited[address(this)] += _amount;\n        _updateRates();\n\n        if (address(poolRewarder) != address(0)) {\n            poolRewarder.stakeFor(_amount, msg.sender);\n        }\n\n        emit Deposit(msg.sender, _amount, block.timestamp);\n    }\n\n    function _transferToPool(address from, uint256 amount) internal virtual {\n        tokenAddress.safeTransferFrom(from, address(this), amount);\n    }\n\n    function _transferFromPool(address to, uint256 amount) internal virtual {\n        tokenAddress.safeTransfer(to, amount);\n    }\n\n    /**\n     * Withdraws selected amount from the user deposits\n     * @dev _amount the amount to be withdrawn\n     **/\n    function withdraw(uint256 _amount) external nonReentrant {\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= _amount, \"Not enough funds in the pool\");\n\n        _accumulateDepositInterest(msg.sender);\n\n        _burn(msg.sender, _amount);\n\n        _transferFromPool(msg.sender, _amount);\n\n        _updateRates();\n\n        if (address(poolRewarder) != address(0)) {\n            poolRewarder.withdrawFor(_amount, msg.sender);\n        }\n\n        emit Withdrawal(msg.sender, _amount, block.timestamp);\n    }\n\n    /**\n     * Borrows the specified amount\n     * It updates user borrowed balance, total borrowed amount and rates\n     * @dev _amount the amount to be borrowed\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\n     **/\n    function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\n        require(IERC20(tokenAddress).balanceOf(address(this)) >= _amount, \"Not enough funds in the pool\");\n\n        _accumulateBorrowingInterest(msg.sender);\n\n        borrowed[msg.sender] += _amount;\n        borrowed[address(this)] += _amount;\n\n        _transferFromPool(msg.sender, _amount);\n\n        _updateRates();\n\n        emit Borrowing(msg.sender, _amount, block.timestamp);\n    }\n\n    /**\n     * Repays the amount\n     * It updates user borrowed balance, total borrowed amount and rates\n     * @dev It is only meant to be used by a SmartLoanDiamondProxy\n     **/\n    function repay(uint256 amount) external nonReentrant {\n        _accumulateBorrowingInterest(msg.sender);\n\n        require(borrowed[msg.sender] >= amount, \"Trying to repay more than was borrowed\");\n        _transferToPool(msg.sender, amount);\n\n        borrowed[msg.sender] -= amount;\n        borrowed[address(this)] -= amount;\n\n        _updateRates();\n\n        emit Repayment(msg.sender, amount, block.timestamp);\n    }\n\n    /* =========\n\n\n    /**\n     * Returns the current borrowed amount for the given user\n     * The value includes the interest rates owned at the current moment\n     * @dev _user the address of queried borrower\n    **/\n    function getBorrowed(address _user) public view returns (uint256) {\n        return borrowIndex.getIndexedValue(borrowed[_user], _user);\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return balanceOf(address(this));\n    }\n\n    function totalBorrowed() public view returns (uint256) {\n        return getBorrowed(address(this));\n    }\n\n\n    // Calls the IPoolRewarder.getRewardsFor() that sends pending rewards to msg.sender\n    function getRewards() external {\n        poolRewarder.getRewardsFor(msg.sender);\n    }\n\n    // Returns number of pending rewards for msg.sender\n    function checkRewards() external view returns (uint256) {\n        return poolRewarder.earned(msg.sender);\n    }\n\n    /**\n     * Returns the current deposited amount for the given user\n     * The value includes the interest rates earned at the current moment\n     * @dev _user the address of queried depositor\n     **/\n    function balanceOf(address user) public view override returns (uint256) {\n        return depositIndex.getIndexedValue(_deposited[user], user);\n    }\n\n    /**\n     * Returns the current interest rate for deposits\n     **/\n    function getDepositRate() public view returns (uint256) {\n        return ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\n    }\n\n    /**\n     * Returns the current interest rate for borrowings\n     **/\n    function getBorrowingRate() public view returns (uint256) {\n        return ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\n    }\n\n    /**\n     * Recovers the surplus funds resultant from difference between deposit and borrowing rates\n     **/\n    function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\n        uint256 balance = IERC20(tokenAddress).balanceOf(address(this));\n        uint256 surplus = balance + totalBorrowed() - totalSupply();\n\n        require(amount <= balance, \"Trying to recover more than pool balance\");\n        require(amount <= surplus, \"Trying to recover more than current surplus\");\n\n        _transferFromPool(account, amount);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _mint(address to, uint256 amount) internal {\n        require(to != address(0), \"ERC20: cannot mint to the zero address\");\n\n        _deposited[to] += amount;\n\n        emit Transfer(address(0), to, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal {\n        require(_deposited[account] >= amount, \"ERC20: burn amount exceeds user balance\");\n        require(_deposited[address(this)] >= amount, \"ERC20: burn amount exceeds current pool indexed balance\");\n\n        // verified in \"require\" above\n        unchecked {\n            _deposited[account] -= amount;\n            _deposited[address(this)] -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _updateRates() internal {\n        uint256 _totalBorrowed = totalBorrowed();\n        uint256 _totalSupply = totalSupply();\n        require(address(ratesCalculator) != address(0), \"Pool is frozen\");\n        depositIndex.setRate(ratesCalculator.calculateDepositRate(_totalBorrowed, _totalSupply));\n        borrowIndex.setRate(ratesCalculator.calculateBorrowingRate(_totalBorrowed, _totalSupply));\n    }\n\n    function _accumulateDepositInterest(address user) internal {\n        uint256 interest = balanceOf(user) - _deposited[user];\n\n        _mint(user, interest);\n        _deposited[address(this)] = balanceOf(address(this));\n\n        emit InterestCollected(user, interest, block.timestamp);\n\n        depositIndex.updateUser(user);\n        depositIndex.updateUser(address(this));\n    }\n\n    function _accumulateBorrowingInterest(address user) internal {\n        borrowed[user] = getBorrowed(user);\n        borrowed[address(this)] = getBorrowed(address(this));\n\n        borrowIndex.updateUser(user);\n        borrowIndex.updateUser(address(this));\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /* ========== MODIFIERS ========== */\n\n    modifier canBorrow() {\n        require(address(borrowersRegistry) != address(0), \"Borrowers registry not configured\");\n        require(borrowersRegistry.canBorrow(msg.sender), \"Only authorized accounts may borrow\");\n        require(totalSupply() != 0, \"Cannot borrow from an empty pool\");\n        _;\n        require((totalBorrowed() * 1e18) / totalSupply() <= MAX_POOL_UTILISATION_FOR_BORROWING, \"The pool utilisation cannot be greater than 95%\");\n    }\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after the user deposits funds\n     * @param user the address performing the deposit\n     * @param value the amount deposited\n     * @param timestamp of the deposit\n     **/\n    event Deposit(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after the user withdraws funds\n     * @param user the address performing the withdrawal\n     * @param value the amount withdrawn\n     * @param timestamp of the withdrawal\n     **/\n    event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after the user borrows funds\n     * @param user the address that borrows\n     * @param value the amount borrowed\n     * @param timestamp time of the borrowing\n     **/\n    event Borrowing(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after the user repays debt\n     * @param user the address that repays debt\n     * @param value the amount repaid\n     * @param timestamp of the repayment\n     **/\n    event Repayment(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n     * @dev emitted after accumulating deposit interest\n     * @param user the address that the deposit interest is accumulated for\n     * @param value the amount that interest is calculated from\n     * @param timestamp of the interest accumulation\n     **/\n    event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\n\n    /**\n    * @dev emitted after changing borrowers registry\n    * @param registry an address of the newly set borrowers registry\n    * @param timestamp of the borrowers registry change\n    **/\n    event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\n\n    /**\n    * @dev emitted after changing rates calculator\n    * @param calculator an address of the newly set rates calculator\n    * @param timestamp of the borrowers registry change\n    **/\n    event RatesCalculatorChanged(address indexed calculator, uint256 timestamp);\n\n    /**\n    * @dev emitted after changing pool rewarder\n    * @param poolRewarder an address of the newly set pool rewarder\n    * @param timestamp of the pool rewarder change\n    **/\n    event PoolRewarderChanged(address indexed poolRewarder, uint256 timestamp);\n}"
    },
    "contracts/TokenManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\npragma solidity 0.8.17;\n\nimport \"./lib/Bytes32EnumerableMap.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\ncontract TokenManager {\n    /**\n     * For adding supported assets\n     **/\n    struct Asset {\n        bytes32 asset;\n        address assetAddress;\n        uint256 maxLeverage;\n    }\n\n    /**\n     * For adding supported lending pools\n     **/\n    struct poolAsset {\n        bytes32 asset;\n        address poolAddress;\n    }\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\n\n    uint256 private constant _NOT_SUPPORTED = 0;\n    uint256 private constant _INACTIVE = 1;\n    uint256 private constant _ACTIVE = 2;\n\n    address public admin;\n    // Stores an asset's bytes32 symbol representation to pool's address mapping\n    EnumerableMap.Bytes32ToAddressMap private assetToPoolAddress;\n    // Stores an asset's bytes32 symbol representation to asset's address mapping\n    EnumerableMap.Bytes32ToAddressMap private assetToTokenAddress;\n    mapping(address => bytes32) public tokenAddressToSymbol;\n    mapping(address => uint256) private tokenPositionInList;\n    // used for defining different leverage ratios for tokens\n    mapping(address => uint256) public maxTokenLeverage;\n    address[] public supportedTokensList;\n\n    address public adminTransferProposal;\n\n    mapping(address => uint256) public tokenToStatus;\n\n    constructor(Asset[] memory tokenAssets, poolAsset[] memory poolAssets) {\n        admin = msg.sender;\n        emit AdminChanged(address(0), msg.sender, block.timestamp);\n        addTokenAssets(tokenAssets);\n        addPoolAssets(poolAssets);\n    }\n\n    // Set to address(0) to reset proposal\n    function proposeAdminTransfer(address _newOwner) onlyAdmin public {\n        require(_newOwner != msg.sender, \"Can't propose oneself as a contract owner\");\n        adminTransferProposal = _newOwner;\n        emit AdminProposed(msg.sender, _newOwner, block.timestamp);\n    }\n\n    function executeAdminTransfer() public {\n        require(adminTransferProposal != address(0), \"There is no active admin transfer proposal\");\n        require(adminTransferProposal == msg.sender, \"Only the proposed new admin can execute admin transfer proposal\");\n        address oldAdmin = admin;\n        admin = adminTransferProposal;\n        adminTransferProposal = address(0);\n        emit AdminChanged(oldAdmin, msg.sender, block.timestamp);\n    }\n\n    function getAllPoolAssets() public view returns (bytes32[] memory result) {\n        return assetToPoolAddress._inner._keys._inner._values;\n    }\n\n    function getSupportedTokensAddresses() public view returns (address[] memory) {\n        return supportedTokensList;\n    }\n\n    function getAllTokenAssets() public view returns (bytes32[] memory result) {\n        return assetToTokenAddress._inner._keys._inner._values;\n    }\n\n    /**\n    * Returns address of an asset\n    **/\n    function getAssetAddress(bytes32 _asset, bool allowInactive) public view returns (address) {\n        (, address assetAddress) = assetToTokenAddress.tryGet(_asset);\n        require(assetAddress != address(0), \"Asset not supported.\");\n        if (!allowInactive) {\n            require(tokenToStatus[assetAddress] == _ACTIVE, \"Asset inactive\");\n        }\n\n        return assetAddress;\n    }\n\n    /**\n    * Returns address of an asset's lending pool\n    **/\n    function getPoolAddress(bytes32 _asset) public view returns (address) {\n        (, address assetAddress) = assetToPoolAddress.tryGet(_asset);\n        require(assetAddress != address(0), \"Pool asset not supported.\");\n\n        return assetAddress;\n    }\n\n    function addPoolAssets(poolAsset[] memory poolAssets) public onlyAdmin {\n        for (uint256 i = 0; i < poolAssets.length; i++) {\n            _addPoolAsset(poolAssets[i].asset, poolAssets[i].poolAddress);\n        }\n    }\n\n    function _addPoolAsset(bytes32 _asset, address _poolAddress) internal {\n        require(Address.isContract(_poolAddress), \"TokenManager: Pool must be a contract\");\n        require(!assetToPoolAddress.contains(_asset), \"Asset's pool already exists\");\n        assetToPoolAddress.set(_asset, _poolAddress);\n        emit PoolAssetAdded(msg.sender, _asset, _poolAddress, block.timestamp);\n    }\n\n    function addTokenAssets(Asset[] memory tokenAssets) public onlyAdmin {\n        for (uint256 i = 0; i < tokenAssets.length; i++) {\n            _addTokenAsset(tokenAssets[i].asset, tokenAssets[i].assetAddress, tokenAssets[i].maxLeverage);\n        }\n    }\n\n    function activateToken(address token) public onlyAdmin {\n        require(tokenToStatus[token] == _INACTIVE, \"Must be inactive\");\n        tokenToStatus[token] = _ACTIVE;\n        emit TokenAssetActivated(msg.sender, token, block.timestamp);\n    }\n\n    function deactivateToken(address token) public onlyAdmin {\n        require(tokenToStatus[token] == _ACTIVE, \"Must be active\");\n        tokenToStatus[token] = _INACTIVE;\n        emit TokenAssetDeactivated(msg.sender, token, block.timestamp);\n    }\n\n    function _addTokenAsset(bytes32 _asset, address _tokenAddress, uint256 _maxLeverage) internal {\n        require(_asset != \"\", \"Cannot set an empty string asset.\");\n        require(_tokenAddress != address(0), \"Cannot set an empty address.\");\n        require(!assetToTokenAddress.contains(_asset), \"Asset's token already exists\");\n        setMaxTokenLeverage(_tokenAddress, _maxLeverage);\n\n        assetToTokenAddress.set(_asset, _tokenAddress);\n        tokenAddressToSymbol[_tokenAddress] = _asset;\n        tokenToStatus[_tokenAddress] = _ACTIVE;\n\n        supportedTokensList.push(_tokenAddress);\n        tokenPositionInList[_tokenAddress] = supportedTokensList.length - 1;\n\n        emit TokenAssetAdded(msg.sender, _asset, _tokenAddress, block.timestamp);\n    }\n\n    function _removeTokenFromList(address tokenToRemove) internal {\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] supportedTokensList\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\n        if (tokenToRemoveIndex != (supportedTokensList.length - 1)) {\n            address currentLastToken = supportedTokensList[supportedTokensList.length - 1];\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\n            supportedTokensList[tokenToRemoveIndex] = currentLastToken;\n        }\n        // Remove last element - that is either the token that is being removed (if was already at the end)\n        // or some other asset that at this point was already copied to the `index` positon\n        supportedTokensList.pop();\n        tokenPositionInList[tokenToRemove] = 0;\n    }\n\n    function removeTokenAssets(bytes32[] memory _tokenAssets) public onlyAdmin {\n        for (uint256 i = 0; i < _tokenAssets.length; i++) {\n            _removeTokenAsset(_tokenAssets[i]);\n        }\n    }\n\n    function _removeTokenAsset(bytes32 _tokenAsset) internal {\n        address tokenAddress = getAssetAddress(_tokenAsset, true);\n        EnumerableMap.remove(assetToTokenAddress, _tokenAsset);\n        tokenAddressToSymbol[tokenAddress] = 0;\n        tokenToStatus[tokenAddress] = _NOT_SUPPORTED;\n        maxTokenLeverage[tokenAddress] = 0;\n        _removeTokenFromList(tokenAddress);\n        emit TokenAssetRemoved(msg.sender, _tokenAsset, block.timestamp);\n    }\n\n    function removePoolAssets(bytes32[] memory _poolAssets) public onlyAdmin {\n        for (uint256 i = 0; i < _poolAssets.length; i++) {\n            _removePoolAsset(_poolAssets[i]);\n        }\n    }\n\n    function _removePoolAsset(bytes32 _poolAsset) internal {\n        address poolAddress = getPoolAddress(_poolAsset);\n        EnumerableMap.remove(assetToPoolAddress, _poolAsset);\n        emit PoolAssetRemoved(msg.sender, _poolAsset, poolAddress, block.timestamp);\n    }\n\n    function setMaxTokenLeverage(address token, uint256 maxLeverage) public onlyAdmin {\n        //LTV must be lower than 5\n        require(maxLeverage <= 0.833333333333333333e18, 'Leverage higher than maximum acceptable');\n        maxTokenLeverage[token] = maxLeverage;\n    }\n\n    modifier onlyAdmin {\n        require(msg.sender == admin, \"Admin only\");\n        _;\n    }\n\n    /**\n     * @dev emitted after proposing a new admin\n     * @param oldAdmin current admin\n     * @param newAdmin new admin proposed\n     * @param timestamp time of proposal\n     **/\n    event AdminProposed(address indexed oldAdmin, address newAdmin, uint256 timestamp);\n\n    /**\n     * @dev emitted after changing an admin\n     * @param oldAdmin previous admin\n     * @param newAdmin new admin being set\n     * @param timestamp time of changing an admin\n     **/\n    event AdminChanged(address indexed oldAdmin, address newAdmin, uint256 timestamp);\n\n    /**\n     * @dev emitted after adding a token asset\n     * @param performer an address of the wallet adding a token asset\n     * @param tokenAsset token asset\n     * @param assetAddress an address of the token asset\n     * @param timestamp time of adding a token asset\n     **/\n    event TokenAssetAdded(address indexed performer, bytes32 indexed tokenAsset, address assetAddress, uint256 timestamp);\n\n    /**\n     * @dev emitted after activating a token asset\n     * @param performer an address of the wallet activating a token asset\n     * @param assetAddress an address of the token asset\n     * @param timestamp time of activating a token asset\n     **/\n    event TokenAssetActivated(address indexed performer, address assetAddress, uint256 timestamp);\n\n    /**\n     * @dev emitted after deactivating a token asset\n     * @param performer an address of the wallet deactivating a token asset\n     * @param assetAddress an address of the token asset\n     * @param timestamp time of deactivating a token asset\n     **/\n    event TokenAssetDeactivated(address indexed performer, address assetAddress, uint256 timestamp);\n\n    /**\n     * @dev emitted after removing a token asset\n     * @param performer an address of the wallet removing a token asset\n     * @param tokenAsset token asset\n     * @param timestamp time a token asset removal\n     **/\n    event TokenAssetRemoved(address indexed performer, bytes32 indexed tokenAsset, uint256 timestamp);\n\n    /**\n     * @dev emitted after adding a pool asset\n     * @param performer an address of wallet adding the pool asset\n     * @param poolAsset pool asset\n     * @param poolAddress an address of the pool asset\n     * @param timestamp time of the pool asset addition\n     **/\n    event PoolAssetAdded(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\n\n    /**\n     * @dev emitted after removing a pool asset\n     * @param performer an address of wallet removing the pool asset\n     * @param poolAsset pool asset\n     * @param poolAddress an address of the pool asset\n     * @param timestamp time of a pool asset removal\n     **/\n    event PoolAssetRemoved(address indexed performer, bytes32 indexed poolAsset, address poolAddress, uint256 timestamp);\n}\n"
    },
    "contracts/lib/avalanche/DeploymentConstants.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\npragma solidity 0.8.17;\n\nimport \"../../TokenManager.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../RedstoneConfigManager.sol\";\n\n/**\n * DeploymentConstants\n * These constants are updated during test and prod deployments using JS scripts. Defined as constants\n * to decrease gas costs. Not meant to be updated unless really necessary.\n * BE CAREFUL WHEN UPDATING. CONSTANTS CAN BE USED AMONG MANY FACETS.\n **/\nlibrary DeploymentConstants {\n\n    // Used for LiquidationBonus calculations\n    uint256 private constant _PERCENTAGE_PRECISION = 1000;\n\n    bytes32 private constant _NATIVE_TOKEN_SYMBOL = 'AVAX';\n\n    address private constant _NATIVE_ADDRESS = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n\n    address private constant _DIAMOND_BEACON_ADDRESS = 0x9523615C15d3743Cb3198B4464048B064f1530B2;\n\n    address private constant _SMART_LOANS_FACTORY_ADDRESS = 0xB7918417ADd60e9f2a48D00cf4caB6dE90ee2ba1;\n\n    address private constant _TOKEN_MANAGER_ADDRESS = 0x9CD7eCfF2F5A95C1D6ee2ceB3e53909EbE9d57BB;\n\n    address private constant _REDSTONE_CONFIG_MANAGER_ADDRESS = 0x127587D8a188493Cc032A0eC2bd1D559E3A8E275;\n\n    //implementation-specific\n\n    function getPercentagePrecision() internal pure returns (uint256) {\n        return _PERCENTAGE_PRECISION;\n    }\n\n    //blockchain-specific\n\n    function getNativeTokenSymbol() internal pure returns (bytes32 symbol) {\n        return _NATIVE_TOKEN_SYMBOL;\n    }\n\n    function getNativeToken() internal pure returns (address payable) {\n        return payable(_NATIVE_ADDRESS);\n    }\n\n    //deployment-specific\n\n    function getDiamondAddress() internal pure returns (address) {\n        return _DIAMOND_BEACON_ADDRESS;\n    }\n\n    function getSmartLoansFactoryAddress() internal pure returns (address) {\n        return _SMART_LOANS_FACTORY_ADDRESS;\n    }\n\n    function getTokenManager() internal pure returns (TokenManager) {\n        return TokenManager(_TOKEN_MANAGER_ADDRESS);\n    }\n\n    function getRedstoneConfigManager() internal pure returns (RedstoneConfigManager) {\n        return RedstoneConfigManager(_REDSTONE_CONFIG_MANAGER_ADDRESS);\n    }\n\n    /**\n    * Returns all owned assets keys\n    **/\n    function getAllOwnedAssets() internal view returns (bytes32[] memory result) {\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\n        return sls.ownedAssets._inner._keys._inner._values;\n    }\n}"
    },
    "contracts/facets/SolvencyFacetProd.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../oracle/RSOracleProd3Signers.sol\";\nimport \"../TokenManager.sol\";\nimport \"../Pool.sol\";\nimport \"../DiamondHelper.sol\";\nimport \"../interfaces/IStakingPositions.sol\";\n\n//This path is updated during deployment\nimport \"../lib/avalanche/DeploymentConstants.sol\";\n\ncontract SolvencyFacetProd is RSOracleProd3Signers, DiamondHelper {\n    struct AssetPrice {\n        bytes32 asset;\n        uint256 price;\n    }\n\n    // Struct used in the liquidation process to obtain necessary prices only once\n    struct CachedPrices {\n        AssetPrice[] ownedAssetsPrices;\n        AssetPrice[] debtAssetsPrices;\n        AssetPrice[] stakedPositionsPrices;\n        AssetPrice[] assetsToRepayPrices;\n    }\n\n    /**\n      * Checks if the loan is solvent.\n      * It means that the Health Ratio is greater than 1e18.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function isSolvent() public view returns (bool) {\n        return getHealthRatio() >= 1e18;\n    }\n\n    /**\n      * Checks if the loan is solvent.\n      * It means that the Health Ratio is greater than 1e18.\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\n      * @param ownedAssetsPrices An array of Asset/Price structs used to calculate weighted value of owned assets\n      * @param debtAssetsPrices An array of Asset/Price structs used to calculate value of the debt\n      * @param stakedPositionsPrices An array of Asset/Price structs used to calculate value of the staked positions\n    **/\n    function isSolventWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory debtAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view returns (bool) {\n        return getHealthRatioWithPrices(ownedAssetsPrices, debtAssetsPrices, stakedPositionsPrices) >= 1e18;\n    }\n\n    /**\n      * Returns an array of Asset/Price structs of staked positions.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getStakedPositionsPrices() public view returns(AssetPrice[] memory result) {\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n\n        bytes32[] memory symbols = new bytes32[](positions.length);\n        for(uint256 i=0; i<positions.length; i++) {\n            symbols[i] = positions[i].symbol;\n        }\n\n        uint256[] memory stakedPositionsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(symbols);\n        result = new AssetPrice[](stakedPositionsPrices.length);\n\n        for(uint i; i<stakedPositionsPrices.length; i++){\n            result[i] = AssetPrice({\n                asset: symbols[i],\n                price: stakedPositionsPrices[i]\n            });\n        }\n    }\n\n    /**\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\n    **/\n    function getDebtAssets() public view returns(bytes32[] memory result) {\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n        result = tokenManager.getAllPoolAssets();\n    }\n\n    /**\n      * Returns an array of Asset/Price structs of debt (borrowable) assets.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getDebtAssetsPrices() public view returns(AssetPrice[] memory result) {\n        bytes32[] memory debtAssets = getDebtAssets();\n\n        uint256[] memory debtAssetsPrices = getOracleNumericValuesFromTxMsg(debtAssets);\n        result = new AssetPrice[](debtAssetsPrices.length);\n\n        for(uint i; i<debtAssetsPrices.length; i++){\n            result[i] = AssetPrice({\n                asset: debtAssets[i],\n                price: debtAssetsPrices[i]\n            });\n        }\n    }\n\n    /**\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getOwnedAssetsPrices() public view returns(AssetPrice[] memory result) {\n        bytes32[] memory assetsEnriched = getOwnedAssetsEnriched();\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\n\n        result = new AssetPrice[](assetsEnriched.length);\n\n        for(uint i; i<assetsEnriched.length; i++){\n            result[i] = AssetPrice({\n                asset: assetsEnriched[i],\n                price: prices[i]\n            });\n        }\n    }\n\n    /**\n      * Returns an array of bytes32[] symbols of staked positions.\n    **/\n    function getStakedAssets() internal view returns (bytes32[] memory result) {\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n        result = new bytes32[](positions.length);\n        for(uint i; i<positions.length; i++) {\n            result[i] = positions[i].symbol;\n        }\n    }\n\n    /**\n      * Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay.\n      * Used during the liquidation process in order to obtain all necessary prices from calldata only once.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getAllPricesForLiquidation(bytes32[] calldata assetsToRepay) public view returns (CachedPrices memory result) {\n        bytes32[] memory ownedAssetsEnriched = getOwnedAssetsEnriched();\n        bytes32[] memory debtAssets = getDebtAssets();\n        bytes32[] memory stakedAssets = getStakedAssets();\n\n        bytes32[] memory allAssetsSymbols = new bytes32[](ownedAssetsEnriched.length + debtAssets.length + stakedAssets.length + assetsToRepay.length);\n        uint256 offset;\n\n        // Populate allAssetsSymbols with owned assets symbols\n        for(uint i; i<ownedAssetsEnriched.length; i++){\n            allAssetsSymbols[i] = ownedAssetsEnriched[i];\n        }\n        offset += ownedAssetsEnriched.length;\n\n        // Populate allAssetsSymbols with debt assets symbols\n        for(uint i; i<debtAssets.length; i++){\n            allAssetsSymbols[i+offset] = debtAssets[i];\n        }\n        offset += debtAssets.length;\n\n        // Populate allAssetsSymbols with staked assets symbols\n        for(uint i; i<stakedAssets.length; i++){\n            allAssetsSymbols[i+offset] = stakedAssets[i];\n        }\n        offset += stakedAssets.length;\n\n        // Populate allAssetsSymbols with assets to repay symbols\n        for(uint i; i<assetsToRepay.length; i++){\n            allAssetsSymbols[i+offset] = assetsToRepay[i];\n        }\n\n        uint256[] memory allAssetsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(allAssetsSymbols);\n\n        offset = 0;\n\n        // Populate ownedAssetsPrices struct\n        AssetPrice[] memory ownedAssetsPrices = new AssetPrice[](ownedAssetsEnriched.length);\n        for(uint i=0; i<ownedAssetsEnriched.length; i++){\n            ownedAssetsPrices[i] = AssetPrice({\n            asset: allAssetsSymbols[i+offset],\n            price: allAssetsPrices[i+offset]\n            });\n        }\n        offset += ownedAssetsEnriched.length;\n\n        // Populate debtAssetsPrices struct\n        AssetPrice[] memory debtAssetsPrices = new AssetPrice[](debtAssets.length);\n        for(uint i=0; i<debtAssets.length; i++){\n            debtAssetsPrices[i] = AssetPrice({\n            asset: allAssetsSymbols[i+offset],\n            price: allAssetsPrices[i+offset]\n            });\n        }\n        offset += debtAssetsPrices.length;\n\n        // Populate stakedPositionsPrices struct\n        AssetPrice[] memory stakedPositionsPrices = new AssetPrice[](stakedAssets.length);\n        for(uint i=0; i<stakedAssets.length; i++){\n            stakedPositionsPrices[i] = AssetPrice({\n            asset: allAssetsSymbols[i+offset],\n            price: allAssetsPrices[i+offset]\n            });\n        }\n        offset += stakedAssets.length;\n\n        // Populate assetsToRepayPrices struct\n        AssetPrice[] memory assetsToRepayPrices = new AssetPrice[](assetsToRepay.length);\n        for(uint i=0; i<assetsToRepay.length; i++){\n            assetsToRepayPrices[i] = AssetPrice({\n            asset: allAssetsSymbols[i+offset],\n            price: allAssetsPrices[i+offset]\n            });\n        }\n\n        result = CachedPrices({\n        ownedAssetsPrices: ownedAssetsPrices,\n        debtAssetsPrices: debtAssetsPrices,\n        stakedPositionsPrices: stakedPositionsPrices,\n        assetsToRepayPrices: assetsToRepayPrices\n        });\n    }\n\n    /**\n      * Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getPrices(bytes32[] memory symbols) external view returns (uint256[] memory) {\n        return getOracleNumericValuesFromTxMsg(symbols);\n    }\n\n    /**\n      * Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getPrice(bytes32 symbol) external view returns (uint256) {\n        return getOracleNumericValueFromTxMsg(symbol);\n    }\n\n    /**\n      * Returns TotalWeightedValue of OwnedAssets in USD based on the supplied array of Asset/Price struct, tokenBalance and maxTokenLeverage\n    **/\n    function _getTWVOwnedAssets(AssetPrice[] memory ownedAssetsPrices) internal view returns (uint256) {\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        uint256 weightedValueOfTokens;\n\n        if (ownedAssetsPrices.length > 0) {\n            // TODO: double check the decimals\n            weightedValueOfTokens = ownedAssetsPrices[0].price * address(this).balance * tokenManager.maxTokenLeverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\n\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\n                weightedValueOfTokens = weightedValueOfTokens + (ownedAssetsPrices[i].price * 10 ** 10 * token.balanceOf(address(this)) * tokenManager.maxTokenLeverage(address(token)) / (10 ** token.decimals() * 1e18));\n            }\n        }\n        return weightedValueOfTokens;\n    }\n\n    /**\n      * Returns TotalWeightedValue of StakedPositions in USD based on the supplied array of Asset/Price struct, positionBalance and maxTokenLeverage\n    **/\n    function _getTWVStakedPositions(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n\n        uint256 weightedValueOfStaked;\n\n        for (uint256 i; i < positions.length; i++) {\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \"Position-price symbol mismatch.\");\n\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\n\n            if (success) {\n                uint256 balance = abi.decode(result, (uint256));\n\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\n\n                weightedValueOfStaked += stakedPositionsPrices[i].price * 10 ** 10 * balance * tokenManager.maxTokenLeverage(positions[i].vault) / (10 ** token.decimals());\n            }\n        }\n        return weightedValueOfStaked;\n    }\n\n    function _getThresholdWeightedValueBase(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) internal view virtual returns (uint256) {\n        return _getTWVOwnedAssets(ownedAssetsPrices) + _getTWVStakedPositions(stakedPositionsPrices);\n    }\n\n    /**\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getThresholdWeightedValue() public view virtual returns (uint256) {\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsPrices();\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\n    }\n\n    /**\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\n    **/\n    function getThresholdWeightedValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\n    }\n\n\n    /**\n     * Returns the current debt from all lending pools\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getDebtBase(AssetPrice[] memory debtAssetsPrices) internal view returns (uint256){\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n        uint256 debt;\n\n        for (uint256 i; i < debtAssetsPrices.length; i++) {\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(debtAssetsPrices[i].asset, true));\n\n            Pool pool = Pool(tokenManager.getPoolAddress(debtAssetsPrices[i].asset));\n            //10**18 (wei in eth) / 10**8 (precision of oracle feed) = 10**10\n            debt = debt + pool.getBorrowed(address(this)) * debtAssetsPrices[i].price * 10 ** 10\n            / 10 ** token.decimals();\n        }\n\n        return debt;\n    }\n\n    /**\n     * Returns the current debt from all lending pools\n     * @dev This function uses the redstone-evm-connector\n    **/\n    function getDebt() public view virtual returns (uint256) {\n        AssetPrice[] memory debtAssetsPrices = getDebtAssetsPrices();\n        return getDebtBase(debtAssetsPrices);\n    }\n\n    /**\n     * Returns the current debt from all lending pools\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getDebtWithPrices(AssetPrice[] memory debtAssetsPrices) public view virtual returns (uint256) {\n        return getDebtBase(debtAssetsPrices);\n    }\n\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function _getTotalAssetsValueBase(AssetPrice[] memory ownedAssetsPrices) public view returns (uint256) {\n        if (ownedAssetsPrices.length > 0) {\n            TokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n            uint256 total = address(this).balance * ownedAssetsPrices[0].price / 10 ** 8;\n\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\n                uint256 assetBalance = token.balanceOf(address(this));\n\n                total = total + (ownedAssetsPrices[i].price * 10 ** 10 * assetBalance / (10 ** token.decimals()));\n            }\n            return total;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * @dev This function uses the redstone-evm-connector\n     **/\n    function getTotalAssetsValue() public view virtual returns (uint256) {\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsPrices();\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\n    }\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getTotalAssetsValueWithPrices(AssetPrice[] memory ownedAssetsPrices) public view virtual returns (uint256) {\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\n    }\n\n    /**\n      * Returns list of owned assets that always included NativeToken at index 0\n    **/\n    function getOwnedAssetsEnriched() public view returns(bytes32[] memory){\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\n\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\n        bytes32[] memory assetsEnriched = new bytes32[](numberOfAssets);\n\n        uint256 lastUsedIndex;\n        assetsEnriched[0] = nativeTokenSymbol; // First asset = NativeToken\n\n        for(uint i=0; i< ownedAssets.length; i++){\n            if(ownedAssets[i] != nativeTokenSymbol){\n                lastUsedIndex += 1;\n                assetsEnriched[lastUsedIndex] = ownedAssets[i];\n            }\n        }\n        return assetsEnriched;\n    }\n\n    /**\n     * Returns the current value of staked positions in USD.\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function _getStakedValueBase(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n\n        uint256 usdValue;\n\n        for (uint256 i; i < positions.length; i++) {\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \"Position-price symbol mismatch.\");\n\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\n\n            if (success) {\n                uint256 balance = abi.decode(result, (uint256));\n\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\n\n                usdValue += stakedPositionsPrices[i].price * 10 ** 10 * balance / (10 ** token.decimals());\n            }\n        }\n\n        return usdValue;\n    }\n\n    /**\n     * Returns the current value of staked positions in USD.\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getStakedValueWithPrices(AssetPrice[] memory stakedPositionsPrices) public view returns (uint256) {\n        return _getStakedValueBase(stakedPositionsPrices);\n    }\n\n    /**\n     * Returns the current value of staked positions in USD.\n     * @dev This function uses the redstone-evm-connector\n    **/\n    function getStakedValue() public view virtual returns (uint256) {\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\n        return _getStakedValueBase(stakedPositionsPrices);\n    }\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * @dev This function uses the redstone-evm-connector\n    **/\n    function getTotalValue() public view virtual returns (uint256) {\n        return getTotalAssetsValue() + getStakedValue();\n    }\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\n    **/\n    function getTotalValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\n        return getTotalAssetsValueWithPrices(ownedAssetsPrices) + getStakedValueWithPrices(stakedPositionsPrices);\n    }\n\n    function getFullLoanStatus() public view returns (uint256[5] memory) {\n        return [getTotalValue(), getDebt(), getThresholdWeightedValue(), getHealthRatio(), isSolvent() ? uint256(1) : uint256(0)];\n    }\n\n    /**\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\n     * by current debt\n     * @dev This function uses the redstone-evm-connector\n     **/\n    function getHealthRatio() public view virtual returns (uint256) {\n        uint256 debt = getDebt();\n        uint256 thresholdWeightedValue = getThresholdWeightedValue();\n\n        if (debt == 0) {\n            return type(uint256).max;\n        } else {\n            return thresholdWeightedValue * 1e18 / debt;\n        }\n    }\n\n    /**\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\n     * by current debt\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\n     **/\n    function getHealthRatioWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory debtAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\n        uint256 debt = getDebtWithPrices(debtAssetsPrices);\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(ownedAssetsPrices, stakedPositionsPrices);\n\n        if (debt == 0) {\n            return type(uint256).max;\n        } else {\n            return thresholdWeightedValue * 1e18 / debt;\n        }\n    }\n}\n"
    },
    "contracts/lib/DiamondStorageLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\nimport {IDiamondCut} from \"../interfaces/IDiamondCut.sol\";\nimport \"../lib/Bytes32EnumerableMap.sol\";\nimport \"../interfaces/IStakingPositions.sol\";\n\n// Remember to add the loupe functions from DiamondLoupeFacet to the diamond.\n// The loupe functions are required by the EIP2535 Diamonds standard\n\nlibrary DiamondStorageLib {\n    using EnumerableMap for EnumerableMap.Bytes32ToAddressMap;\n\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\"diamond.standard.diamond.storage\");\n    bytes32 constant SMARTLOAN_STORAGE_POSITION = keccak256(\"diamond.standard.smartloan.storage\");\n    bytes32 constant REENTRANCY_GUARD_STORAGE_POSITION = keccak256(\"diamond.standard.reentrancy.guard.storage\");\n\n    struct FacetAddressAndPosition {\n        address facetAddress;\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\n    }\n\n    struct FacetFunctionSelectors {\n        bytes4[] functionSelectors;\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\n    }\n\n    struct DiamondStorage {\n        // ----------- DIAMOND-SPECIFIC VARIABLES --------------\n        // maps function selector to the facet address and\n        // the position of the selector in the facetFunctionSelectors.selectors array\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\n        // maps facet addresses to function selectors\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\n        // facet addresses\n        address[] facetAddresses;\n        // Used to query if a contract implements an interface.\n        // Used to implement ERC-165.\n        mapping(bytes4 => bool) supportedInterfaces;\n\n        bool _initialized;\n        bool _active;\n    }\n\n    struct SmartLoanStorage {\n        // Owner of the contract\n        address contractOwner;\n        // Proposed owner of the contract\n        address proposedOwner;\n        // Is contract initialized?\n        bool _initialized;\n        // TODO: mock staking tokens until redstone oracle supports them\n        EnumerableMap.Bytes32ToAddressMap ownedAssets;\n        // Staked positions of the contract\n        IStakingPositions.StakedPosition[] currentStakedPositions;\n    }\n\n    struct ReentrancyGuardStorage {\n        uint256 _status;\n    }\n\n    function reentrancyGuardStorage() internal pure returns (ReentrancyGuardStorage storage rgs) {\n        bytes32 position = REENTRANCY_GUARD_STORAGE_POSITION;\n        assembly {\n            rgs.slot := position\n        }\n    }\n\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\n        bytes32 position = DIAMOND_STORAGE_POSITION;\n        assembly {\n            ds.slot := position\n        }\n    }\n\n    function smartLoanStorage() internal pure returns (SmartLoanStorage storage sls) {\n        bytes32 position = SMARTLOAN_STORAGE_POSITION;\n        assembly {\n            sls.slot := position\n        }\n    }\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    function setContractOwner(address _newOwner) internal {\n        SmartLoanStorage storage sls = smartLoanStorage();\n        address previousOwner = sls.contractOwner;\n        sls.contractOwner = _newOwner;\n        emit OwnershipTransferred(previousOwner, _newOwner);\n    }\n\n    function contractOwner() internal view returns (address contractOwner_) {\n        contractOwner_ = smartLoanStorage().contractOwner;\n    }\n\n    function setProposedOwner(address _newOwner) internal {\n        SmartLoanStorage storage sls = smartLoanStorage();\n        sls.proposedOwner = _newOwner;\n    }\n\n    function proposedOwner() internal view returns (address proposedOwner_) {\n        proposedOwner_ = smartLoanStorage().proposedOwner;\n    }\n\n    function stakedPositions() internal view returns (IStakingPositions.StakedPosition[] storage _positions) {\n        _positions = smartLoanStorage().currentStakedPositions;\n    }\n\n    function addStakedPosition(IStakingPositions.StakedPosition memory position) internal {\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\n\n        bool found;\n\n        for (uint256 i; i < positions.length; i++) {\n            if (positions[i].balanceSelector == position.balanceSelector) {\n                found = true;\n                break;\n            }\n        }\n\n        if (!found) {\n            positions.push(position);\n        }\n    }\n\n    function removeStakedPosition(bytes4 balanceSelector) internal {\n        IStakingPositions.StakedPosition[] storage positions = stakedPositions();\n\n        for (uint256 i; i < positions.length; i++) {\n            if (positions[i].balanceSelector == balanceSelector) {\n                positions[i] = positions[positions.length - 1];\n                positions.pop();\n            }\n        }\n    }\n\n    function addOwnedAsset(bytes32 _symbol, address _address) internal {\n        require(_symbol != \"\", \"Symbol cannot be empty\");\n        require(_address != address(0), \"Invalid AddressZero\");\n        SmartLoanStorage storage sls = smartLoanStorage();\n        EnumerableMap.set(sls.ownedAssets, _symbol, _address);\n    }\n\n    function hasAsset(bytes32 _symbol) internal view returns (bool){\n        SmartLoanStorage storage sls = smartLoanStorage();\n        return sls.ownedAssets.contains(_symbol);\n    }\n\n    function removeOwnedAsset(bytes32 _symbol) internal {\n        SmartLoanStorage storage sls = smartLoanStorage();\n        EnumerableMap.remove(sls.ownedAssets, _symbol);\n    }\n\n    function enforceIsContractOwner() internal view {\n        require(msg.sender == smartLoanStorage().contractOwner, \"DiamondStorageLib: Must be contract owner\");\n    }\n\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\n\n    // Internal function version of diamondCut\n    function diamondCut(\n        IDiamondCut.FacetCut[] memory _diamondCut,\n        address _init,\n        bytes memory _calldata\n    ) internal {\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\n            if (action == IDiamondCut.FacetCutAction.Add) {\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\n            } else {\n                revert(\"DiamondStorageLibCut: Incorrect FacetCutAction\");\n            }\n        }\n        emit DiamondCut(_diamondCut, _init, _calldata);\n        initializeDiamondCut(_init, _calldata);\n    }\n\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"DiamondStorageLibCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"DiamondStorageLibCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress == address(0), \"DiamondStorageLibCut: Can't add function that already exists\");\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"DiamondStorageLibCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        require(_facetAddress != address(0), \"DiamondStorageLibCut: Add facet can't be address(0)\");\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\n        // add new facet address if it does not exist\n        if (selectorPosition == 0) {\n            addFacet(ds, _facetAddress);\n        }\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            require(oldFacetAddress != _facetAddress, \"DiamondStorageLibCut: Can't replace function with same function\");\n            removeFunction(ds, oldFacetAddress, selector);\n            addFunction(ds, selector, selectorPosition, _facetAddress);\n            selectorPosition++;\n        }\n    }\n\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\n        require(_functionSelectors.length > 0, \"DiamondStorageLibCut: No selectors in facet to cut\");\n        DiamondStorage storage ds = diamondStorage();\n        // if function does not exist then do nothing and return\n        require(_facetAddress == address(0), \"DiamondStorageLibCut: Remove facet address must be address(0)\");\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\n            bytes4 selector = _functionSelectors[selectorIndex];\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\n            removeFunction(ds, oldFacetAddress, selector);\n        }\n    }\n\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\n        enforceHasContractCode(_facetAddress, \"DiamondStorageLibCut: New facet has no code\");\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\n        ds.facetAddresses.push(_facetAddress);\n    }\n\n\n    function addFunction(DiamondStorage storage ds, bytes4 _selector, uint96 _selectorPosition, address _facetAddress) internal {\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\n    }\n\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\n        require(_facetAddress != address(0), \"DiamondStorageLibCut: Can't remove function that doesn't exist\");\n        // an immutable function is a function defined directly in a diamond\n        require(_facetAddress != address(this), \"DiamondStorageLibCut: Can't remove immutable function\");\n        // replace selector with last selector, then delete last selector\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\n        // if not the same then replace _selector with lastSelector\n        if (selectorPosition != lastSelectorPosition) {\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\n        }\n        // delete the last selector\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\n        delete ds.selectorToFacetAndPosition[_selector];\n\n        // if no more selectors for facet address then delete the facet address\n        if (lastSelectorPosition == 0) {\n            // replace facet address with last facet address and delete last facet address\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n            if (facetAddressPosition != lastFacetAddressPosition) {\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\n            }\n            ds.facetAddresses.pop();\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\n        }\n    }\n\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\n        if (_init == address(0)) {\n            require(_calldata.length == 0, \"DiamondStorageLibCut: _init is address(0) but_calldata is not empty\");\n        } else {\n            require(_calldata.length > 0, \"DiamondStorageLibCut: _calldata is empty but _init is not address(0)\");\n            if (_init != address(this)) {\n                enforceHasContractCode(_init, \"DiamondStorageLibCut: _init address has no code\");\n            }\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\n            if (!success) {\n                if (error.length > 0) {\n                    // bubble up the error\n                    revert(string(error));\n                } else {\n                    revert(\"DiamondStorageLibCut: _init function reverted\");\n                }\n            }\n        }\n    }\n\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\n        uint256 contractSize;\n        assembly {\n            contractSize := extcodesize(_contract)\n        }\n        require(contractSize > 0, _errorMessage);\n    }\n}"
    },
    "contracts/interfaces/IDiamondCut.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\n/******************************************************************************\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\n/******************************************************************************/\n\ninterface IDiamondCut {\n    enum FacetCutAction {Add, Replace, Remove}\n    // Add=0, Replace=1, Remove=2\n\n    struct FacetCut {\n        address facetAddress;\n        FacetCutAction action;\n        bytes4[] functionSelectors;\n    }\n\n    /// @notice Add/replace/remove any number of functions and optionally execute\n    ///         a function with delegatecall\n    /// @param _diamondCut Contains the facet addresses and function selectors\n    /// @param _init The address of the contract or facet to execute _calldata\n    /// @param _calldata A function call, including function selector and arguments\n    ///                  _calldata is executed with delegatecall on _init\n    function diamondCut(\n        FacetCut[] calldata _diamondCut,\n        address _init,\n        bytes calldata _calldata\n    ) external;\n\n    function pause() external;\n\n    function unpause() external;\n\n    event DiamondCut(FacetCut[] _diamondCut, address _init, bytes _calldata);\n}"
    },
    "contracts/lib/Bytes32EnumerableMap.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\n//It's Open Zeppelin EnumerableMap library modified to accept bytes32 type as a key\n\n/**\n * @dev Library for managing an enumerable variant of Solidity's\n * https://solidity.readthedocs.io/en/latest/types.html#mapping-types[`mapping`]\n * type.\n *\n * Maps have the following properties:\n *\n * - Entries are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Entries are enumerated in O(n). No guarantees are made on the ordering.\n *\n */\nlibrary EnumerableMap {\n    using EnumerableSet for EnumerableSet.Bytes32Set;\n\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Map type with\n    // bytes32 keys and values.\n    // The Map implementation uses private functions, and user-facing\n    // implementations (such as Bytes32ToAddressMap) are just wrappers around\n    // the underlying Map.\n    // This means that we can only create new EnumerableMaps for types that fit\n    // in bytes32.\n\n    struct Map {\n        // Storage of keys\n        EnumerableSet.Bytes32Set _keys;\n        mapping(bytes32 => bytes32) _values;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function _set(\n        Map storage map,\n        bytes32 key,\n        bytes32 value\n    ) private returns (bool) {\n        map._values[key] = value;\n        return map._keys.add(key);\n    }\n\n    /**\n     * @dev Removes a key-value pair from a map. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function _remove(Map storage map, bytes32 key) private returns (bool) {\n        delete map._values[key];\n        return map._keys.remove(key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function _contains(Map storage map, bytes32 key) private view returns (bool) {\n        return map._keys.contains(key);\n    }\n\n    /**\n     * @dev Returns the number of key-value pairs in the map. O(1).\n     */\n    function _length(Map storage map) private view returns (uint256) {\n        return map._keys.length();\n    }\n\n    /**\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\n     *\n     * Note that there are no guarantees on the ordering of entries inside the\n     * array, and it may change when more entries are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Map storage map, uint256 index) private view returns (bytes32, bytes32) {\n        bytes32 key = map._keys.at(index);\n        return (key, map._values[key]);\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     */\n    function _tryGet(Map storage map, bytes32 key) private view returns (bool, bytes32) {\n        bytes32 value = map._values[key];\n        if (value == bytes32(0)) {\n            return (_contains(map, key), bytes32(0));\n        } else {\n            return (true, value);\n        }\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function _get(Map storage map, bytes32 key) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || _contains(map, key), \"EnumerableMap: nonexistent key\");\n        return value;\n    }\n\n    /**\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {_tryGet}.\n     */\n    function _get(\n        Map storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) private view returns (bytes32) {\n        bytes32 value = map._values[key];\n        require(value != 0 || _contains(map, key), errorMessage);\n        return value;\n    }\n\n    // Bytes32ToAddressMap\n\n    struct Bytes32ToAddressMap {\n        Map _inner;\n    }\n\n    /**\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\n     * key. O(1).\n     *\n     * Returns true if the key was added to the map, that is if it was not\n     * already present.\n     */\n    function set(\n        Bytes32ToAddressMap storage map,\n        bytes32 key,\n        address value\n    ) internal returns (bool) {\n        return _set(map._inner, key, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the key was removed from the map, that is if it was present.\n     */\n    function remove(Bytes32ToAddressMap storage map, bytes32 key) internal returns (bool) {\n        return _remove(map._inner, key);\n    }\n\n    /**\n     * @dev Returns true if the key is in the map. O(1).\n     */\n    function contains(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool) {\n        return _contains(map._inner, key);\n    }\n\n    /**\n     * @dev Returns the number of elements in the map. O(1).\n     */\n    function length(Bytes32ToAddressMap storage map) internal view returns (uint256) {\n        return _length(map._inner);\n    }\n\n    /**\n     * @dev Returns the element stored at position `index` in the set. O(1).\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32ToAddressMap storage map, uint256 index) internal view returns (bytes32, address) {\n        (bytes32 key, bytes32 value) = _at(map._inner, index);\n        return (key, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Tries to returns the value associated with `key`.  O(1).\n     * Does not revert if `key` is not in the map.\n     *\n     * _Available since v3.4._\n     */\n    function tryGet(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (bool, address) {\n        (bool success, bytes32 value) = _tryGet(map._inner, key);\n        return (success, address(uint160(uint256(value))));\n    }\n\n    /**\n     * @dev Returns the value associated with `key`.  O(1).\n     *\n     * Requirements:\n     *\n     * - `key` must be in the map.\n     */\n    function get(Bytes32ToAddressMap storage map, bytes32 key) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, key))));\n    }\n\n    /**\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryGet}.\n     */\n    function get(\n        Bytes32ToAddressMap storage map,\n        bytes32 key,\n        string memory errorMessage\n    ) internal view returns (address) {\n        return address(uint160(uint256(_get(map._inner, key, errorMessage))));\n    }\n}\n"
    },
    "contracts/interfaces/IStakingPositions.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\n/**\n * @title IStakingPositions\n * Types for staking\n */\ninterface IStakingPositions {\n    struct StakedPosition {\n        address vault;\n        bytes32 symbol;\n        bytes4 balanceSelector;\n        bytes4 unstakeSelector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport \"./RedstoneConstants.sol\";\nimport \"./CalldataExtractor.sol\";\n\n/**\n * @title The base contract for forwarding redstone payload to other contracts\n * @author The Redstone Oracles team\n */\ncontract ProxyConnector is RedstoneConstants, CalldataExtractor {\n  error ProxyCalldataFailedWithoutErrMsg();\n  error ProxyCalldataFailedWithStringMessage(string message);\n  error ProxyCalldataFailedWithCustomError(bytes result);\n\n  function proxyCalldata(\n    address contractAddress,\n    bytes memory encodedFunction,\n    bool forwardValue\n  ) internal returns (bytes memory) {\n    bytes memory message = _prepareMessage(encodedFunction);\n\n    (bool success, bytes memory result) =\n      contractAddress.call{value: forwardValue ? msg.value : 0}(message);\n\n    return _prepareReturnValue(success, result);\n  }\n\n  function proxyDelegateCalldata(address contractAddress, bytes memory encodedFunction)\n    internal\n    returns (bytes memory)\n  {\n    bytes memory message = _prepareMessage(encodedFunction);\n    (bool success, bytes memory result) = contractAddress.delegatecall(message);\n    return _prepareReturnValue(success, result);\n  }\n\n  function proxyCalldataView(address contractAddress, bytes memory encodedFunction)\n    internal\n    view\n    returns (bytes memory)\n  {\n    bytes memory message = _prepareMessage(encodedFunction);\n    (bool success, bytes memory result) = contractAddress.staticcall(message);\n    return _prepareReturnValue(success, result);\n  }\n\n  function _prepareMessage(bytes memory encodedFunction) private pure returns (bytes memory) {\n    uint256 encodedFunctionBytesCount = encodedFunction.length;\n    uint256 redstonePayloadByteSize = _getRedstonePayloadByteSize();\n    uint256 resultMessageByteSize = encodedFunctionBytesCount + redstonePayloadByteSize;\n\n    if (redstonePayloadByteSize > msg.data.length) {\n      revert CalldataOverOrUnderFlow();\n    }\n\n    bytes memory message;\n\n    assembly {\n      message := mload(FREE_MEMORY_PTR) // sets message pointer to first free place in memory\n\n      // Saving the byte size of the result message (it's a standard in EVM)\n      mstore(message, resultMessageByteSize)\n\n      // Copying function and its arguments\n      for {\n        let from := add(BYTES_ARR_LEN_VAR_BS, encodedFunction)\n        let fromEnd := add(from, encodedFunctionBytesCount)\n        let to := add(BYTES_ARR_LEN_VAR_BS, message)\n      } lt (from, fromEnd) {\n        from := add(from, STANDARD_SLOT_BS)\n        to := add(to, STANDARD_SLOT_BS)\n      } {\n        // Copying data from encodedFunction to message (32 bytes at a time)\n        mstore(to, mload(from))\n      }\n\n      // Copying redstone payload to the message bytes\n      calldatacopy(\n        add(message, add(BYTES_ARR_LEN_VAR_BS, encodedFunctionBytesCount)), // address\n        sub(calldatasize(), redstonePayloadByteSize), // offset\n        redstonePayloadByteSize // bytes length to copy\n      )\n\n      // Updating free memory pointer\n      mstore(\n        FREE_MEMORY_PTR,\n        add(\n          add(message, add(redstonePayloadByteSize, encodedFunctionBytesCount)),\n          BYTES_ARR_LEN_VAR_BS\n        )\n      )\n    }\n\n    return message;\n  }\n\n  function _getRedstonePayloadByteSize() private pure returns (uint256) {\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\n      uint256 dataPackageByteSize = _getDataPackageByteSize(calldataNegativeOffset);\n      calldataNegativeOffset += dataPackageByteSize;\n    }\n\n    return calldataNegativeOffset;\n  }\n\n  function _getDataPackageByteSize(uint256 calldataNegativeOffset) private pure returns (uint256) {\n    (\n      uint256 dataPointsCount,\n      uint256 eachDataPointValueByteSize\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\n\n    return\n      dataPointsCount *\n      (DATA_POINT_SYMBOL_BS + eachDataPointValueByteSize) +\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\n  }\n\n\n  function _prepareReturnValue(bool success, bytes memory result)\n    internal\n    pure\n    returns (bytes memory)\n  {\n    if (!success) {\n\n      if (result.length == 0) {\n        revert ProxyCalldataFailedWithoutErrMsg();\n      } else {\n        bool isStringErrorMessage;\n        assembly {\n          let first32BytesOfResult := mload(add(result, BYTES_ARR_LEN_VAR_BS))\n          isStringErrorMessage := eq(first32BytesOfResult, STRING_ERR_MESSAGE_MASK)\n        }\n\n        if (isStringErrorMessage) {\n          string memory receivedErrMsg;\n          assembly {\n            receivedErrMsg := add(result, REVERT_MSG_OFFSET)\n          }\n          revert ProxyCalldataFailedWithStringMessage(receivedErrMsg);\n        } else {\n          revert ProxyCalldataFailedWithCustomError(result);\n        }\n      }\n    }\n\n    return result;\n  }\n}\n"
    },
    "contracts/DiamondHelper.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 97d6cc3cb60bfd6feda4ea784b13bf0e7daac710;\npragma solidity 0.8.17;\n\nimport \"./interfaces/IDiamondBeacon.sol\";\n\n//This path is updated during deployment\nimport \"./lib/avalanche/DeploymentConstants.sol\";\n\n/**\n * DiamondHelper\n * Helper methods\n **/\ncontract DiamondHelper {\n    function _getFacetAddress(bytes4 methodSelector) internal view returns (address solvencyFacetAddress) {\n        solvencyFacetAddress = IDiamondBeacon(payable(DeploymentConstants.getDiamondAddress())).implementation(methodSelector);\n    }\n}"
    },
    "@redstone-finance/evm-connector/contracts/core/RedstoneConstants.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\n/**\n * @title The base contract with helpful constants\n * @author The Redstone Oracles team\n * @dev It mainly contains redstone-related values, which improve readability\n * of other contracts (e.g. CalldataExtractor and RedstoneConsumerBase)\n */\ncontract RedstoneConstants {\n  // === Abbreviations ===\n  // BS - Bytes size\n  // PTR - Pointer (memory location)\n  // SIG - Signature\n\n  // Solidity and YUL constants\n  uint256 internal constant STANDARD_SLOT_BS = 32;\n  uint256 internal constant FREE_MEMORY_PTR = 0x40;\n  uint256 internal constant BYTES_ARR_LEN_VAR_BS = 32;\n  uint256 internal constant FUNCTION_SIGNATURE_BS = 4;\n  uint256 internal constant REVERT_MSG_OFFSET = 68; // Revert message structure described here: https://ethereum.stackexchange.com/a/66173/106364\n  uint256 internal constant STRING_ERR_MESSAGE_MASK = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n\n  // RedStone protocol consts\n  uint256 internal constant SIG_BS = 65;\n  uint256 internal constant TIMESTAMP_BS = 6;\n  uint256 internal constant DATA_PACKAGES_COUNT_BS = 2;\n  uint256 internal constant DATA_POINTS_COUNT_BS = 3;\n  uint256 internal constant DATA_POINT_VALUE_BYTE_SIZE_BS = 4;\n  uint256 internal constant DATA_POINT_SYMBOL_BS = 32;\n  uint256 internal constant DEFAULT_DATA_POINT_VALUE_BS = 32;\n  uint256 internal constant UNSGINED_METADATA_BYTE_SIZE_BS = 3;\n  uint256 internal constant REDSTONE_MARKER_BS = 9; // byte size of 0x000002ed57011e0000\n  uint256 internal constant REDSTONE_MARKER_MASK = 0x0000000000000000000000000000000000000000000000000002ed57011e0000;\n\n  // Derived values (based on consts)\n  uint256 internal constant TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS = 104; // SIG_BS + DATA_POINTS_COUNT_BS + DATA_POINT_VALUE_BYTE_SIZE_BS + STANDARD_SLOT_BS\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_BS = 78; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS + SIG_BS\n  uint256 internal constant DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS = 13; // DATA_POINT_VALUE_BYTE_SIZE_BS + TIMESTAMP_BS + DATA_POINTS_COUNT_BS\n  uint256 internal constant REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS = 41; // REDSTONE_MARKER_BS + STANDARD_SLOT_BS\n\n  // Error messages\n  error CalldataOverOrUnderFlow();\n  error IncorrectUnsignedMetadataSize();\n  error InsufficientNumberOfUniqueSigners(uint256 receviedSignersCount, uint256 requiredSignersCount);\n  error EachSignerMustProvideTheSameValue();\n  error EmptyCalldataPointersArr();\n  error InvalidCalldataPointer();\n  error CalldataMustHaveValidPayload();\n  error SignerNotAuthorised(address receivedSigner);\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/core/CalldataExtractor.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./RedstoneConstants.sol\";\n\n/**\n * @title The base contract with the main logic of data extraction from calldata\n * @author The Redstone Oracles team\n * @dev This contract was created to reuse the same logic in the RedstoneConsumerBase\n * and the ProxyConnector contracts\n */\ncontract CalldataExtractor is RedstoneConstants {\n  using SafeMath for uint256;\n\n  function _extractByteSizeOfUnsignedMetadata() internal pure returns (uint256) {\n    // Checking if the calldata ends with the RedStone marker\n    bool hasValidRedstoneMarker;\n    assembly {\n      let calldataLast32Bytes := calldataload(sub(calldatasize(), STANDARD_SLOT_BS))\n      hasValidRedstoneMarker := eq(\n        REDSTONE_MARKER_MASK,\n        and(calldataLast32Bytes, REDSTONE_MARKER_MASK)\n      )\n    }\n    if (!hasValidRedstoneMarker) {\n      revert CalldataMustHaveValidPayload();\n    }\n\n    // Using uint24, because unsigned metadata byte size number has 3 bytes\n    uint24 unsignedMetadataByteSize;\n    if (REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS > msg.data.length) {\n      revert CalldataOverOrUnderFlow();\n    }\n    assembly {\n      unsignedMetadataByteSize := calldataload(\n        sub(calldatasize(), REDSTONE_MARKER_BS_PLUS_STANDARD_SLOT_BS)\n      )\n    }\n    uint256 calldataNegativeOffset = unsignedMetadataByteSize\n      + UNSGINED_METADATA_BYTE_SIZE_BS\n      + REDSTONE_MARKER_BS;\n    if (calldataNegativeOffset + DATA_PACKAGES_COUNT_BS > msg.data.length) {\n      revert IncorrectUnsignedMetadataSize();\n    }\n    return calldataNegativeOffset;\n  }\n\n  // We return uint16, because unsigned metadata byte size number has 2 bytes\n  function _extractDataPackagesCountFromCalldata(uint256 calldataNegativeOffset)\n    internal\n    pure\n    returns (uint16 dataPackagesCount)\n  {\n    uint256 calldataNegativeOffsetWithStandardSlot = calldataNegativeOffset + STANDARD_SLOT_BS;\n    if (calldataNegativeOffsetWithStandardSlot > msg.data.length) {\n      revert CalldataOverOrUnderFlow();\n    }\n    assembly {\n      dataPackagesCount := calldataload(\n        sub(calldatasize(), calldataNegativeOffsetWithStandardSlot)\n      )\n    }\n    return dataPackagesCount;\n  }\n\n  function _extractDataPointValueAndDataFeedId(\n    uint256 calldataNegativeOffsetForDataPackage,\n    uint256 defaultDataPointValueByteSize,\n    uint256 dataPointIndex\n  ) internal pure virtual returns (bytes32 dataPointDataFeedId, uint256 dataPointValue) {\n    uint256 negativeOffsetToDataPoints = calldataNegativeOffsetForDataPackage + DATA_PACKAGE_WITHOUT_DATA_POINTS_BS;\n    uint256 dataPointNegativeOffset = negativeOffsetToDataPoints.add(\n      (1 + dataPointIndex).mul((defaultDataPointValueByteSize + DATA_POINT_SYMBOL_BS))\n    );\n    uint256 dataPointCalldataOffset = msg.data.length.sub(dataPointNegativeOffset);\n    assembly {\n      dataPointDataFeedId := calldataload(dataPointCalldataOffset)\n      dataPointValue := calldataload(add(dataPointCalldataOffset, DATA_POINT_SYMBOL_BS))\n    }\n  }\n\n  function _extractDataPointsDetailsForDataPackage(uint256 calldataNegativeOffsetForDataPackage)\n    internal\n    pure\n    returns (uint256 dataPointsCount, uint256 eachDataPointValueByteSize)\n  {\n    // Using uint24, because data points count byte size number has 3 bytes\n    uint24 dataPointsCount_;\n\n    // Using uint32, because data point value byte size has 4 bytes\n    uint32 eachDataPointValueByteSize_;\n\n    // Extract data points count\n    uint256 negativeCalldataOffset = calldataNegativeOffsetForDataPackage + SIG_BS;\n    uint256 calldataOffset = msg.data.length.sub(negativeCalldataOffset + STANDARD_SLOT_BS);\n    assembly {\n      dataPointsCount_ := calldataload(calldataOffset)\n    }\n\n    // Extract each data point value size\n    calldataOffset = calldataOffset.sub(DATA_POINTS_COUNT_BS);\n    assembly {\n      eachDataPointValueByteSize_ := calldataload(calldataOffset)\n    }\n\n    // Prepare returned values\n    dataPointsCount = dataPointsCount_;\n    eachDataPointValueByteSize = eachDataPointValueByteSize_;\n  }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/math/SafeMath.sol)\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}\n"
    },
    "redstone-evm-connector/lib/contracts/message-based/PriceAware.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.2;\n\nimport \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n\nabstract contract PriceAware {\n  using ECDSA for bytes32;\n\n  uint256 constant _MAX_DATA_TIMESTAMP_DELAY = 3 * 60; // 3 minutes\n  uint256 constant _MAX_BLOCK_TIMESTAMP_DELAY = 15; // 15 seconds\n\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\n\n  function getMaxDataTimestampDelay() public virtual view returns (uint256) {\n    return _MAX_DATA_TIMESTAMP_DELAY;\n  }\n\n  function getMaxBlockTimestampDelay() public virtual view returns (uint256) {\n    return _MAX_BLOCK_TIMESTAMP_DELAY;\n  }\n\n  function isSignerAuthorized(address _receviedSigner) public virtual view returns (bool);\n\n  function isTimestampValid(uint256 _receivedTimestamp) public virtual view returns (bool) {\n    // Getting data timestamp from future seems quite unlikely\n    // But we've already spent too much time with different cases\n    // Where block.timestamp was less than dataPackage.timestamp.\n    // Some blockchains may case this problem as well.\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\n    // and allow data \"from future\" but with a small delay\n    require(\n      (block.timestamp + getMaxBlockTimestampDelay()) > _receivedTimestamp,\n      \"Data with future timestamps is not allowed\");\n\n    return block.timestamp < _receivedTimestamp\n      || block.timestamp - _receivedTimestamp < getMaxDataTimestampDelay();\n  }\n\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\n\n  function getPriceFromMsg(bytes32 symbol) internal view returns (uint256) {bytes32[] memory symbols = new bytes32[](1); symbols[0] = symbol;\n    return getPricesFromMsg(symbols)[0];\n  }\n\n  function getPricesFromMsg(bytes32[] memory symbols) internal view returns (uint256[] memory) {\n    // The structure of calldata witn n - data items:\n    // The data that is signed (symbols, values, timestamp) are inside the {} brackets\n    // [origina_call_data| ?]{[[symbol | 32][value | 32] | n times][timestamp | 32]}[size | 1][signature | 65]\n\n    // 1. First we extract dataSize - the number of data items (symbol,value pairs) in the message\n    uint8 dataSize; //Number of data entries\n    assembly {\n      // Calldataload loads slots of 32 bytes\n      // The last 65 bytes are for signature\n      // We load the previous 32 bytes and automatically take the 2 least significant ones (casting to uint16)\n      dataSize := calldataload(sub(calldatasize(), 97))\n    }\n\n    // 2. We calculate the size of signable message expressed in bytes\n    // ((symbolLen(32) + valueLen(32)) * dataSize + timeStamp length\n    uint16 messageLength = uint16(dataSize) * 64 + 32; //Length of data message in bytes\n\n    // 3. We extract the signableMessage\n\n    // (That's the high level equivalent 2k gas more expensive)\n    // bytes memory rawData = msg.data.slice(msg.data.length - messageLength - 65, messageLength);\n\n    bytes memory signableMessage;\n    assembly {\n      signableMessage := mload(0x40)\n      mstore(signableMessage, messageLength)\n      // The starting point is callDataSize minus length of data(messageLength), signature(65) and size(1) = 66\n      calldatacopy(\n        add(signableMessage, 0x20),\n        sub(calldatasize(), add(messageLength, 66)),\n        messageLength\n      )\n      mstore(0x40, add(signableMessage, 0x20))\n    }\n\n    // 4. We first hash the raw message and then hash it again with the prefix\n    // Following the https://github.com/ethereum/eips/issues/191 standard\n    bytes32 hash = keccak256(signableMessage);\n    bytes32 hashWithPrefix = keccak256(\n      abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash)\n    );\n\n    // 5. We extract the off-chain signature from calldata\n\n    // (That's the high level equivalent 2k gas more expensive)\n    // bytes memory signature = msg.data.slice(msg.data.length - 65, 65);\n    bytes memory signature;\n    assembly {\n      signature := mload(0x40)\n      mstore(signature, 65)\n      calldatacopy(add(signature, 0x20), sub(calldatasize(), 65), 65)\n      mstore(0x40, add(signature, 0x20))\n    }\n\n    // 6. We verify the off-chain signature against on-chain hashed data\n\n    address signer = hashWithPrefix.recover(signature);\n    require(isSignerAuthorized(signer), \"Signer not authorized\");\n\n    // 7. We extract timestamp from callData\n\n    uint256 dataTimestamp;\n    assembly {\n      // Calldataload loads slots of 32 bytes\n      // The last 65 bytes are for signature + 1 for data size\n      // We load the previous 32 bytes\n      dataTimestamp := calldataload(sub(calldatasize(), 98))\n    }\n\n    // 8. We validate timestamp\n    require(isTimestampValid(dataTimestamp), \"Data timestamp is invalid\");\n\n    return _readFromCallData(symbols, uint256(dataSize), messageLength);\n  }\n\n  function _readFromCallData(bytes32[] memory symbols, uint256 dataSize, uint16 messageLength) private pure returns (uint256[] memory) {\n    uint256[] memory values;\n    uint256 i;\n    uint256 j;\n    uint256 readyAssets;\n    bytes32 currentSymbol;\n\n    // We iterate directly through call data to extract the values for symbols\n    assembly {\n      let start := sub(calldatasize(), add(messageLength, 66))\n\n      values := msize()\n      mstore(values, mload(symbols))\n      mstore(0x40, add(add(values, 0x20), mul(mload(symbols), 0x20)))\n\n      for { i := 0 } lt(i, mload(symbols)) { i := add(i, 1) } {\n        currentSymbol := mload(add(add(symbols, 32), mul(i, 32)))\n        for { j := 0 } lt(j, dataSize) { j := add(j, 1) } {\n          if eq(calldataload(add(start, mul(j, 64))), currentSymbol) {\n            mstore(\n              add(add(values, 32), mul(i, 32)),\n              calldataload(add(add(start, mul(j, 64)), 32))\n            )\n            readyAssets := add(readyAssets, 1)\n          }\n\n          if eq(readyAssets, mload(symbols)) {\n            i := dataSize\n          }\n        }\n      }\n\n    }\n\n    return (values);\n  }\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "contracts/oracle/RSOracleProd3Signers.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\";\n\ncontract RSOracleProd3Signers is AvalancheDataServiceConsumerBase {\n    function getUniqueSignersThreshold() public view virtual override returns (uint8) {\n        return 3;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport \"../core/RedstoneConsumerNumericBase.sol\";\n\ncontract AvalancheDataServiceConsumerBase is RedstoneConsumerNumericBase {\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\n    return 10;\n  }\n\n  function getAuthorisedSignerIndex(address signerAddress)\n    public\n    view\n    virtual\n    override\n    returns (uint8)\n  {\n    if (signerAddress == 0x981bdA8276ae93F567922497153de7A5683708d3) {\n      return 0;\n    } else if (signerAddress == 0x3BEFDd935b50F172e696A5187DBaCfEf0D208e48) {\n      return 1;\n    } else if (signerAddress == 0xc1D5b940659e57b7bDF8870CDfC43f41Ca699460) {\n      return 2;\n    } else if (signerAddress == 0x1Cd8F9627a2838a7DAE6b98CF71c08B9CbF5174a) {\n      return 3;\n    } else if (signerAddress == 0xbC5a06815ee80dE7d20071703C1F1B8fC511c7d4) {\n      return 4;\n    } else if (signerAddress == 0xe9Fa2869C5f6fC3A0933981825564FD90573A86D) {\n      return 5;\n    } else if (signerAddress == 0xDf6b1cA313beE470D0142279791Fa760ABF5C537) {\n      return 6;\n    } else if (signerAddress == 0xa50abc5D76dAb99d5fe59FD32f239Bd37d55025f) {\n      return 7;\n    } else if (signerAddress == 0x496f4E8aC11076350A59b88D2ad62bc20d410EA3) {\n      return 8;\n    } else if (signerAddress == 0x41FB6b8d0f586E73d575bC57CFD29142B3214A47) {\n      return 9;\n    } else if (signerAddress == 0xC1068312a6333e6601f937c4773065B70D38A5bF) {\n      return 10;\n    } else if (signerAddress == 0xAE9D49Ea64DF38B9fcbC238bc7004a1421f7eeE8) {\n      return 11;\n    } else {\n      revert SignerNotAuthorised(signerAddress);\n    }\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/core/RedstoneConsumerNumericBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport \"./RedstoneConsumerBase.sol\";\n\n/**\n * @title The base contract for Redstone consumers' contracts that allows to\n * securely calculate numeric redstone oracle values\n * @author The Redstone Oracles team\n * @dev This contract can extend other contracts to allow them\n * securely fetch Redstone oracle data from transactions calldata\n */\nabstract contract RedstoneConsumerNumericBase is RedstoneConsumerBase {\n  /**\n   * @dev This function can be used in a consumer contract to securely extract an\n   * oracle value for a given data feed id. Security is achieved by\n   * signatures verification, timestamp validation, and aggregating values\n   * from different authorised signers into a single numeric value. If any of the\n   * required conditions do not match, the function will revert.\n   * Note! This function expects that tx calldata contains redstone payload in the end\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\n   * @param dataFeedId bytes32 value that uniquely identifies the data feed\n   * @return Extracted and verified numeric oracle value for the given data feed id\n   */\n  function getOracleNumericValueFromTxMsg(bytes32 dataFeedId)\n    internal\n    view\n    virtual\n    returns (uint256)\n  {\n    bytes32[] memory dataFeedIds = new bytes32[](1);\n    dataFeedIds[0] = dataFeedId;\n    return getOracleNumericValuesFromTxMsg(dataFeedIds)[0];\n  }\n\n  /**\n   * @dev This function can be used in a consumer contract to securely extract several\n   * numeric oracle values for a given array of data feed ids. Security is achieved by\n   * signatures verification, timestamp validation, and aggregating values\n   * from different authorised signers into a single numeric value. If any of the\n   * required conditions do not match, the function will revert.\n   * Note! This function expects that tx calldata contains redstone payload in the end\n   * Learn more about redstone payload here: https://github.com/redstone-finance/redstone-oracles-monorepo/tree/main/packages/evm-connector#readme\n   * @param dataFeedIds An array of unique data feed identifiers\n   * @return An array of the extracted and verified oracle values in the same order\n   * as they are requested in the dataFeedIds array\n   */\n  function getOracleNumericValuesFromTxMsg(bytes32[] memory dataFeedIds)\n    internal\n    view\n    virtual\n    returns (uint256[] memory)\n  {\n    return _securelyExtractOracleValuesFromTxMsg(dataFeedIds);\n  }\n\n  /**\n   * @dev This function works similarly to the `getOracleNumericValuesFromTxMsg` with the\n   * only difference that it allows to request oracle data for an array of data feeds\n   * that may contain duplicates\n   * \n   * @param dataFeedIdsWithDuplicates An array of data feed identifiers (duplicates are allowed)\n   * @return An array of the extracted and verified oracle values in the same order\n   * as they are requested in the dataFeedIdsWithDuplicates array\n   */\n  function getOracleNumericValuesWithDuplicatesFromTxMsg(bytes32[] memory dataFeedIdsWithDuplicates) internal view returns (uint256[] memory) {\n    // Building an array without duplicates\n    bytes32[] memory dataFeedIdsWithoutDuplicates = new bytes32[](dataFeedIdsWithDuplicates.length);\n    bool alreadyIncluded;\n    uint256 uniqueDataFeedIdsCount = 0;\n\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\n      // Checking if current element is already included in `dataFeedIdsWithoutDuplicates`\n      alreadyIncluded = false;\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\n        if (dataFeedIdsWithoutDuplicates[indexWithoutDup] == dataFeedIdsWithDuplicates[indexWithDup]) {\n          alreadyIncluded = true;\n          break;\n        }\n      }\n\n      // Adding if not included\n      if (!alreadyIncluded) {\n        dataFeedIdsWithoutDuplicates[uniqueDataFeedIdsCount] = dataFeedIdsWithDuplicates[indexWithDup];\n        uniqueDataFeedIdsCount++;\n      }\n    }\n\n    // Overriding dataFeedIdsWithoutDuplicates.length\n    // Equivalent to: dataFeedIdsWithoutDuplicates.length = uniqueDataFeedIdsCount;\n    assembly {\n      mstore(dataFeedIdsWithoutDuplicates, uniqueDataFeedIdsCount)\n    }\n\n    // Requesting oracle values (without duplicates)\n    uint256[] memory valuesWithoutDuplicates = getOracleNumericValuesFromTxMsg(dataFeedIdsWithoutDuplicates);\n\n    // Preparing result values array\n    uint256[] memory valuesWithDuplicates = new uint256[](dataFeedIdsWithDuplicates.length);\n    for (uint256 indexWithDup = 0; indexWithDup < dataFeedIdsWithDuplicates.length; indexWithDup++) {\n      for (uint256 indexWithoutDup = 0; indexWithoutDup < dataFeedIdsWithoutDuplicates.length; indexWithoutDup++) {\n        if (dataFeedIdsWithDuplicates[indexWithDup] == dataFeedIdsWithoutDuplicates[indexWithoutDup]) {\n          valuesWithDuplicates[indexWithDup] = valuesWithoutDuplicates[indexWithoutDup];\n          break;\n        }\n      }\n    }\n\n    return valuesWithDuplicates;\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/core/RedstoneConsumerBase.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nimport \"./RedstoneConstants.sol\";\nimport \"./RedstoneDefaultsLib.sol\";\nimport \"./CalldataExtractor.sol\";\nimport \"../libs/BitmapLib.sol\";\nimport \"../libs/SignatureLib.sol\";\n\n/**\n * @title The base contract with the main Redstone logic\n * @author The Redstone Oracles team\n * @dev Do not use this contract directly in consumer contracts, take a\n * look at `RedstoneConsumerNumericBase` and `RedstoneConsumerBytesBase` instead\n */\nabstract contract RedstoneConsumerBase is CalldataExtractor {\n  using SafeMath for uint256;\n\n  /* ========== VIRTUAL FUNCTIONS (MAY BE OVERRIDEN IN CHILD CONTRACTS) ========== */\n\n  /**\n   * @dev This function must be implemented by the child consumer contract.\n   * It should return a unique index for a given signer address if the signer\n   * is authorised, otherwise it should revert\n   * @param receviedSigner The address of a signer, recovered from ECDSA signature\n   * @return Unique index for a signer in the range [0..255]\n   */\n  function getAuthorisedSignerIndex(address receviedSigner) public view virtual returns (uint8);\n\n  /**\n   * @dev This function may be overriden by the child consumer contract.\n   * It should validate the timestamp against the current time (block.timestamp)\n   * It should revert with a helpful message if the timestamp is not valid\n   * @param receivedTimestampMilliseconds Timestamp extracted from calldata\n   */\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual {\n    RedstoneDefaultsLib.validateTimestamp(receivedTimestampMilliseconds);\n  }\n\n  /**\n   * @dev This function should be overriden by the child consumer contract.\n   * @return The minimum required value of unique authorised signers\n   */\n  function getUniqueSignersThreshold() public view virtual returns (uint8) {\n    return 1;\n  }\n\n  /**\n   * @dev This function may be overriden by the child consumer contract.\n   * It should aggregate values from different signers to a single uint value.\n   * By default, it calculates the median value\n   * @param values An array of uint256 values from different signers\n   * @return Result of the aggregation in the form of a single number\n   */\n  function aggregateValues(uint256[] memory values) public view virtual returns (uint256) {\n    return RedstoneDefaultsLib.aggregateValues(values);\n  }\n\n  /* ========== FUNCTIONS WITH IMPLEMENTATION (CAN NOT BE OVERRIDEN) ========== */\n\n  /**\n   * @dev This is an internal helpful function for secure extraction oracle values\n   * from the tx calldata. Security is achieved by signatures verification, timestamp\n   * validation, and aggregating values from different authorised signers into a\n   * single numeric value. If any of the required conditions (e.g. too old timestamp or\n   * insufficient number of autorised signers) do not match, the function will revert.\n   *\n   * Note! You should not call this function in a consumer contract. You can use\n   * `getOracleNumericValuesFromTxMsg` or `getOracleNumericValueFromTxMsg` instead.\n   *\n   * @param dataFeedIds An array of unique data feed identifiers\n   * @return An array of the extracted and verified oracle values in the same order\n   * as they are requested in dataFeedIds array\n   */\n  function _securelyExtractOracleValuesFromTxMsg(bytes32[] memory dataFeedIds)\n    internal\n    view\n    returns (uint256[] memory)\n  {\n    // Initializing helpful variables and allocating memory\n    uint256[] memory uniqueSignerCountForDataFeedIds = new uint256[](dataFeedIds.length);\n    uint256[] memory signersBitmapForDataFeedIds = new uint256[](dataFeedIds.length);\n    uint256[][] memory valuesForDataFeeds = new uint256[][](dataFeedIds.length);\n    for (uint256 i = 0; i < dataFeedIds.length; i++) {\n      // The line below is commented because newly allocated arrays are filled with zeros\n      // But we left it for better readability\n      // signersBitmapForDataFeedIds[i] = 0; // <- setting to an empty bitmap\n      valuesForDataFeeds[i] = new uint256[](getUniqueSignersThreshold());\n    }\n\n    // Extracting the number of data packages from calldata\n    uint256 calldataNegativeOffset = _extractByteSizeOfUnsignedMetadata();\n    uint256 dataPackagesCount = _extractDataPackagesCountFromCalldata(calldataNegativeOffset);\n    calldataNegativeOffset += DATA_PACKAGES_COUNT_BS;\n\n    // Saving current free memory pointer\n    uint256 freeMemPtr;\n    assembly {\n      freeMemPtr := mload(FREE_MEMORY_PTR)\n    }\n\n    // Data packages extraction in a loop\n    for (uint256 dataPackageIndex = 0; dataPackageIndex < dataPackagesCount; dataPackageIndex++) {\n      // Extract data package details and update calldata offset\n      uint256 dataPackageByteSize = _extractDataPackage(\n        dataFeedIds,\n        uniqueSignerCountForDataFeedIds,\n        signersBitmapForDataFeedIds,\n        valuesForDataFeeds,\n        calldataNegativeOffset\n      );\n      calldataNegativeOffset += dataPackageByteSize;\n\n      // Shifting memory pointer back to the \"safe\" value\n      assembly {\n        mstore(FREE_MEMORY_PTR, freeMemPtr)\n      }\n    }\n\n    // Validating numbers of unique signers and calculating aggregated values for each dataFeedId\n    return _getAggregatedValues(valuesForDataFeeds, uniqueSignerCountForDataFeedIds);\n  }\n\n  /**\n   * @dev This is a private helpful function, which extracts data for a data package based\n   * on the given negative calldata offset, verifies them, and in the case of successful\n   * verification updates the corresponding data package values in memory\n   *\n   * @param dataFeedIds an array of unique data feed identifiers\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\n   * for each data feed\n   * @param signersBitmapForDataFeedIds an array of sginers bitmaps for data feeds\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\n   * j-th value for the i-th data feed\n   * @param calldataNegativeOffset negative calldata offset for the given data package\n   *\n   * @return An array of the aggregated values\n   */\n  function _extractDataPackage(\n    bytes32[] memory dataFeedIds,\n    uint256[] memory uniqueSignerCountForDataFeedIds,\n    uint256[] memory signersBitmapForDataFeedIds,\n    uint256[][] memory valuesForDataFeeds,\n    uint256 calldataNegativeOffset\n  ) private view returns (uint256) {\n    uint256 signerIndex;\n\n    (\n      uint256 dataPointsCount,\n      uint256 eachDataPointValueByteSize\n    ) = _extractDataPointsDetailsForDataPackage(calldataNegativeOffset);\n\n    // We use scopes to resolve problem with too deep stack\n    {\n      uint48 extractedTimestamp;\n      address signerAddress;\n      bytes32 signedHash;\n      bytes memory signedMessage;\n      uint256 signedMessageBytesCount;\n\n      signedMessageBytesCount = dataPointsCount.mul(eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS)\n        + DATA_PACKAGE_WITHOUT_DATA_POINTS_AND_SIG_BS;\n\n      uint256 timestampCalldataOffset = msg.data.length.sub(\n        calldataNegativeOffset + TIMESTAMP_NEGATIVE_OFFSET_IN_DATA_PACKAGE_WITH_STANDARD_SLOT_BS);\n\n      uint256 signedMessageCalldataOffset = msg.data.length.sub(\n        calldataNegativeOffset + SIG_BS + signedMessageBytesCount);\n\n      assembly {\n        // Extracting the signed message\n        signedMessage := extractBytesFromCalldata(\n          signedMessageCalldataOffset,\n          signedMessageBytesCount\n        )\n\n        // Hashing the signed message\n        signedHash := keccak256(add(signedMessage, BYTES_ARR_LEN_VAR_BS), signedMessageBytesCount)\n\n        // Extracting timestamp\n        extractedTimestamp := calldataload(timestampCalldataOffset)\n\n        function initByteArray(bytesCount) -> ptr {\n          ptr := mload(FREE_MEMORY_PTR)\n          mstore(ptr, bytesCount)\n          ptr := add(ptr, BYTES_ARR_LEN_VAR_BS)\n          mstore(FREE_MEMORY_PTR, add(ptr, bytesCount))\n        }\n\n        function extractBytesFromCalldata(offset, bytesCount) -> extractedBytes {\n          let extractedBytesStartPtr := initByteArray(bytesCount)\n          calldatacopy(\n            extractedBytesStartPtr,\n            offset,\n            bytesCount\n          )\n          extractedBytes := sub(extractedBytesStartPtr, BYTES_ARR_LEN_VAR_BS)\n        }\n      }\n\n      // Validating timestamp\n      validateTimestamp(extractedTimestamp);\n\n      // Verifying the off-chain signature against on-chain hashed data\n      signerAddress = SignatureLib.recoverSignerAddress(\n        signedHash,\n        calldataNegativeOffset + SIG_BS\n      );\n      signerIndex = getAuthorisedSignerIndex(signerAddress);\n    }\n\n    // Updating helpful arrays\n    {\n      bytes32 dataPointDataFeedId;\n      uint256 dataPointValue;\n      for (uint256 dataPointIndex = 0; dataPointIndex < dataPointsCount; dataPointIndex++) {\n        // Extracting data feed id and value for the current data point\n        (dataPointDataFeedId, dataPointValue) = _extractDataPointValueAndDataFeedId(\n          calldataNegativeOffset,\n          eachDataPointValueByteSize,\n          dataPointIndex\n        );\n\n        for (\n          uint256 dataFeedIdIndex = 0;\n          dataFeedIdIndex < dataFeedIds.length;\n          dataFeedIdIndex++\n        ) {\n          if (dataPointDataFeedId == dataFeedIds[dataFeedIdIndex]) {\n            uint256 bitmapSignersForDataFeedId = signersBitmapForDataFeedIds[dataFeedIdIndex];\n\n            if (\n              !BitmapLib.getBitFromBitmap(bitmapSignersForDataFeedId, signerIndex) && /* current signer was not counted for current dataFeedId */\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex] < getUniqueSignersThreshold()\n            ) {\n              // Increase unique signer counter\n              uniqueSignerCountForDataFeedIds[dataFeedIdIndex]++;\n\n              // Add new value\n              valuesForDataFeeds[dataFeedIdIndex][\n                uniqueSignerCountForDataFeedIds[dataFeedIdIndex] - 1\n              ] = dataPointValue;\n\n              // Update signers bitmap\n              signersBitmapForDataFeedIds[dataFeedIdIndex] = BitmapLib.setBitInBitmap(\n                bitmapSignersForDataFeedId,\n                signerIndex\n              );\n            }\n\n            // Breaking, as there couldn't be several indexes for the same feed ID\n            break;\n          }\n        }\n      }\n    }\n\n    // Return total data package byte size\n    return\n      DATA_PACKAGE_WITHOUT_DATA_POINTS_BS +\n      (eachDataPointValueByteSize + DATA_POINT_SYMBOL_BS) *\n      dataPointsCount;\n  }\n\n  /**\n   * @dev This is a private helpful function, which aggregates values from different\n   * authorised signers for the given arrays of values for each data feed\n   *\n   * @param valuesForDataFeeds 2-dimensional array, valuesForDataFeeds[i][j] contains\n   * j-th value for the i-th data feed\n   * @param uniqueSignerCountForDataFeedIds an array with the numbers of unique signers\n   * for each data feed\n   *\n   * @return An array of the aggregated values\n   */\n  function _getAggregatedValues(\n    uint256[][] memory valuesForDataFeeds,\n    uint256[] memory uniqueSignerCountForDataFeedIds\n  ) private view returns (uint256[] memory) {\n    uint256[] memory aggregatedValues = new uint256[](valuesForDataFeeds.length);\n    uint256 uniqueSignersThreshold = getUniqueSignersThreshold();\n\n    for (uint256 dataFeedIndex = 0; dataFeedIndex < valuesForDataFeeds.length; dataFeedIndex++) {\n      if (uniqueSignerCountForDataFeedIds[dataFeedIndex] < uniqueSignersThreshold) {\n        revert InsufficientNumberOfUniqueSigners(\n          uniqueSignerCountForDataFeedIds[dataFeedIndex],\n          uniqueSignersThreshold);\n      }\n      uint256 aggregatedValueForDataFeedId = aggregateValues(valuesForDataFeeds[dataFeedIndex]);\n      aggregatedValues[dataFeedIndex] = aggregatedValueForDataFeedId;\n    }\n\n    return aggregatedValues;\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/core/RedstoneDefaultsLib.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity ^0.8.4;\n\nimport \"../libs/NumericArrayLib.sol\";\n\n/**\n * @title Default implementations of virtual redstone consumer base functions\n * @author The Redstone Oracles team\n */\nlibrary RedstoneDefaultsLib {\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 3 minutes;\n  uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS = 1 minutes;\n\n  error TimestampFromTooLongFuture(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\n  error TimestampIsTooOld(uint256 receivedTimestampSeconds, uint256 blockTimestamp);\n\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) internal view {\n    // Getting data timestamp from future seems quite unlikely\n    // But we've already spent too much time with different cases\n    // Where block.timestamp was less than dataPackage.timestamp.\n    // Some blockchains may case this problem as well.\n    // That's why we add MAX_BLOCK_TIMESTAMP_DELAY\n    // and allow data \"from future\" but with a small delay\n    uint256 receivedTimestampSeconds = receivedTimestampMilliseconds / 1000;\n    bool isFromFuture = block.timestamp < receivedTimestampSeconds;\n\n    if ((block.timestamp + DEFAULT_MAX_DATA_TIMESTAMP_AHEAD_SECONDS) < receivedTimestampSeconds) {\n      revert TimestampFromTooLongFuture(receivedTimestampSeconds, block.timestamp);\n    }\n    if (!isFromFuture && (block.timestamp - receivedTimestampSeconds) > DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS) {\n      revert TimestampIsTooOld(receivedTimestampSeconds, block.timestamp);\n    }\n  }\n\n  function aggregateValues(uint256[] memory values) internal pure returns (uint256) {\n    return NumericArrayLib.pickMedian(values);\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/libs/BitmapLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary BitmapLib {\n  function setBitInBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (uint256) {\n    return bitmap | (1 << bitIndex);\n  }\n\n  function getBitFromBitmap(uint256 bitmap, uint256 bitIndex) internal pure returns (bool) {\n    uint256 bitAtIndex = bitmap & (1 << bitIndex);\n    return bitAtIndex > 0;\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/libs/SignatureLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nlibrary SignatureLib {\n  uint256 constant ECDSA_SIG_R_BS = 32;\n  uint256 constant ECDSA_SIG_S_BS = 32;\n\n  function recoverSignerAddress(bytes32 signedHash, uint256 signatureCalldataNegativeOffset)\n    internal\n    pure\n    returns (address)\n  {\n    bytes32 r;\n    bytes32 s;\n    uint8 v;\n    assembly {\n      let signatureCalldataStartPos := sub(calldatasize(), signatureCalldataNegativeOffset)\n      r := calldataload(signatureCalldataStartPos)\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_R_BS)\n      s := calldataload(signatureCalldataStartPos)\n      signatureCalldataStartPos := add(signatureCalldataStartPos, ECDSA_SIG_S_BS)\n      v := byte(0, calldataload(signatureCalldataStartPos)) // last byte of the signature memory array\n    }\n    return ecrecover(signedHash, v, r, s);\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/libs/NumericArrayLib.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/utils/math/SafeMath.sol\";\n\nlibrary NumericArrayLib {\n  // This function sort array in memory using bubble sort algorithm,\n  // which performs even better than quick sort for small arrays\n\n  uint256 constant BYTES_ARR_LEN_VAR_BS = 32;\n  uint256 constant UINT256_VALUE_BS = 32;\n\n  error CanNotPickMedianOfEmptyArray();\n\n  // This function modifies the array\n  function pickMedian(uint256[] memory arr) internal pure returns (uint256) {\n    if (arr.length == 0) {\n      revert CanNotPickMedianOfEmptyArray();\n    }\n    sort(arr);\n    uint256 middleIndex = arr.length / 2;\n    if (arr.length % 2 == 0) {\n      uint256 sum = SafeMath.add(arr[middleIndex - 1], arr[middleIndex]);\n      return sum / 2;\n    } else {\n      return arr[middleIndex];\n    }\n  }\n\n  function sort(uint256[] memory arr) internal pure {\n    assembly {\n      let arrLength := mload(arr)\n      let valuesPtr := add(arr, BYTES_ARR_LEN_VAR_BS)\n      let endPtr := add(valuesPtr, mul(arrLength, UINT256_VALUE_BS))\n      for {\n        let arrIPtr := valuesPtr\n      } lt(arrIPtr, endPtr) {\n        arrIPtr := add(arrIPtr, UINT256_VALUE_BS) // arrIPtr += 32\n      } {\n        for {\n          let arrJPtr := valuesPtr\n        } lt(arrJPtr, arrIPtr) {\n          arrJPtr := add(arrJPtr, UINT256_VALUE_BS) // arrJPtr += 32\n        } {\n          let arrI := mload(arrIPtr)\n          let arrJ := mload(arrJPtr)\n          if lt(arrI, arrJ) {\n            mstore(arrIPtr, arrJ)\n            mstore(arrJPtr, arrI)\n          }\n        }\n      }\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IIndex.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\ninterface IIndex {\n\n    function setRate(uint256 _rate) external;\n\n    function updateUser(address user) external;\n\n    function getIndex() external view returns (uint256);\n\n    function getIndexedValue(uint256 value, address user) external view returns (uint256);\n\n}\n"
    },
    "contracts/interfaces/IRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\n/**\n * @title IRatesCalculator\n * @dev Interface defining base method for contracts implementing interest rates calculation.\n * The calculated value could be based on the relation between funds borrowed and deposited.\n */\ninterface IRatesCalculator {\n    function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\n\n    function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IBorrowersRegistry.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\n/**\n * @title IBorrowersRegistry\n * Keeps a registry of created trading accounts to verify their borrowing rights\n */\ninterface IBorrowersRegistry {\n    function canBorrow(address _account) external view returns (bool);\n\n    function getLoanForOwner(address _owner) external view returns (address);\n\n    function getOwnerOfLoan(address _loan) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IPoolRewarder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity ^0.8.17;\n\ninterface IPoolRewarder {\n\n    function stakeFor(uint _amount, address _stakeFor) external;\n\n    function withdrawFor(uint _amount, address _unstakeFor) external;\n\n    function getRewardsFor(address _user) external;\n\n    function earned(address _account) external view returns (uint);\n\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/interfaces/IDiamondBeacon.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity 0.8.17;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IDiamondBeacon {\n\n    function implementation() external view returns (address);\n\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {SmartLoanDiamondProxy} will check that this address is a contract.\n     */\n    function implementation(bytes4) external view returns (address);\n\n    function getStatus() external view returns (bool);\n}\n"
    },
    "contracts/RedstoneConfigManager.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract RedstoneConfigManager is Ownable {\n    mapping(address => bool) internal signerAuthorized;\n    address[] public trustedSigners;\n\n    constructor(address[] memory _trustedSigners) {\n        for (uint256 i = 0; i < _trustedSigners.length; i++) {\n            require(!signerExists(_trustedSigners[i]), \"Signer already exists\");\n            _addTrustedSigner(_trustedSigners[i]);\n        }\n    }\n\n    function getTrustedSigners() external view returns (address[] memory) {\n        return trustedSigners;\n    }\n\n    function signerExists(address signer) public view returns (bool) {\n        return signerAuthorized[signer];\n    }\n\n    function addTrustedSigners(address[] memory _trustedSigners) public onlyOwner {\n        for (uint256 i = 0; i < _trustedSigners.length; i++) {\n            require(!signerExists(_trustedSigners[i]), \"Signer already exists\");\n            _addTrustedSigner(_trustedSigners[i]);\n            emit SignerAdded(msg.sender, _trustedSigners[i], block.timestamp);\n        }\n    }\n\n    function _addTrustedSigner(address newSigner) private {\n        signerAuthorized[newSigner] = true;\n        trustedSigners.push(newSigner);\n    }\n\n    function removeTrustedSigners(address[] memory _trustedSigners) public onlyOwner {\n        for (uint256 i = 0; i < _trustedSigners.length; i++) {\n            require(signerExists(_trustedSigners[i]), \"Signer does not exists\");\n            _removeTrustedSigner(_trustedSigners[i]);\n            emit SignerRemoved(msg.sender, _trustedSigners[i], block.timestamp);\n        }\n    }\n\n    function _removeTrustedSigner(address signerToRemove) private {\n        // Signer is no longer authorized\n        signerAuthorized[signerToRemove] = false;\n\n        // Remove signerToRemove from the trustedSigners list\n        for (uint256 i = 0; i < trustedSigners.length; i++) {\n            // Lookup signerToRemove position in the trustedSigners list\n            if (trustedSigners[i] == signerToRemove) {\n                // If signerToRemove is not at the last place in the list, copy last list's element to it's place\n                if (i != trustedSigners.length - 1) {\n                    trustedSigners[i] = trustedSigners[trustedSigners.length - 1];\n                }\n                // Remove last list's element\n                trustedSigners.pop();\n            }\n        }\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    // EVENTS\n    /**\n    * @dev emitted after adding a signer\n    * @param user performing the transaction\n    * @param signer address of added signer\n    * @param timestamp of change\n    **/\n    event SignerAdded(address indexed user, address signer, uint256 timestamp);\n\n    /**\n    * @dev emitted after removing a signer\n    * @param user performing the transaction\n    * @param signer address of removed signer\n    * @param timestamp of change\n    **/\n    event SignerRemoved(address indexed user, address signer, uint256 timestamp);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/integrations/celo/UbeswapIntermediary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"../UniswapV2Intermediary.sol\";\nimport \"../../lib/avalanche/DeploymentConstants.sol\";\n\n/**\n * @title UbeswapIntermediary\n * @dev Contract allows user to swap ERC20 tokens on DEX\n * This implementation uses the Ubeswap DEX\n */\ncontract UbeswapIntermediary is UniswapV2Intermediary {\n\n  /**\n   * Returns a path containing tokens' addresses\n   * @dev _token ERC20 token's address\n   **/\n  function getPath(address _token1, address _token2) internal override pure returns (address[] memory) {\n    address[] memory path;\n    path = new address[](2);\n    path[0] = _token1;\n    path[1] = _token2;\n\n    return path;\n  }\n\n  function getNativeTokenAddress() override internal pure returns (address) {\n    return DeploymentConstants.getNativeToken();\n  }\n}"
    },
    "contracts/integrations/UniswapV2Intermediary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity 0.8.17;\n\nimport \"@uniswap/v2-periphery/contracts/interfaces/IUniswapV2Router01.sol\";\nimport \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../ReentrancyGuardKeccak.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../interfaces/IAssetsExchange.sol\";\nimport \"../TokenList.sol\";\n\n/**\n * @title UniswapV2Intermediary\n * @dev Contract allows user to swap ERC20 tokens on DEX\n * This implementation supports UniswapV2-like DEXs\n */\ncontract UniswapV2Intermediary is TokenListOwnableUpgreadable, IAssetsExchange, ReentrancyGuardKeccak {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    /* ========= STATE VARIABLES ========= */\n    IUniswapV2Router01 router;\n    IUniswapV2Factory factory;\n\n    function initialize(address _router, address[] memory _whitelistedTokens) external initializer {\n        router = IUniswapV2Router01(_router);\n        factory = IUniswapV2Factory(router.factory());\n\n        __TokenList_init(_whitelistedTokens);\n    }\n\n    /*\n     * Swaps selected ERC20 token with other ERC20 token\n     * @param soldToken_ sold ERC20 token's address\n     * @param boughtToken_ bought ERC20 token's address\n     * @param _exactSold exact amount of ERC20 token to be sold\n     * @param _minimumBought minimum amount of ERC20 token to be bought\n     **/\n    function swap(address _soldToken, address _boughtToken, uint256 _exactSold, uint256 _minimumBought) external override nonReentrant returns (uint256[] memory amounts) {\n        require(_exactSold > 0, \"Amount of tokens to sell has to be greater than 0\");\n\n        _soldToken.safeApprove(address(router), 0);\n        _soldToken.safeApprove(address(router), _exactSold);\n\n        require(isTokenWhitelisted[_boughtToken], 'Trying to buy unsupported token');\n\n        if (_minimumBought > 0) {\n            require(_exactSold >= getMinimumTokensNeeded(_minimumBought, _soldToken, _boughtToken), \"Not enough funds were provided\");\n        }\n\n        amounts = router.swapExactTokensForTokens(_exactSold, _minimumBought, getPath(_soldToken, _boughtToken), msg.sender, block.timestamp);\n\n        _soldToken.safeTransfer(msg.sender, IERC20Metadata(_soldToken).balanceOf(address(this)));\n\n        return amounts;\n    }\n\n\n    /*\n     * addLiquidity selected ERC20 tokens\n     **/\n    function addLiquidity(address tokenA, address tokenB, uint amountA, uint amountB, uint amountAMin, uint amountBMin) external override nonReentrant returns (address, uint, uint, uint) {\n        require(amountA > 0, \"amountADesired has to be greater than 0\");\n        require(amountB > 0, \"amountBDesired to sell has to be greater than 0\");\n        require(amountAMin > 0, \"amountAMin has to be greater than 0\");\n        require(amountBMin > 0, \"amountBMin has to be greater than 0\");\n\n        tokenA.safeApprove(address(router), amountA);\n        tokenB.safeApprove(address(router), amountB);\n\n        address lpTokenAddress = getPair(tokenA, tokenB);\n\n        require(isTokenWhitelisted[tokenA], 'Trying to LP unsupported token');\n        require(isTokenWhitelisted[tokenB], 'Trying to LP unsupported token');\n        require(isTokenWhitelisted[lpTokenAddress], 'Trying to add unsupported LP token');\n\n        uint liquidity;\n        (amountA, amountB, liquidity) =\n           router.addLiquidity(tokenA, tokenB, amountA, amountB, amountAMin, amountBMin, address(this), block.timestamp);\n\n        lpTokenAddress.safeTransfer(msg.sender, IERC20Metadata(lpTokenAddress).balanceOf(address(this)));\n        tokenA.safeTransfer(msg.sender, IERC20Metadata(tokenA).balanceOf(address(this)));\n        tokenB.safeTransfer(msg.sender, IERC20Metadata(tokenB).balanceOf(address(this)));\n\n        return (lpTokenAddress, amountA, amountB, liquidity);\n    }\n\n\n    /*\n     *  removeLiquidity selected ERC20 tokens\n     **/\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountA, uint amountB) external override nonReentrant returns (uint, uint) {\n        require(amountA > 0, \"amountA has to be greater than 0\");\n        require(amountB > 0, \"amountB has to be greater than 0\");\n\n        address lpTokenAddress = getPair(tokenA, tokenB);\n\n        lpTokenAddress.safeApprove(address(router), liquidity);\n\n        require(isTokenWhitelisted[tokenA], 'Trying to remove LP of unsupported token');\n        require(isTokenWhitelisted[tokenB], 'Trying to remove LP of unsupported token');\n        //TODO: handle paused LP tokens\n        require(isTokenWhitelisted[lpTokenAddress], 'Trying to remove unsupported LP token');\n\n        (amountA, amountB) =\n         router.removeLiquidity(tokenA, tokenB, liquidity, amountA, amountB, address(this), block.timestamp);\n\n        lpTokenAddress.safeTransfer(msg.sender, IERC20Metadata(lpTokenAddress).balanceOf(address(this)));\n        tokenA.safeTransfer(msg.sender, IERC20Metadata(tokenA).balanceOf(address(this)));\n        tokenB.safeTransfer(msg.sender, IERC20Metadata(tokenB).balanceOf(address(this)));\n\n        return (amountA, amountB);\n    }\n\n\n    /* ========== RECEIVE AVAX FUNCTION ========== */\n    receive() external payable {}\n\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * Returns the minimum _soldToken amount that is required to be sold to receive _exactAmountOut of a _boughtToken.\n     * Can revert due to insufficient liquidity\n     **/\n    function getMinimumTokensNeeded(uint256 _exactAmountOut, address _soldToken, address _boughtToken) public view override returns (uint256) {\n        address[] memory path = getPath(_soldToken, _boughtToken);\n\n        (bool success, bytes memory result) = address(router).staticcall(\n            abi.encodeWithSignature(\"getAmountsIn(uint256,address[])\", _exactAmountOut, path)\n        );\n\n        require(success, \"Error when calculating amounts needed\");\n\n        uint256[] memory amounts = abi.decode(result, (uint256[]));\n\n        return amounts[0];\n    }\n\n    /**\n     * Returns the maximum _boughtToken amount that will be obtained in the event of selling _amountIn of _soldToken token.\n     **/\n    function getMaximumTokensReceived(uint256 _amountIn, address _soldToken, address _boughtToken) public view override returns (uint256) {\n        address[] memory path = getPath(_soldToken, _boughtToken);\n\n        return router.getAmountsOut(_amountIn, path)[1];\n    }\n\n    /**\n     * Returns a path containing tokens' addresses\n     * @param _token1 ERC20 token's address\n     * @param _token2 ERC20 token's address\n     **/\n    function getPath(address _token1, address _token2) internal virtual view returns (address[] memory) {\n        address[] memory path;\n\n        if (_token1 != getNativeTokenAddress() && _token2 != getNativeTokenAddress()) {\n            path = new address[](3);\n            path[0] = _token1;\n            path[1] = getNativeTokenAddress();\n            path[2] = _token2;\n        } else {\n            path = new address[](2);\n            path[0] = _token1;\n            path[1] = _token2;\n        }\n\n        return path;\n    }\n\n    /**\n     * Returns an address of LP token\n     * @param _token1 ERC20 token's address\n     * @param _token2 ERC20 token's address\n     **/\n    function getPair(address _token1, address _token2) public virtual view returns (address) {\n        return factory.getPair(_token1, _token2);\n    }\n\n    function getNativeTokenAddress() virtual internal view returns (address) {\n        //address of WETH9 on Ethereum network. Must be overriden in implementations on other chains\n        return 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\n    }\n}"
    },
    "@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "pragma solidity >=0.5.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\n\n    function feeTo() external view returns (address);\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n    function allPairs(uint) external view returns (address pair);\n    function allPairsLength() external view returns (uint);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IAssetsExchange.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * @title IAssetExchange\n * @dev Basic interface for investing into assets\n * It could be linked either to DEX or to a synthetic assets platform\n */\ninterface IAssetsExchange {\n\n    /*\n     * Swaps selected ERC20 token with other ERC20 token\n     * @param soldToken_ sold ERC20 token's address\n     * @param boughtToken_ bought ERC20 token's address\n     * @param _amountSold exact amount of ERC20 token to be sold\n     * @param _amountBought minimum amount of ERC20 token to be bought\n     **/\n    function swap(address soldToken_, address boughtToken_, uint256 _exactAmountIn, uint256 _minAmountOut) external returns (uint256[] memory);\n\n    /*\n     * Adds liquidity of ERC20 tokens\n     */\n    function addLiquidity(address tokenA, address tokenB, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) external returns (address, uint, uint, uint);\n\n    /*\n     * Removes liquidity of ERC20 tokens\n     */\n    function removeLiquidity(address tokenA, address tokenB, uint liquidity, uint amountAMin, uint amountBMin) external returns (uint, uint);\n\n    /**\n     * Returns the minimum _soldToken amount that is required to be sold to receive _exactAmountOut of a _boughtToken.\n     **/\n    function getMinimumTokensNeeded(uint256 _exactAmountOut, address _soldToken, address _boughtToken) external returns (uint256);\n\n    /**\n     * Returns the maximum _boughtToken amount that will be obtained in the event of selling _amountIn of _soldToken token.\n     **/\n    function getMaximumTokensReceived(uint256 _amountIn, address _soldToken, address _boughtToken) external returns (uint256);\n\n    /**\n     * getPair\n     **/\n    function getPair(address _tokenA, address _tokenB) external returns (address);\n\n}\n"
    },
    "contracts/TokenList.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity >=0.7.0 <0.9.0;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\n\ncontract TokenListOwnableUpgreadable is OwnableUpgradeable {\n    mapping(address => bool) isTokenWhitelisted;\n    mapping(address => uint256) tokenPositionInList;\n    address[] whitelistedTokensList;\n\n    function __TokenList_init(address[] memory _whitelistedTokens) internal onlyInitializing {\n        for (uint256 i = 0; i < _whitelistedTokens.length; i++) {\n            require(_whitelistToken(_whitelistedTokens[i], false), \"Whitelisting token failed\");\n        }\n\n        __Ownable_init();\n    }\n\n    // PUBLIC MUTATIVE FUNCTIONS\n\n    function whitelistTokens(address[] memory tokensToWhitelist) public onlyOwner {\n        for (uint256 i = 0; i < tokensToWhitelist.length; i++) {\n            require(_whitelistToken(tokensToWhitelist[i], true), \"Whitelisting token failed\");\n        }\n    }\n\n    function delistTokens(address[] memory tokensToDelist) public onlyOwner {\n        for (uint256 i = 0; i < tokensToDelist.length; i++) {\n            require(_delistToken(tokensToDelist[i], true), \"Delisting token failed\");\n        }\n    }\n\n    // PUBLIC VIEW FUNCTIONS\n\n    function getAllWhitelistedTokens() public view returns (address[] memory) {\n        return whitelistedTokensList;\n    }\n\n    // Already auto-generated because of the public visibility modifier\n    // function isTokenWhitelisted(address token) public view returns (bool) {\n    //     return isTokenWhitelisted[token];\n    // }\n\n    // INTERNAL MUTATIVE FUNCTIONS\n\n    function _whitelistToken(address token, bool revertOnDuplicates) internal returns (bool){\n        require(token != address(0), \"Cannot whitelist a zero address\");\n\n        if (!isTokenWhitelisted[token]) {\n            whitelistedTokensList.push(token);\n            tokenPositionInList[token] = whitelistedTokensList.length - 1;\n            isTokenWhitelisted[token] = true;\n            emit TokenWhitelisted(msg.sender, token, block.timestamp);\n            return true;\n\n        } else if (revertOnDuplicates) {\n            revert(\"Token already whitelisted\");\n        }\n        return false;\n    }\n\n    function _delistToken(address token, bool revertOnNonListedTokens) internal returns (bool){\n        if (isTokenWhitelisted[token]) {\n            _removeTokenFromList(token);\n            isTokenWhitelisted[token] = false;\n            emit TokenDelisted(msg.sender, token, block.timestamp);\n            return true;\n\n        } else if (revertOnNonListedTokens) {\n            revert(\"Token was not whitelisted before\");\n        }\n        return false;\n    }\n\n    // INTERNAL HELPER MUTATIVE FUNCTIONS\n\n    function _removeTokenFromList(address tokenToRemove) internal {\n        // Move last address token to the `tokenToRemoveIndex` position (index of an asset that is being removed) in the address[] whitelistedTokensList\n        // and update map(address=>uint256) tokenPostitionInList if the token is not already the last element\n        uint256 tokenToRemoveIndex = tokenPositionInList[tokenToRemove];\n        if (tokenToRemoveIndex != (whitelistedTokensList.length - 1)) {\n            address currentLastToken = whitelistedTokensList[whitelistedTokensList.length - 1];\n            tokenPositionInList[currentLastToken] = tokenToRemoveIndex;\n            whitelistedTokensList[tokenToRemoveIndex] = currentLastToken;\n        }\n        // Remove last element - that is either the token that is being removed (if was already at the end)\n        // or some other asset that at this point was already copied to the `index` positon\n        whitelistedTokensList.pop();\n        tokenPositionInList[tokenToRemove] = 0;\n    }\n\n    // EVENTS\n    /**\n    * @dev emitted after whitelisting a token\n    * @param user performing the transaction\n    * @param token address of whitelisted token\n    * @param timestamp of change\n    **/\n    event TokenWhitelisted(address indexed user, address token, uint256 timestamp);\n\n    /**\n    * @dev emitted after delisting a token\n    * @param user performing the transaction\n    * @param token address of delisted token\n    * @param timestamp of change\n    **/\n    event TokenDelisted(address indexed user, address token, uint256 timestamp);\n}"
    },
    "contracts/integrations/avalanche/TraderJoeIntermediary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\npragma solidity 0.8.17;\n\nimport \"../UniswapV2Intermediary.sol\";\nimport \"../../lib/avalanche/DeploymentConstants.sol\";\n\n/**\n * @title TraderJoeIntermediary\n * @dev Contract allows user to swap ERC20 tokens on DEX\n * This implementation uses the TraderJoe DEX\n */\ncontract TraderJoeIntermediary is UniswapV2Intermediary {\n\n    function getNativeTokenAddress() override internal pure returns (address) {\n        return DeploymentConstants.getNativeToken();\n    }\n}"
    },
    "contracts/integrations/avalanche/PangolinIntermediary.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\npragma solidity 0.8.17;\n\nimport \"../UniswapV2Intermediary.sol\";\nimport \"../../lib/avalanche/DeploymentConstants.sol\";\n\n/**\n * @title PangolinIntermediary\n * @dev Contract allows user to swap ERC20 tokens on DEX\n * This implementation uses the Pangolin DEX\n */\ncontract PangolinIntermediary is UniswapV2Intermediary {\n\n    function getNativeTokenAddress() override internal pure returns (address) {\n        return DeploymentConstants.getNativeToken();\n    }\n}"
    },
    "contracts/facets/SmartLoanWrappedNativeTokenFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../interfaces/IWrappedNativeToken.sol\";\n\n//This path is updated during deployment\nimport \"../lib/avalanche/DeploymentConstants.sol\";\n\ncontract SmartLoanWrappedNativeTokenFacet {\n    using TransferHelper for address payable;\n\n    function wrapNativeToken(uint256 amount) onlyOwner public {\n        require(amount <= address(this).balance, \"Not enough native token to wrap\");\n        IWrappedNativeToken(DeploymentConstants.getNativeToken()).deposit{value : amount}();\n        emit WrapNative(msg.sender, amount, block.timestamp);\n    }\n\n    function depositNativeToken() public payable virtual {\n        IWrappedNativeToken(DeploymentConstants.getNativeToken()).deposit{value : msg.value}();\n\n        emit DepositNative(msg.sender, msg.value, block.timestamp);\n    }\n\n    function unwrapAndWithdraw(uint256 _amount) onlyOwner public payable virtual {\n        IWrappedNativeToken wrapped = IWrappedNativeToken(DeploymentConstants.getNativeToken());\n        require(wrapped.balanceOf(address(this)) >= _amount, \"Not enough native token to unwrap and withdraw\");\n\n        wrapped.withdraw(_amount);\n\n        payable(msg.sender).safeTransferETH(_amount);\n\n        emit UnwrapAndWithdraw(msg.sender, msg.value, block.timestamp);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    /**\n    * @dev emitted when native tokens are wrapped in the SmartLoan\n    * @param user the address initiating wrap\n    * @param amount of wrapped funds\n    * @param timestamp of wrap\n    **/\n    event WrapNative(address indexed user, uint256 amount, uint256 timestamp);\n\n    /**\n    * @dev emitted when native tokens are deposited to the SmartLoan\n    * @param user the address initiating deposit of native token\n    * @param amount of deposited funds\n    * @param timestamp of deposit\n    **/\n    event DepositNative(address indexed user, uint256 amount, uint256 timestamp);\n\n    /**\n    * @dev emitted when native tokens are unwrapped and withdrawn from the SmartLoan\n    * @param user the address initiating unwrap and withdraw of native token\n    * @param amount of unwrapped and withdrawn funds\n    * @param timestamp of unwrap and withdraw\n    **/\n    event UnwrapAndWithdraw(address indexed user, uint256 amount, uint256 timestamp);\n\n}"
    },
    "contracts/interfaces/IWrappedNativeToken.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n\npragma solidity 0.8.17;\n\ninterface IWrappedNativeToken {\n\n    function balanceOf(address account) external view returns (uint);\n\n    function deposit() external payable;\n\n    function withdraw(uint wad) external;\n\n    function totalSupply() external view returns (uint);\n\n    function approve(address guy, uint wad) external returns (bool);\n\n    function transfer(address dst, uint wad) external returns (bool);\n\n    function transferFrom(address src, address dst, uint wad) external returns (bool);\n\n}"
    },
    "contracts/facets/avalanche/YieldYakFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../../lib/SolvencyMethods.sol\";\nimport \"../../interfaces/facets/avalanche/IYieldYak.sol\";\n\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../interfaces/IWrappedNativeToken.sol\";\n\n// TODO: Check STATUS (tokenManager) of Vault tokens before allowing to stake\n//This path is updated during deployment\nimport \"../../lib/avalanche/DeploymentConstants.sol\";\n\ncontract YieldYakFacet is ReentrancyGuardKeccak, SolvencyMethods {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    // Staking Vaults tokens\n    address private constant YY_AAVE_AVAX = 0xaAc0F2d0630d1D09ab2B5A400412a4840B866d95; // @dev: RedStone token name: YYAV3SA1\n    address private constant YY_PTP_sAVAX = 0xd0F41b1C9338eB9d374c83cC76b684ba3BB71557; //  @dev: RedStone token name: SAV2\n\n    // Staking Vaults LPs\n    address private constant YY_TJ_AVAX_USDC_LP = 0xDEf94a13fF31FB6363f1e03bF18fe0F59Db83BBC;\n\n    // Tokens\n    address private constant SAVAX_TOKEN = 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE;\n    address private constant AVAX_TOKEN = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    // LPs\n    address private constant TJ_AVAX_USDC_LP = 0xf4003F4efBE8691B60249E6afbD307aBE7758adb;\n\n    // ----- STAKE -----\n\n    /**\n        * Stakes AVAX in Yield Yak protocol\n        * @dev This function uses the redstone-evm-connector\n        * @param amount amount of AVAX to be staked\n    **/\n    function stakeAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        require(amount > 0, \"Cannot stake 0 tokens\");\n        require(IWrappedNativeToken(AVAX_TOKEN).balanceOf(address(this)) >= amount, \"Not enough AVAX available\");\n\n        IWrappedNativeToken(AVAX_TOKEN).withdraw(amount);\n        IYieldYak(YY_AAVE_AVAX).deposit{value: amount}();\n\n        DiamondStorageLib.addOwnedAsset(\"YYAV3SA1\", YY_AAVE_AVAX);\n\n        emit Staked(msg.sender, \"AVAX\", YY_AAVE_AVAX, amount, block.timestamp);\n    }\n\n    /**\n       * Stakes sAVAX in Yield Yak protocol\n       * @dev This function uses the redstone-evm-connector\n       * @param amount amount of sAVAX to be staked\n   **/\n    function stakeSAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\n            tokenAddress: SAVAX_TOKEN,\n            vaultAddress: YY_PTP_sAVAX,\n            tokenSymbol: \"sAVAX\",\n            vaultTokenSymbol: \"SAV2\",\n            amount: amount\n        }));\n    }\n\n    /**\n      * Stakes TJ_AVAX_USDC in Yield Yak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of TJ_AVAX_USDC to be staked\n  **/\n    function stakeTJAVAXUSDCYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _stakeTokenYY(IYieldYak.YYStakingDetails({\n            tokenAddress: TJ_AVAX_USDC_LP,\n            vaultAddress: YY_TJ_AVAX_USDC_LP,\n            tokenSymbol: \"TJ_AVAX_USDC_LP\",\n            vaultTokenSymbol: \"YY_TJ_AVAX_USDC_LP\",\n            amount: amount\n        }));\n    }\n\n    // ----- UNSTAKE -----\n\n    /**\n        * Unstakes AVAX from Yield Yak protocol\n        * @dev This function uses the redstone-evm-connector\n        * @param amount amount of AVAX to be unstaked\n        **/\n    function unstakeAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        IYieldYak yakStakingContract = IYieldYak(YY_AAVE_AVAX);\n        uint256 initialStakedBalance = yakStakingContract.balanceOf(address(this));\n\n        require(initialStakedBalance >= amount, \"Cannot unstake more than was initially staked\");\n\n        yakStakingContract.withdraw(amount);\n\n        if(yakStakingContract.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(\"YYAV3SA1\");\n        }\n\n        emit Unstaked(msg.sender, \"AVAX\", YY_AAVE_AVAX, amount, block.timestamp);\n\n        IWrappedNativeToken(AVAX_TOKEN).deposit{value: amount}();\n    }\n\n    function unstakeSAVAXYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\n            tokenAddress: SAVAX_TOKEN,\n            vaultAddress: YY_PTP_sAVAX,\n            tokenSymbol: \"sAVAX\",\n            vaultTokenSymbol: \"SAV2\",\n            amount: amount\n        }));\n    }\n\n    function unstakeTJAVAXUSDCYak(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _unstakeTokenYY(IYieldYak.YYStakingDetails({\n            tokenAddress: TJ_AVAX_USDC_LP,\n            vaultAddress: YY_TJ_AVAX_USDC_LP,\n            tokenSymbol: \"TJ_AVAX_USDC_LP\",\n            vaultTokenSymbol: \"YY_TJ_AVAX_USDC_LP\",\n            amount: amount\n        }));\n    }\n\n    // ----- PRIVATE METHODS -----\n\n    /**\n      * Stakes {stakingDetails.tokenAddress} token in the YieldYak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param stakingDetails IYieldYak.YYStakingDetails staking details\n    **/\n    function _stakeTokenYY(IYieldYak.YYStakingDetails memory stakingDetails) private {\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        require(stakingDetails.amount > 0, \"Cannot stake 0 tokens\");\n        // _ACTIVE = 2\n        require(tokenManager.tokenToStatus(stakingDetails.tokenAddress) == 2, \"Token not supported\");\n        require(tokenManager.tokenToStatus(stakingDetails.vaultAddress) == 2, \"Vault token not supported\");\n        require(IERC20Metadata(stakingDetails.tokenAddress).balanceOf(address(this)) >= stakingDetails.amount, \"Not enough token available\");\n\n        IERC20Metadata(stakingDetails.tokenAddress).approve(stakingDetails.vaultAddress, stakingDetails.amount);\n        IYieldYak(stakingDetails.vaultAddress).deposit(stakingDetails.amount);\n\n        // Add/remove owned tokens\n        DiamondStorageLib.addOwnedAsset(stakingDetails.vaultTokenSymbol, stakingDetails.vaultAddress);\n        if(IERC20(stakingDetails.tokenAddress).balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.tokenSymbol);\n        }\n\n        emit Staked(msg.sender, stakingDetails.tokenSymbol, stakingDetails.vaultAddress, stakingDetails.amount, block.timestamp);\n    }\n\n    /**\n      * Unstakes {stakingDetails.tokenAddress} token in the YieldYak protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param stakingDetails IYieldYak.YYStakingDetails staking details\n    **/\n    function _unstakeTokenYY(IYieldYak.YYStakingDetails memory stakingDetails) private {\n        IYieldYak vaultContract = IYieldYak(stakingDetails.vaultAddress);\n        uint256 initialStakedBalance = vaultContract.balanceOf(address(this));\n\n        require(initialStakedBalance >= stakingDetails.amount, \"Cannot unstake more than was initially staked\");\n\n        vaultContract.withdraw(stakingDetails.amount);\n\n        // Add/remove owned tokens\n        DiamondStorageLib.addOwnedAsset(stakingDetails.tokenSymbol, stakingDetails.tokenAddress);\n        if(vaultContract.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.vaultTokenSymbol);\n        }\n\n        emit Unstaked(msg.sender, stakingDetails.tokenSymbol, stakingDetails.vaultAddress, stakingDetails.amount, block.timestamp);\n    }\n\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /* ========== RECEIVE AVAX FUNCTION ========== */\n    receive() external payable {}\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param vault address of the vault token\n        * @param asset the asset that was staked\n        * @param amount of the asset that was staked\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 amount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param vault address of the vault token\n        * @param asset the asset that was unstaked\n        * @param amount of the asset that was unstaked\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 amount, uint256 timestamp);\n}"
    },
    "contracts/interfaces/facets/avalanche/IYieldYak.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\ninterface IYieldYak {\n    function totalDeposits() external view returns (uint256);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address account) external view returns (uint256);\n\n    function withdraw(uint256 amount) external;\n\n    function depositFor(address account) external payable;\n\n    function depositFor(address account, uint256 amount) external;\n\n    function deposit() external payable;\n\n    function deposit(uint256 amount) external;\n\n    function decimals() external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    // ---INTERFACE-----\n    struct YYStakingDetails {\n        address tokenAddress;\n        address vaultAddress;\n        bytes32 tokenSymbol;\n        bytes32 vaultTokenSymbol;\n        uint256 amount;\n    }\n}"
    },
    "contracts/facets/mock/MockSolvencyFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"../SolvencyFacetProd.sol\";\n\ncontract MockSolvencyFacet is SolvencyFacetProd {}\n"
    },
    "contracts/facets/mock/SolvencyFacetMock.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"redstone-evm-connector/lib/contracts/message-based/PriceAware.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"../../oracle/RSOracleMock3Signers.sol\";\nimport \"../../TokenManager.sol\";\nimport \"../../Pool.sol\";\nimport \"../../DiamondHelper.sol\";\nimport \"../../interfaces/IStakingPositions.sol\";\n\n//This path is updated during deployment\nimport \"../../lib/avalanche/DeploymentConstants.sol\";\n\ncontract SolvencyFacetMock is RSOracleMock3Signers, DiamondHelper {\n    struct AssetPrice {\n        bytes32 asset;\n        uint256 price;\n    }\n\n    // Struct used in the liquidation process to obtain necessary prices only once\n    struct CachedPrices {\n        AssetPrice[] ownedAssetsPrices;\n        AssetPrice[] debtAssetsPrices;\n        AssetPrice[] stakedPositionsPrices;\n        AssetPrice[] assetsToRepayPrices;\n    }\n\n    /**\n      * Checks if the loan is solvent.\n      * It means that the Health Ratio is greater than 1e18.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function isSolvent() public view returns (bool) {\n        return getHealthRatio() >= 1e18;\n    }\n\n    /**\n      * Checks if the loan is solvent.\n      * It means that the Health Ratio is greater than 1e18.\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\n      * @param ownedAssetsPrices An array of Asset/Price structs used to calculate weighted value of owned assets\n      * @param debtAssetsPrices An array of Asset/Price structs used to calculate value of the debt\n      * @param stakedPositionsPrices An array of Asset/Price structs used to calculate value of the staked positions\n    **/\n    function isSolventWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory debtAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view returns (bool) {\n        return getHealthRatioWithPrices(ownedAssetsPrices, debtAssetsPrices, stakedPositionsPrices) >= 1e18;\n    }\n\n    /**\n      * Returns an array of Asset/Price structs of staked positions.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getStakedPositionsPrices() public view returns(AssetPrice[] memory result) {\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n\n        bytes32[] memory symbols = new bytes32[](positions.length);\n        for(uint256 i=0; i<positions.length; i++) {\n            symbols[i] = positions[i].symbol;\n        }\n\n        uint256[] memory stakedPositionsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(symbols);\n        result = new AssetPrice[](stakedPositionsPrices.length);\n\n        for(uint i; i<stakedPositionsPrices.length; i++){\n            result[i] = AssetPrice({\n            asset: symbols[i],\n            price: stakedPositionsPrices[i]\n            });\n        }\n    }\n\n    /**\n      * Returns an array of bytes32[] symbols of debt (borrowable) assets.\n    **/\n    function getDebtAssets() public view returns(bytes32[] memory result) {\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n        result = tokenManager.getAllPoolAssets();\n    }\n\n    /**\n      * Returns an array of Asset/Price structs of debt (borrowable) assets.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getDebtAssetsPrices() public view returns(AssetPrice[] memory result) {\n        bytes32[] memory debtAssets = getDebtAssets();\n\n        uint256[] memory debtAssetsPrices = getOracleNumericValuesFromTxMsg(debtAssets);\n        result = new AssetPrice[](debtAssetsPrices.length);\n\n        for(uint i; i<debtAssetsPrices.length; i++){\n            result[i] = AssetPrice({\n            asset: debtAssets[i],\n            price: debtAssetsPrices[i]\n            });\n        }\n    }\n\n    /**\n      * Returns an array of Asset/Price structs of enriched (always containing AVAX at index 0) owned assets.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getOwnedAssetsPrices() public view returns(AssetPrice[] memory result) {\n        bytes32[] memory assetsEnriched = getOwnedAssetsEnriched();\n        uint256[] memory prices = getOracleNumericValuesFromTxMsg(assetsEnriched);\n\n        result = new AssetPrice[](assetsEnriched.length);\n\n        for(uint i; i<assetsEnriched.length; i++){\n            result[i] = AssetPrice({\n            asset: assetsEnriched[i],\n            price: prices[i]\n            });\n        }\n    }\n\n    /**\n      * Returns an array of bytes32[] symbols of staked positions.\n    **/\n    function getStakedAssets() internal view returns (bytes32[] memory result) {\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n        result = new bytes32[](positions.length);\n        for(uint i; i<positions.length; i++) {\n            result[i] = positions[i].symbol;\n        }\n    }\n\n    /**\n      * Returns CachedPrices struct consisting of Asset/Price arrays for ownedAssets, debtAssets, stakedPositions and assetsToRepay.\n      * Used during the liquidation process in order to obtain all necessary prices from calldata only once.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getAllPricesForLiquidation(bytes32[] calldata assetsToRepay) public view returns (CachedPrices memory result) {\n        bytes32[] memory ownedAssetsEnriched = getOwnedAssetsEnriched();\n        bytes32[] memory debtAssets = getDebtAssets();\n        bytes32[] memory stakedAssets = getStakedAssets();\n\n        bytes32[] memory allAssetsSymbols = new bytes32[](ownedAssetsEnriched.length + debtAssets.length + stakedAssets.length + assetsToRepay.length);\n        uint256 offset;\n\n        // Populate allAssetsSymbols with owned assets symbols\n        for(uint i; i<ownedAssetsEnriched.length; i++){\n            allAssetsSymbols[i] = ownedAssetsEnriched[i];\n        }\n        offset += ownedAssetsEnriched.length;\n\n        // Populate allAssetsSymbols with debt assets symbols\n        for(uint i; i<debtAssets.length; i++){\n            allAssetsSymbols[i+offset] = debtAssets[i];\n        }\n        offset += debtAssets.length;\n\n        // Populate allAssetsSymbols with staked assets symbols\n        for(uint i; i<stakedAssets.length; i++){\n            allAssetsSymbols[i+offset] = stakedAssets[i];\n        }\n        offset += stakedAssets.length;\n\n        // Populate allAssetsSymbols with assets to repay symbols\n        for(uint i; i<assetsToRepay.length; i++){\n            allAssetsSymbols[i+offset] = assetsToRepay[i];\n        }\n\n        uint256[] memory allAssetsPrices = getOracleNumericValuesWithDuplicatesFromTxMsg(allAssetsSymbols);\n\n        offset = 0;\n\n        // Populate ownedAssetsPrices struct\n        AssetPrice[] memory ownedAssetsPrices = new AssetPrice[](ownedAssetsEnriched.length);\n        for(uint i=0; i<ownedAssetsEnriched.length; i++){\n            ownedAssetsPrices[i] = AssetPrice({\n            asset: allAssetsSymbols[i+offset],\n            price: allAssetsPrices[i+offset]\n            });\n        }\n        offset += ownedAssetsEnriched.length;\n\n        // Populate debtAssetsPrices struct\n        AssetPrice[] memory debtAssetsPrices = new AssetPrice[](debtAssets.length);\n        for(uint i=0; i<debtAssets.length; i++){\n            debtAssetsPrices[i] = AssetPrice({\n            asset: allAssetsSymbols[i+offset],\n            price: allAssetsPrices[i+offset]\n            });\n        }\n        offset += debtAssetsPrices.length;\n\n        // Populate stakedPositionsPrices struct\n        AssetPrice[] memory stakedPositionsPrices = new AssetPrice[](stakedAssets.length);\n        for(uint i=0; i<stakedAssets.length; i++){\n            stakedPositionsPrices[i] = AssetPrice({\n            asset: allAssetsSymbols[i+offset],\n            price: allAssetsPrices[i+offset]\n            });\n        }\n        offset += stakedAssets.length;\n\n        // Populate assetsToRepayPrices struct\n        AssetPrice[] memory assetsToRepayPrices = new AssetPrice[](assetsToRepay.length);\n        for(uint i=0; i<assetsToRepay.length; i++){\n            assetsToRepayPrices[i] = AssetPrice({\n            asset: allAssetsSymbols[i+offset],\n            price: allAssetsPrices[i+offset]\n            });\n        }\n\n        result = CachedPrices({\n        ownedAssetsPrices: ownedAssetsPrices,\n        debtAssetsPrices: debtAssetsPrices,\n        stakedPositionsPrices: stakedPositionsPrices,\n        assetsToRepayPrices: assetsToRepayPrices\n        });\n    }\n\n    /**\n      * Helper method exposing the redstone-evm-connector getOracleNumericValuesFromTxMsg() method.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getPrices(bytes32[] memory symbols) external view returns (uint256[] memory) {\n        return getOracleNumericValuesFromTxMsg(symbols);\n    }\n\n    /**\n      * Helper method exposing the redstone-evm-connector getOracleNumericValueFromTxMsg() method.\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getPrice(bytes32 symbol) external view returns (uint256) {\n        return getOracleNumericValueFromTxMsg(symbol);\n    }\n\n    /**\n      * Returns TotalWeightedValue of OwnedAssets in USD based on the supplied array of Asset/Price struct, tokenBalance and maxTokenLeverage\n    **/\n    function _getTWVOwnedAssets(AssetPrice[] memory ownedAssetsPrices) internal view returns (uint256) {\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        uint256 weightedValueOfTokens;\n\n        if (ownedAssetsPrices.length > 0) {\n            // TODO: double check the decimals\n            weightedValueOfTokens = ownedAssetsPrices[0].price * address(this).balance * tokenManager.maxTokenLeverage(tokenManager.getAssetAddress(nativeTokenSymbol, true)) / (10 ** 26);\n\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\n                weightedValueOfTokens = weightedValueOfTokens + (ownedAssetsPrices[i].price * 10 ** 10 * token.balanceOf(address(this)) * tokenManager.maxTokenLeverage(address(token)) / (10 ** token.decimals() * 1e18));\n            }\n        }\n        return weightedValueOfTokens;\n    }\n\n    /**\n      * Returns TotalWeightedValue of StakedPositions in USD based on the supplied array of Asset/Price struct, positionBalance and maxTokenLeverage\n    **/\n    function _getTWVStakedPositions(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n\n        uint256 weightedValueOfStaked;\n\n        for (uint256 i; i < positions.length; i++) {\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \"Position-price symbol mismatch.\");\n\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\n\n            if (success) {\n                uint256 balance = abi.decode(result, (uint256));\n\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\n\n                weightedValueOfStaked += stakedPositionsPrices[i].price * 10 ** 10 * balance * tokenManager.maxTokenLeverage(positions[i].vault) / (10 ** token.decimals());\n            }\n        }\n        return weightedValueOfStaked;\n    }\n\n    function _getThresholdWeightedValueBase(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) internal view virtual returns (uint256) {\n        return _getTWVOwnedAssets(ownedAssetsPrices) + _getTWVStakedPositions(stakedPositionsPrices);\n    }\n\n    /**\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\n      * @dev This function uses the redstone-evm-connector\n    **/\n    function getThresholdWeightedValue() public view virtual returns (uint256) {\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsPrices();\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\n    }\n\n    /**\n      * Returns the threshold weighted value of assets in USD including all tokens as well as staking and LP positions\n      * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\n    **/\n    function getThresholdWeightedValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\n        return _getThresholdWeightedValueBase(ownedAssetsPrices, stakedPositionsPrices);\n    }\n\n\n    /**\n     * Returns the current debt from all lending pools\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getDebtBase(AssetPrice[] memory debtAssetsPrices) internal view returns (uint256){\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n        uint256 debt;\n\n        for (uint256 i; i < debtAssetsPrices.length; i++) {\n            IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(debtAssetsPrices[i].asset, true));\n\n            Pool pool = Pool(tokenManager.getPoolAddress(debtAssetsPrices[i].asset));\n            //10**18 (wei in eth) / 10**8 (precision of oracle feed) = 10**10\n            debt = debt + pool.getBorrowed(address(this)) * debtAssetsPrices[i].price * 10 ** 10\n            / 10 ** token.decimals();\n        }\n\n        return debt;\n    }\n\n    /**\n     * Returns the current debt from all lending pools\n     * @dev This function uses the redstone-evm-connector\n    **/\n    function getDebt() public view virtual returns (uint256) {\n        AssetPrice[] memory debtAssetsPrices = getDebtAssetsPrices();\n        return getDebtBase(debtAssetsPrices);\n    }\n\n    /**\n     * Returns the current debt from all lending pools\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getDebtWithPrices(AssetPrice[] memory debtAssetsPrices) public view virtual returns (uint256) {\n        return getDebtBase(debtAssetsPrices);\n    }\n\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function _getTotalAssetsValueBase(AssetPrice[] memory ownedAssetsPrices) public view returns (uint256) {\n        if (ownedAssetsPrices.length > 0) {\n            TokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n            uint256 total = address(this).balance * ownedAssetsPrices[0].price / 10 ** 8;\n\n            for (uint256 i = 0; i < ownedAssetsPrices.length; i++) {\n                IERC20Metadata token = IERC20Metadata(tokenManager.getAssetAddress(ownedAssetsPrices[i].asset, true));\n                uint256 assetBalance = token.balanceOf(address(this));\n\n                total = total + (ownedAssetsPrices[i].price * 10 ** 10 * assetBalance / (10 ** token.decimals()));\n            }\n            return total;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * @dev This function uses the redstone-evm-connector\n     **/\n    function getTotalAssetsValue() public view virtual returns (uint256) {\n        AssetPrice[] memory ownedAssetsPrices = getOwnedAssetsPrices();\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\n    }\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getTotalAssetsValueWithPrices(AssetPrice[] memory ownedAssetsPrices) public view virtual returns (uint256) {\n        return _getTotalAssetsValueBase(ownedAssetsPrices);\n    }\n\n    /**\n      * Returns list of owned assets that always included NativeToken at index 0\n    **/\n    function getOwnedAssetsEnriched() public view returns(bytes32[] memory){\n        bytes32[] memory ownedAssets = DeploymentConstants.getAllOwnedAssets();\n        bytes32 nativeTokenSymbol = DeploymentConstants.getNativeTokenSymbol();\n\n        uint256 numberOfAssets = DiamondStorageLib.hasAsset(nativeTokenSymbol) ? ownedAssets.length : ownedAssets.length + 1;\n        bytes32[] memory assetsEnriched = new bytes32[](numberOfAssets);\n\n        uint256 lastUsedIndex;\n        assetsEnriched[0] = nativeTokenSymbol; // First asset = NativeToken\n\n        for(uint i=0; i< ownedAssets.length; i++){\n            if(ownedAssets[i] != nativeTokenSymbol){\n                lastUsedIndex += 1;\n                assetsEnriched[lastUsedIndex] = ownedAssets[i];\n            }\n        }\n        return assetsEnriched;\n    }\n\n    /**\n     * Returns the current value of staked positions in USD.\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function _getStakedValueBase(AssetPrice[] memory stakedPositionsPrices) internal view returns (uint256) {\n        IStakingPositions.StakedPosition[] storage positions = DiamondStorageLib.stakedPositions();\n\n        uint256 usdValue;\n\n        for (uint256 i; i < positions.length; i++) {\n            require(stakedPositionsPrices[i].asset == positions[i].symbol, \"Position-price symbol mismatch.\");\n\n            (bool success, bytes memory result) = address(this).staticcall(abi.encodeWithSelector(positions[i].balanceSelector));\n\n            if (success) {\n                uint256 balance = abi.decode(result, (uint256));\n\n                IERC20Metadata token = IERC20Metadata(DeploymentConstants.getTokenManager().getAssetAddress(stakedPositionsPrices[i].asset, true));\n\n                usdValue += stakedPositionsPrices[i].price * 10 ** 10 * balance / (10 ** token.decimals());\n            }\n        }\n\n        return usdValue;\n    }\n\n    /**\n     * Returns the current value of staked positions in USD.\n     * Uses provided AssetPrice struct array instead of extracting the pricing data from the calldata again.\n    **/\n    function getStakedValueWithPrices(AssetPrice[] memory stakedPositionsPrices) public view returns (uint256) {\n        return _getStakedValueBase(stakedPositionsPrices);\n    }\n\n    /**\n     * Returns the current value of staked positions in USD.\n     * @dev This function uses the redstone-evm-connector\n    **/\n    function getStakedValue() public view virtual returns (uint256) {\n        AssetPrice[] memory stakedPositionsPrices = getStakedPositionsPrices();\n        return _getStakedValueBase(stakedPositionsPrices);\n    }\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * @dev This function uses the redstone-evm-connector\n    **/\n    function getTotalValue() public view virtual returns (uint256) {\n        return getTotalAssetsValue() + getStakedValue();\n    }\n\n    /**\n     * Returns the current value of Prime Account in USD including all tokens as well as staking and LP positions\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\n    **/\n    function getTotalValueWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\n        return getTotalAssetsValueWithPrices(ownedAssetsPrices) + getStakedValueWithPrices(stakedPositionsPrices);\n    }\n\n    function getFullLoanStatus() public view returns (uint256[5] memory) {\n        return [getTotalValue(), getDebt(), getThresholdWeightedValue(), getHealthRatio(), isSolvent() ? uint256(1) : uint256(0)];\n    }\n\n    /**\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\n     * by current debt\n     * @dev This function uses the redstone-evm-connector\n     **/\n    function getHealthRatio() public view virtual returns (uint256) {\n        uint256 debt = getDebt();\n        uint256 thresholdWeightedValue = getThresholdWeightedValue();\n\n        if (debt == 0) {\n            return type(uint256).max;\n        } else {\n            return thresholdWeightedValue * 1e18 / debt;\n        }\n    }\n\n    /**\n     * Returns current health ratio (solvency) associated with the loan, defined as threshold weighted value of divided\n     * by current debt\n     * Uses provided AssetPrice struct arrays instead of extracting the pricing data from the calldata again.\n     **/\n    function getHealthRatioWithPrices(AssetPrice[] memory ownedAssetsPrices, AssetPrice[] memory debtAssetsPrices, AssetPrice[] memory stakedPositionsPrices) public view virtual returns (uint256) {\n        uint256 debt = getDebtWithPrices(debtAssetsPrices);\n        uint256 thresholdWeightedValue = getThresholdWeightedValueWithPrices(ownedAssetsPrices, stakedPositionsPrices);\n\n        if (debt == 0) {\n            return type(uint256).max;\n        } else {\n            return thresholdWeightedValue * 1e18 / debt;\n        }\n    }\n}\n"
    },
    "contracts/oracle/RSOracleMock3Signers.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@redstone-finance/evm-connector/contracts/data-services/AvalancheDataServiceConsumerBase.sol\";\nimport \"@redstone-finance/evm-connector/contracts/mocks/RedstoneConsumerNumericMock.sol\";\n\ncontract RSOracleMock3Signers is RedstoneConsumerNumericMock {\n    uint256 constant DEFAULT_MAX_DATA_TIMESTAMP_DELAY_SECONDS = 15 minutes; // Test sometimes be slow\n\n    function getUniqueSignersThreshold() public view virtual override returns (uint8) {\n        return 3;\n    }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/mocks/RedstoneConsumerNumericMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"../core/RedstoneConsumerNumericBase.sol\";\nimport \"./AuthorisedMockSignersBase.sol\";\n\ncontract RedstoneConsumerNumericMock is RedstoneConsumerNumericBase, AuthorisedMockSignersBase {\n  uint256 internal constant MIN_TIMESTAMP_MILLISECONDS = 1654353400000;\n\n  error TimestampIsNotValid();\n\n  function getUniqueSignersThreshold() public view virtual override returns (uint8) {\n    return 10;\n  }\n\n  function getAuthorisedSignerIndex(address signerAddress)\n    public\n    view\n    virtual\n    override\n    returns (uint8)\n  {\n    return getAuthorisedMockSignerIndex(signerAddress);\n  }\n\n  function validateTimestamp(uint256 receivedTimestampMilliseconds) public view virtual override {\n    if (receivedTimestampMilliseconds < MIN_TIMESTAMP_MILLISECONDS) {\n      revert TimestampIsNotValid();\n    }\n  }\n}\n"
    },
    "@redstone-finance/evm-connector/contracts/mocks/AuthorisedMockSignersBase.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.4;\n\nimport \"../core/RedstoneConstants.sol\";\n\nabstract contract AuthorisedMockSignersBase is RedstoneConstants {\n  function getAuthorisedMockSignerIndex(address signerAddress)\n    public\n    view\n    virtual\n    returns (uint8)\n  {\n    return getAllMockExceptLastOneAuthorised(signerAddress);\n  }\n\n  function getAllMockExceptLastOneAuthorised(address signerAddress)\n    public\n    view\n    virtual\n    returns (uint8)\n  {\n    if (signerAddress == 0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199) {\n      revert SignerNotAuthorised(signerAddress);\n    } else {\n      return getAllMockAuthorised(signerAddress);\n    }\n  }\n\n  function getAllMockAuthorised(address signerAddress) public view virtual returns (uint8) {\n    // Looks like an array but consumes less gas\n    if (signerAddress == 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266) {\n      return 0;\n    } else if (signerAddress == 0x70997970C51812dc3A010C7d01b50e0d17dc79C8) {\n      return 1;\n    } else if (signerAddress == 0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC) {\n      return 2;\n    } else if (signerAddress == 0x90F79bf6EB2c4f870365E785982E1f101E93b906) {\n      return 3;\n    } else if (signerAddress == 0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65) {\n      return 4;\n    } else if (signerAddress == 0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc) {\n      return 5;\n    } else if (signerAddress == 0x976EA74026E726554dB657fA54763abd0C3a0aa9) {\n      return 6;\n    } else if (signerAddress == 0x14dC79964da2C08b23698B3D3cc7Ca32193d9955) {\n      return 7;\n    } else if (signerAddress == 0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f) {\n      return 8;\n    } else if (signerAddress == 0xa0Ee7A142d267C1f36714E4a8F75612F20a79720) {\n      return 9;\n    } else if (signerAddress == 0xBcd4042DE499D14e55001CcbB24a551F3b954096) {\n      return 10;\n    } else if (signerAddress == 0x71bE63f3384f5fb98995898A86B02Fb2426c5788) {\n      return 11;\n    } else if (signerAddress == 0xFABB0ac9d68B0B445fB7357272Ff202C5651694a) {\n      return 12;\n    } else if (signerAddress == 0x1CBd3b2770909D4e10f157cABC84C7264073C9Ec) {\n      return 13;\n    } else if (signerAddress == 0xdF3e18d64BC6A983f673Ab319CCaE4f1a57C7097) {\n      return 14;\n    } else if (signerAddress == 0xcd3B766CCDd6AE721141F452C550Ca635964ce71) {\n      return 15;\n    } else if (signerAddress == 0x2546BcD3c84621e976D8185a91A922aE77ECEc30) {\n      return 16;\n    } else if (signerAddress == 0xbDA5747bFD65F08deb54cb465eB87D40e51B197E) {\n      return 17;\n    } else if (signerAddress == 0xdD2FD4581271e230360230F9337D5c0430Bf44C0) {\n      return 18;\n    } else if (signerAddress == 0x8626f6940E2eb28930eFb4CeF49B2d1F2C9C1199) {\n      return 19;\n    } else {\n      revert SignerNotAuthorised(signerAddress);\n    }\n  }\n}\n"
    },
    "contracts/facets/SmartLoanViewFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../ReentrancyGuardKeccak.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../lib/SolvencyMethods.sol\";\nimport \"../Pool.sol\";\nimport {DiamondStorageLib} from \"../lib/DiamondStorageLib.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\n//This path is updated during deployment\nimport \"../lib/avalanche/DeploymentConstants.sol\";\n\ncontract SmartLoanViewFacet is ReentrancyGuardKeccak, SolvencyMethods {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    struct AssetNameBalance {\n        bytes32 name;\n        uint256 balance;\n    }\n\n    struct AssetNameDebt {\n        bytes32 name;\n        uint256 debt;\n    }\n\n    struct AssetNamePrice {\n        bytes32 name;\n        uint256 price;\n    }\n\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\n\n    function initialize(address owner) external {\n        require(owner != address(0), \"Initialize: Cannot set the owner to a zero address\");\n\n        DiamondStorageLib.SmartLoanStorage storage sls = DiamondStorageLib.smartLoanStorage();\n        require(!sls._initialized, \"DiamondInit: contract is already initialized\");\n        DiamondStorageLib.setContractOwner(owner);\n        sls._initialized = true;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    function getPercentagePrecision() public view virtual returns (uint256) {\n        return DeploymentConstants.getPercentagePrecision();\n    }\n\n\n    /**\n    * Returns a current balance of the asset held by the smart loan\n    * @param _asset the code of an asset\n    **/\n    function getBalance(bytes32 _asset) public view returns (uint256) {\n        IERC20 token = IERC20(DeploymentConstants.getTokenManager().getAssetAddress(_asset, true));\n        return token.balanceOf(address(this));\n    }\n\n    function getAllOwnedAssets() external view returns (bytes32[] memory result) {\n        return DeploymentConstants.getAllOwnedAssets();\n    }\n\n    function getSupportedTokensAddresses() external view returns (address[] memory) {\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n        return tokenManager.getSupportedTokensAddresses();\n    }\n\n    function getAllAssetsBalances() public view returns (AssetNameBalance[] memory) {\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n        bytes32[] memory assets = tokenManager.getAllTokenAssets();\n        AssetNameBalance[] memory result = new AssetNameBalance[](assets.length);\n\n        for (uint256 i = 0; i < assets.length; i++) {\n            result[i] = AssetNameBalance({\n            name : assets[i],\n            balance : IERC20(tokenManager.getAssetAddress(assets[i], true)).balanceOf(address(this))\n            });\n        }\n\n        return result;\n    }\n\n    function getDebts() public view returns (AssetNameDebt[] memory) {\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n        bytes32[] memory assets = tokenManager.getAllPoolAssets();\n        AssetNameDebt[] memory result = new AssetNameDebt[](assets.length);\n\n        for (uint256 i = 0; i < assets.length; i++) {\n            Pool pool = Pool(tokenManager.getPoolAddress(assets[i]));\n\n            result[i] = AssetNameDebt({\n            name : assets[i],\n            debt : pool.getBorrowed(address(this))\n            });\n        }\n\n        return result;\n    }\n\n    /**\n     * Returns the prices of all assets supported by the TokenManager\n     * It could be used as a helper method for UI\n     * @dev This function uses the redstone-evm-connector\n     **/\n    function getAllAssetsPrices() public returns (AssetNamePrice[] memory) {\n        bytes32[] memory assets = DeploymentConstants.getTokenManager().getAllTokenAssets();\n        uint256[] memory prices = SolvencyMethods.getPrices(assets);\n        AssetNamePrice[] memory result = new AssetNamePrice[](assets.length);\n        for (uint i = 0; i < assets.length; i++) {\n            result[i] = AssetNamePrice({\n                name : assets[i],\n                price : prices[i]\n            });\n        }\n        return result;\n    }\n\n    function getContractOwner() external view returns (address _owner) {\n        _owner = DiamondStorageLib.contractOwner();\n    }\n\n    function getProposedOwner() external view returns (address _proposed) {\n        _proposed = DiamondStorageLib.proposedOwner();\n    }\n\n    function getStakedPositions() external view returns (IStakingPositions.StakedPosition[] memory  _positions) {\n        _positions = DiamondStorageLib.stakedPositions();\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n}"
    },
    "contracts/interfaces/facets/ISmartLoanViewFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\nimport \"../../facets/SmartLoanViewFacet.sol\";\n\ninterface ISmartLoanViewFacet {\n    function getAllAssetsBalances() external view returns (SmartLoanViewFacet.AssetNameBalance[] memory);\n\n    function getDebts() external view returns (SmartLoanViewFacet.AssetNameDebt[] memory);\n\n    function getAllAssetsPrices() external view returns (SmartLoanViewFacet.AssetNamePrice[] memory);\n\n    function getAllOwnedAssets() external view returns (bytes32[] memory result);\n\n    function getTotalAssetsValue() external view returns (uint256);\n\n    function getSupportedTokensAddresses() external view returns (address[] memory result);\n\n    function getBalance(bytes32 _asset) external view returns (uint256);\n\n    function getPercentagePrecision() external view returns (uint256);\n\n    function getContractOwner() external view returns (address _owner);\n\n    function getProposedOwner() external view returns (address _proposed);\n\n    function getStakedPositions() external view returns (IStakingPositions.StakedPosition[] memory  _positions);\n\n    function initialize(address owner) external;\n}\n"
    },
    "contracts/interfaces/SmartLoanGigaChadInterface.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\nimport \"./facets/avalanche/IYieldYakFacet.sol\";\nimport \"./facets/avalanche/IPangolinDEXFacet.sol\";\nimport \"./facets/avalanche/ITraderJoeDEXFacet.sol\";\nimport \"./facets/IAssetsOperationsFacet.sol\";\nimport \"./facets/IOwnershipFacet.sol\";\nimport \"./facets/ISmartLoanViewFacet.sol\";\nimport \"./facets/ISmartLoanLiquidationFacet.sol\";\nimport \"./facets/ISmartLoanWrappedNativeTokenFacet.sol\";\nimport \"./facets/ISolvencyFacetProd.sol\";\nimport \"./facets/celo/IUbeswapDEXFacet.sol\";\nimport \"./facets/avalanche/IVectorFinanceFacet.sol\";\nimport \"./facets/avalanche/IBeefyFinanceFacet.sol\";\n\ninterface SmartLoanGigaChadInterface is IBeefyFinanceFacet, ISmartLoanWrappedNativeTokenFacet, IPangolinDEXFacet, IAssetsOperationsFacet, IOwnershipFacet, ISmartLoanLiquidationFacet, ISmartLoanViewFacet, ISolvencyFacetProd, IYieldYakFacet, IVectorFinanceFacet, IUbeswapDEXFacet, ITraderJoeDEXFacet {\n\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IYieldYakFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IYieldYakFacet {\n    function stakeAVAXYak(uint256 amount) external;\n\n    function stakeSAVAXYak(uint256 amount) external;\n\n    function stakeTJAVAXUSDCYak(uint256 amount) external;\n\n    function unstakeAVAXYak(uint256 amount) external;\n\n    function unstakeSAVAXYak(uint256 amount) external;\n\n    function unstakeTJAVAXUSDCYak(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IPangolinDEXFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IPangolinDEXFacet {\n    function swapPangolin(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) external returns (uint256[] memory);\n\n    function addLiquidityPangolin(bytes32 _firstAsset, bytes32 _secondAsset, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) external;\n\n    function removeLiquidityPangolin(bytes32 _firstAsset, bytes32 _secondAsset, uint liquidity, uint amountAMin, uint amountBMin) external;\n\n}\n"
    },
    "contracts/interfaces/facets/avalanche/ITraderJoeDEXFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface ITraderJoeDEXFacet {\n    function swapTraderJoe(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) external returns (uint256[] memory);\n\n    function addLiquidityTraderJoe(bytes32 _firstAsset, bytes32 _secondAsset, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) external;\n\n    function removeLiquidityTraderJoe(bytes32 _firstAsset, bytes32 _secondAsset, uint liquidity, uint amountAMin, uint amountBMin) external;\n}\n"
    },
    "contracts/interfaces/facets/IAssetsOperationsFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IAssetsOperationsFacet {\n    function borrow(bytes32 _asset, uint256 _amount) external;\n\n    function fund(bytes32 _fundedAsset, uint256 _amount) external;\n\n    function repay(bytes32 _asset, uint256 _amount) payable external;\n\n    function withdraw(bytes32 _withdrawnAsset, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/facets/IOwnershipFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IOwnershipFacet {\n    function owner() external view returns (address owner_);\n\n    function proposeOwnershipTransfer(address _newOwner) external;\n\n    function acceptOwnership() external;\n\n    function proposedOwner() external view returns (address proposedOwner_);\n}\n"
    },
    "contracts/interfaces/facets/ISmartLoanLiquidationFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface ISmartLoanLiquidationFacet {\n  function _getLTV (  ) external returns ( uint256 ltv );\n  function getMaxLiquidationBonus (  ) external view returns ( uint256 );\n  function getMaxLtv (  ) external view returns ( uint256 );\n  function getMinLtvAfterLiquidation (  ) external view returns ( uint256 );\n  function getPrice ( bytes32 symbol ) external view returns ( uint256 price );\n  function getPrices ( bytes32[] memory symbols ) external view returns ( uint256[] memory prices );\n  function liquidateLoan ( bytes32[] memory assetsToRepay, uint256[] memory amountsToRepay, uint256 _liquidationBonus ) external;\n  function unsafeLiquidateLoan ( bytes32[] memory assetsToRepay, uint256[] memory amountsToRepay, uint256 _liquidationBonus ) external;\n}\n"
    },
    "contracts/interfaces/facets/ISmartLoanWrappedNativeTokenFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface ISmartLoanWrappedNativeTokenFacet {\n    function depositNativeToken() payable external;\n\n    function unwrapAndWithdraw(uint256 _amount) payable external;\n\n    function wrapNativeToken(uint256 amount) external;\n}\n"
    },
    "contracts/interfaces/facets/ISolvencyFacetProd.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface ISolvencyFacetProd {\n    function getDebt() external view returns (uint256);\n\n    function getFullLoanStatus() external view returns (uint256[5] memory);\n\n    function getHealthRatio() external view returns (uint256);\n\n    function getThresholdWeightedValue() external view returns (uint256);\n\n    function getMaxBlockTimestampDelay() external view returns (uint256);\n\n    function getMaxDataTimestampDelay() external view returns (uint256);\n\n    function getTotalValue() external view returns (uint256);\n\n    function isSignerAuthorized(address _receivedSigner) external view returns (bool);\n\n    function isSolvent() external view returns (bool);\n\n    function isTimestampValid(uint256 _receivedTimestamp) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/facets/celo/IUbeswapDEXFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IUbeswapDEXFacet {\n    function swapUbeswap(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) external returns (uint256[] memory);\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IVectorFinanceFacet.sol": {
      "content": "pragma solidity ^0.8.17;\n\ninterface IVectorFinanceFacet {\n    function vectorStakeUSDC1(uint256 amount) external;\n\n    function vectorStakeUSDC2(uint256 amount) external;\n\n    function vectorStakeWAVAX1(uint256 amount) external;\n\n    function vectorStakeSAVAX1(uint256 amount) external;\n\n    function vectorUnstakeUSDC1(uint256 amount, uint256 minAmount) external;\n\n    function vectorUnstakeUSDC2(uint256 amount, uint256 minAmount) external;\n\n    function vectorUnstakeWAVAX1(uint256 amount, uint256 minAmount) external;\n\n    function vectorUnstakeSAVAX1(uint256 amount, uint256 minAmount) external;\n\n    function vectorUSDC1Balance() external view returns(uint256);\n\n    function vectorUSDC2Balance() external view returns(uint256);\n\n    function vectorWAVAX1Balance() external view returns(uint256);\n\n    function vectorSAVAX1Balance() external view returns(uint256);\n}\n"
    },
    "contracts/interfaces/facets/avalanche/IBeefyFinanceFacet.sol": {
      "content": "interface IBeefyFinanceFacet {\n    function stakePngUsdcAvaxLpBeefy(uint256 amount) external;\n\n    function stakePngUsdceAvaxLpBeefy(uint256 amount) external;\n\n    function stakeTjUsdcAvaxLpBeefy(uint256 amount) external;\n\n    function unstakePngUsdcAvaxLpBeefy(uint256 amount) external;\n\n    function unstakePngUsdceAvaxLpBeefy(uint256 amount) external;\n\n    function unstakeTjUsdcAvaxLpBeefy(uint256 amount) external;\n}\n"
    },
    "contracts/upgraded/SmartLoansFactoryWithAccessNFT.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: 0fbd3d2132ce3d3a12c966ee5e6ffba53aae9d33;\npragma solidity 0.8.17;\n\nimport \"../abstract/NFTAccess.sol\";\nimport \"../SmartLoansFactory.sol\";\n\ncontract SmartLoansFactoryWithAccessNFT is NFTAccess, SmartLoansFactory {\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override(SmartLoansFactory, OwnableUpgradeable) {}\n\n    function createLoan() public override hasNoLoan hasAccessNFT returns (SmartLoanDiamondBeacon) {\n        return super.createLoan();\n    }\n\n    function createAndFundLoan(bytes32 _fundedAsset, address _assetAddress, uint256 _amount) public override hasNoLoan hasAccessNFT returns (SmartLoanDiamondBeacon) {\n        return super.createAndFundLoan(_fundedAsset, _assetAddress, _amount);\n    }\n}\n"
    },
    "contracts/abstract/NFTAccess.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\n\nabstract contract NFTAccess is OwnableUpgradeable {\n    bytes32 internal constant ACCESS_NFT_SLOT = bytes32(uint256(keccak256('ACCESS_NFT_SLOT')) - 1);\n\n    function setAccessNFT(ERC721 nftAddress) external onlyOwner {\n        // Setting nftAddress to a address(0) removes the lock\n        if (address(nftAddress) != address(0)) {\n            require(AddressUpgradeable.isContract(address(nftAddress)), \"Cannot set nftAddress to a non-contract instance\");\n            (bool success, bytes memory result) = address(nftAddress).call(\n                abi.encodeWithSignature(\"balanceOf(address)\", msg.sender)\n            );\n            require(success && result.length > 0, \"Contract has to support the ERC721 balanceOf() interface\");\n        }\n\n        bytes32 slot = ACCESS_NFT_SLOT;\n        assembly {\n            sstore(slot, nftAddress)\n        }\n    }\n\n    function getAccessNFT() external view returns (ERC721 accessNFT) {\n        bytes32 slot = ACCESS_NFT_SLOT;\n        assembly {\n            accessNFT := sload(slot)\n        }\n    }\n\n    modifier hasAccessNFT {\n        bytes32 slot = ACCESS_NFT_SLOT;\n        ERC721 accessNFT;\n        assembly {\n            accessNFT := sload(slot)\n        }\n        if (address(accessNFT) != address(0)) {\n            require(accessNFT.balanceOf(msg.sender) > 0, \"Access NFT required\");\n        }\n        _;\n    }\n}\n"
    },
    "contracts/SmartLoansFactory.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\npragma solidity 0.8.17;\n\nimport \"@redstone-finance/evm-connector/contracts/core/ProxyConnector.sol\";\nimport \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"./SmartLoanDiamondBeacon.sol\";\nimport \"./proxies/SmartLoanDiamondProxy.sol\";\nimport \"./facets/AssetsOperationsFacet.sol\";\nimport \"./facets/OwnershipFacet.sol\";\nimport \"./facets/SmartLoanViewFacet.sol\";\n\n/**\n * @title SmartLoansFactory\n * @dev Contract responsible for creating new instances of SmartLoans (SmartLoanDiamondBeacon).\n * It's possible to either simply create a new loan or create and fund it with an ERC20 asset as well as borrow in a single transaction.\n * At the time of creating a loan, SmartLoansFactory contract is the owner for the sake of being able to perform the fund() and borrow() operations.\n * At the end of the createAndFundLoan the ownership is transferred to the msg.sender.\n * It's also responsible for keeping track of the loans, ensuring one loan per wallet rule, ownership transfers proposals/execution and\n * authorizes registered loans to borrow from lending pools.\n */\ncontract SmartLoansFactory is OwnableUpgradeable, IBorrowersRegistry, ProxyConnector {\n    using TransferHelper for address;\n\n    modifier hasNoLoan() {\n        require(!_hasLoan(msg.sender), \"Only one loan per owner is allowed\");\n        _;\n    }\n\n\n    SmartLoanDiamondBeacon public smartLoanDiamond;\n\n    mapping(address => address) public ownersToLoans;\n    mapping(address => address) public loansToOwners;\n\n    mapping(address => bool) public canCreateLoan;\n\n    address[] loans;\n\n    /* ========== SETTERS ========== */\n    function setAccess(address user, bool allowCreate) external onlyOwner {\n        canCreateLoan[user] = allowCreate;\n    }\n\n    function _hasLoan(address user) internal view returns (bool) {\n        return ownersToLoans[user] != address(0);\n    }\n\n    function changeOwnership(address _newOwner) public {\n        address loan = msg.sender;\n        address oldOwner = loansToOwners[loan];\n\n        require(oldOwner != address(0), \"Only a SmartLoan can change it's owner\");\n        require(!_hasLoan(_newOwner), \"New owner already has a loan\");\n\n        ownersToLoans[oldOwner] = address(0);\n        ownersToLoans[_newOwner] = loan;\n        loansToOwners[loan] = _newOwner;\n    }\n\n    function initialize(address payable _smartLoanDiamond) external initializer {\n        smartLoanDiamond = SmartLoanDiamondBeacon(_smartLoanDiamond);\n        __Ownable_init();\n    }\n\n    function createLoan() public virtual hasNoLoan returns (SmartLoanDiamondBeacon) {\n        require(canCreateLoan[msg.sender], \"User not permitted to create a loan\");\n\n        SmartLoanDiamondProxy beaconProxy = new SmartLoanDiamondProxy(\n            payable(address(smartLoanDiamond)),\n        // Setting SLFactory as the initial owner and then using .transferOwnership to change the owner to msg.sender\n        // It is possible to set msg.sender as the initial owner if our loan-creation flow would change\n            abi.encodeWithSelector(SmartLoanViewFacet.initialize.selector, msg.sender)\n        );\n        SmartLoanDiamondBeacon smartLoan = SmartLoanDiamondBeacon(payable(address(beaconProxy)));\n\n        //Update registry and emit event\n        updateRegistry(address(smartLoan), msg.sender);\n\n        emit SmartLoanCreated(address(smartLoan), msg.sender, \"\", 0);\n        return smartLoan;\n    }\n\n    function createAndFundLoan(bytes32 _fundedAsset, address _assetAddress, uint256 _amount) public virtual hasNoLoan returns (SmartLoanDiamondBeacon) {\n        require(canCreateLoan[msg.sender], \"User not permitted to create a loan\");\n\n        SmartLoanDiamondProxy beaconProxy = new SmartLoanDiamondProxy(payable(address(smartLoanDiamond)),\n            abi.encodeWithSelector(SmartLoanViewFacet.initialize.selector, msg.sender)\n        );\n        SmartLoanDiamondBeacon smartLoan = SmartLoanDiamondBeacon(payable(address(beaconProxy)));\n\n        //Fund account with own funds and credit\n        IERC20Metadata token = IERC20Metadata(_assetAddress);\n        address(token).safeTransferFrom(msg.sender, address(this), _amount);\n        token.approve(address(smartLoan), _amount);\n\n        proxyCalldata(address(smartLoan), abi.encodeWithSelector(AssetsOperationsFacet.fund.selector, _fundedAsset, _amount), false);\n\n        //Update registry and emit event\n        updateRegistry(address(smartLoan), msg.sender);\n\n        emit SmartLoanCreated(address(smartLoan), msg.sender, _fundedAsset, _amount);\n\n        return smartLoan;\n    }\n\n    function updateRegistry(address loan, address owner) internal {\n        ownersToLoans[owner] = loan;\n        loansToOwners[loan] = owner;\n        loans.push(loan);\n    }\n\n    function canBorrow(address _account) external view override returns (bool) {\n        return loansToOwners[_account] != address(0);\n    }\n\n    function getLoanForOwner(address _user) external view override returns (address) {\n        return ownersToLoans[_user];\n    }\n\n    function getOwnerOfLoan(address _loan) external view override returns (address) {\n        return loansToOwners[_loan];\n    }\n\n    function getAllLoans() public view returns (address[] memory) {\n        return loans;\n    }\n\n    /* ========== OVERRIDDEN FUNCTIONS ========== */\n\n    function renounceOwnership() public virtual override {}\n\n    /**\n     * @dev emitted after creating a loan by the owner\n     * @param accountAddress address of a new SmartLoanDiamondBeacon\n     * @param creator account creating a SmartLoanDiamondBeacon\n     * @param collateralAsset asset used as initial collateral\n     * @param collateralAmount amount of asset used as initial collateral\n     **/\n    event SmartLoanCreated(address indexed accountAddress, address indexed creator, bytes32 collateralAsset, uint256 collateralAmount);\n}"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IBeacon.sol\";\nimport \"../Proxy.sol\";\nimport \"../ERC1967/ERC1967Upgrade.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from a {UpgradeableBeacon}.\n *\n * The beacon address is stored in storage slot `uint256(keccak256('eip1967.proxy.beacon')) - 1`, so that it doesn't\n * conflict with the storage layout of the implementation behind the proxy.\n *\n * _Available since v3.4._\n */\ncontract BeaconProxy is Proxy, ERC1967Upgrade {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Changes the proxy to use a new beacon. Deprecated: see {_upgradeBeaconToAndCall}.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract.\n     * - The implementation returned by `beacon` must be a contract.\n     */\n    function _setBeacon(address beacon, bytes memory data) internal virtual {\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n}\n"
    },
    "contracts/SmartLoanDiamondBeacon.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: f63ef97516096bbd3db42914b6554a461f90ef40;\npragma solidity 0.8.17;\n\nimport {DiamondStorageLib} from \"./lib/DiamondStorageLib.sol\";\nimport {IDiamondCut} from \"./interfaces/IDiamondCut.sol\";\n\n/**\n * @title SmartLoanDiamondBeacon\n * A contract that is authorised to borrow funds using delegated credit.\n * It maintains solvency calculating the current value of assets and borrowings.\n * In case the value of assets held drops below certain level, part of the funds may be forcibly repaid.\n * It permits only a limited and safe token transfer.\n *\n */\n\ncontract SmartLoanDiamondBeacon {\n    constructor(address _contractOwner, address _diamondCutFacet) payable {\n        DiamondStorageLib.setContractOwner(_contractOwner);\n\n        // Add the diamondCut external function from the diamondCutFacet\n        IDiamondCut.FacetCut[] memory cut = new IDiamondCut.FacetCut[](1);\n        bytes4[] memory functionSelectors = new bytes4[](3);\n        functionSelectors[0] = IDiamondCut.diamondCut.selector;\n        functionSelectors[1] = IDiamondCut.pause.selector;\n        functionSelectors[2] = IDiamondCut.unpause.selector;\n        cut[0] = IDiamondCut.FacetCut({\n        facetAddress : _diamondCutFacet,\n        action : IDiamondCut.FacetCutAction.Add,\n        functionSelectors : functionSelectors\n        });\n        DiamondStorageLib.diamondCut(cut, address(0), \"\");\n    }\n\n    function implementation() public view returns (address) {\n        return address(this);\n    }\n\n    function getStatus() public view returns(bool) {\n        DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n        return ds._active;\n    }\n\n    function implementation(bytes4 funcSignature) public view notPausedOrUpgrading returns (address) {\n        DiamondStorageLib.DiamondStorage storage ds;\n        bytes32 position = DiamondStorageLib.DIAMOND_STORAGE_POSITION;\n        // get diamond storage\n        assembly {\n            ds.slot := position\n        }\n        // get facet from function selector\n        address facet = ds.selectorToFacetAndPosition[funcSignature].facetAddress;\n        require(facet != address(0), \"Diamond: Function does not exist\");\n        // Execute external function from facet using delegatecall and return any value.\n        return facet;\n    }\n\n\n    // Find facet for function that is called and execute the\n    // function if a facet is found and return any value.\n    fallback() external payable {\n        address facet = implementation(msg.sig);\n        // Execute external function from facet using delegatecall and return any value.\n        assembly {\n        // copy function selector and any arguments\n            calldatacopy(0, 0, calldatasize())\n        // execute function call using the facet\n            let result := delegatecall(gas(), facet, 0, calldatasize(), 0, 0)\n        // get any return value\n            returndatacopy(0, 0, returndatasize())\n        // return any return value or error back to the caller\n            switch result\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return (0, returndatasize())\n            }\n        }\n    }\n\n    modifier notPausedOrUpgrading() {\n        // diamondCut(); unpause()\n        if(msg.sig != 0x1f931c1c && msg.sig != 0x3f4ba83a) {\n            DiamondStorageLib.DiamondStorage storage ds = DiamondStorageLib.diamondStorage();\n            require(ds._active, \"ProtocolUpgrade: paused.\");\n        }\n        _;\n    }\n}"
    },
    "contracts/proxies/SmartLoanDiamondProxy.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"./openzeppelinVirtual/BeaconProxyVirtual.sol\";\n\n/**\n * @dev This is a copy of OpenZeppelin BeaconProxy (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol) contract.\n * The only difference is usage of overriding the ERC1967Upgrade._upgradeBeaconToAndCall and BeaconProxy._implementation() methods.\n */\n\ncontract SmartLoanDiamondProxy is BeaconProxyVirtual {\n    constructor(address beacon, bytes memory data) payable BeaconProxyVirtual(beacon, data) {}\n\n    /* ========== RECEIVE AVAX FUNCTION ========== */\n    receive() external payable override {}\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IDiamondBeacon(_getBeacon()).implementation(msg.sig);\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal override {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            // 0xc4d66de8 = initialize(address owner)\n            Address.functionDelegateCall(IDiamondBeacon(newBeacon).implementation(0xc4d66de8), data);\n        }\n    }\n}"
    },
    "contracts/facets/AssetsOperationsFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../ReentrancyGuardKeccak.sol\";\nimport \"@openzeppelin/contracts/utils/math/Math.sol\";\nimport {DiamondStorageLib} from \"../lib/DiamondStorageLib.sol\";\nimport \"../lib/SolvencyMethods.sol\";\nimport \"../TokenManager.sol\";\n\n//this path is updated during deployment\nimport \"../lib/avalanche/DeploymentConstants.sol\";\n\ncontract AssetsOperationsFacet is ReentrancyGuardKeccak, SolvencyMethods {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    /* ========== PUBLIC AND EXTERNAL MUTATIVE FUNCTIONS ========== */\n\n    /**\n    * Funds the loan with a specified amount of a defined token\n    * @dev Requires approval for ERC20 token on frontend side\n    * @param _fundedAsset asset to be funded\n    * @param _amount to be funded\n    **/\n    function fund(bytes32 _fundedAsset, uint256 _amount) public virtual {\n        IERC20Metadata token = getERC20TokenInstance(_fundedAsset, false);\n        address(token).safeTransferFrom(msg.sender, address(this), _amount);\n        if (token.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(_fundedAsset, address(token));\n        }\n\n        emit Funded(msg.sender, _fundedAsset, _amount, block.timestamp);\n    }\n\n    /**\n    * Withdraws an amount of a defined asset from the loan\n    * This method could be used to cash out profits from investments\n    * The loan needs to remain solvent after the withdrawal\n    * @dev This function uses the redstone-evm-connector\n    * @param _withdrawnAsset asset to be withdrawn\n    * @param _amount to be withdrawn\n    **/\n    function withdraw(bytes32 _withdrawnAsset, uint256 _amount) public virtual onlyOwner nonReentrant remainsSolvent {\n        IERC20Metadata token = getERC20TokenInstance(_withdrawnAsset, true);\n        require(getBalance(_withdrawnAsset) >= _amount, \"There is not enough funds to withdraw\");\n\n        address(token).safeTransfer(msg.sender, _amount);\n        if (token.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(_withdrawnAsset);\n        }\n\n        emit Withdrawn(msg.sender, _withdrawnAsset, _amount, block.timestamp);\n    }\n\n    /**\n    * Borrows funds from the pool\n    * @dev This function uses the redstone-evm-connector\n    * @param _asset to be borrowed\n    * @param _amount of funds to borrow\n    **/\n    function borrow(bytes32 _asset, uint256 _amount) external onlyOwner remainsSolvent {\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n        Pool pool = Pool(tokenManager.getPoolAddress(_asset));\n        pool.borrow(_amount);\n\n        IERC20Metadata token = getERC20TokenInstance(_asset, false);\n        if (token.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(_asset, address(token));\n        }\n\n        emit Borrowed(msg.sender, _asset, _amount, block.timestamp);\n    }\n\n\n    /**\n     * Repays funds to the pool\n     * @dev This function uses the redstone-evm-connector\n     * @param _asset to be repaid\n     * @param _amount of funds to repay\n     **/\n    function repay(bytes32 _asset, uint256 _amount) public payable {\n        IERC20Metadata token = getERC20TokenInstance(_asset, true);\n\n        if (_isSolvent()) {\n            DiamondStorageLib.enforceIsContractOwner();\n        }\n\n        Pool pool = Pool(DeploymentConstants.getTokenManager().getPoolAddress(_asset));\n\n        _amount = Math.min(_amount, pool.getBorrowed(address(this)));\n        require(token.balanceOf(address(this)) >= _amount, \"There is not enough funds to repay\");\n\n        address(token).safeApprove(address(pool), 0);\n        address(token).safeApprove(address(pool), _amount);\n\n        pool.repay(_amount);\n\n        if (token.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(_asset);\n        }\n\n        emit Repaid(msg.sender, _asset, _amount, block.timestamp);\n    }\n\n    /* ======= VIEW FUNCTIONS ======*/\n\n    /**\n    * Returns a current balance of the asset held by the smart loan\n    * @param _asset the code of an asset\n    **/\n    function getBalance(bytes32 _asset) internal view returns (uint256) {\n        IERC20 token = IERC20(DeploymentConstants.getTokenManager().getAssetAddress(_asset, true));\n        return token.balanceOf(address(this));\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    /**\n     * @dev emitted after a loan is funded\n     * @param user the address which funded the loan\n     * @param asset funded by a user\n     * @param amount the amount of funds\n     * @param timestamp time of funding\n     **/\n    event Funded(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    /**\n     * @dev emitted after the funds are withdrawn from the loan\n     * @param user the address which withdraws funds from the loan\n     * @param asset withdrawn by a user\n     * @param amount of funds withdrawn\n     * @param timestamp of the withdrawal\n     **/\n    event Withdrawn(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    /**\n     * @dev emitted when funds are borrowed from the pool\n     * @param user the address of borrower\n     * @param asset borrowed by an= user\n     * @param amount of the borrowed funds\n     * @param timestamp time of the borrowing\n     **/\n    event Borrowed(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n\n    /**\n     * @dev emitted when funds are repaid to the pool\n     * @param user the address initiating repayment\n     * @param asset asset repaid by a user\n     * @param amount of repaid funds\n     * @param timestamp of the repayment\n     **/\n    event Repaid(address indexed user, bytes32 indexed asset, uint256 amount, uint256 timestamp);\n}"
    },
    "contracts/facets/OwnershipFacet.sol": {
      "content": "\n// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport { DiamondStorageLib } from \"../lib/DiamondStorageLib.sol\";\nimport \"../SmartLoansFactory.sol\";\n\n//This path is updated during deployment\nimport \"../lib/avalanche/DeploymentConstants.sol\";\n\ncontract OwnershipFacet {\n    function proposeOwnershipTransfer(address _newOwner) external {\n        DiamondStorageLib.enforceIsContractOwner();\n        require(_newOwner != msg.sender, \"Can't propose oneself as a contract owner\");\n        require(SmartLoansFactory(DeploymentConstants.getSmartLoansFactoryAddress()).getLoanForOwner(_newOwner) == address(0),\n            \"Can't propose an address that already has a loan\");\n        DiamondStorageLib.setProposedOwner(_newOwner);\n\n        emit OwnershipProposalCreated(msg.sender, _newOwner);\n    }\n\n    function acceptOwnership() external {\n        require(DiamondStorageLib.proposedOwner() == msg.sender, \"Only a proposed user can accept ownership\");\n        DiamondStorageLib.setContractOwner(msg.sender);\n        DiamondStorageLib.setProposedOwner(address(0));\n        SmartLoansFactory(DeploymentConstants.getSmartLoansFactoryAddress()).changeOwnership(msg.sender);\n\n        emit OwnershipProposalAccepted(msg.sender);\n    }\n\n    function owner() external view returns (address owner_) {\n        owner_ = DiamondStorageLib.contractOwner();\n    }\n\n    function proposedOwner() external view returns (address proposedOwner_) {\n        proposedOwner_ = DiamondStorageLib.proposedOwner();\n    }\n\n    /**\n     * @dev emitted after creating a ownership transfer proposal by the owner\n     * @param owner address of the current owner\n     * @param proposed address of the proposed owner\n     **/\n    event OwnershipProposalCreated(address indexed owner, address indexed proposed);\n\n    /**\n     * @dev emitted after accepting a ownership transfer proposal by the new owner\n     * @param newOwner address of the new owner\n     **/\n    event OwnershipProposalAccepted(address indexed newOwner);\n}"
    },
    "@openzeppelin/contracts/proxy/beacon/IBeacon.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {BeaconProxy} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/proxy/Proxy.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overriden so it returns the address to which the fallback function\n     * and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internall call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _beforeFallback();\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\n     * is empty.\n     */\n    receive() external payable virtual {\n        _fallback();\n    }\n\n    /**\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\n     * call, or as part of the Solidity `fallback` or `receive` functions.\n     *\n     * If overriden should call `super._beforeFallback()`.\n     */\n    function _beforeFallback() internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity ^0.8.2;\n\nimport \"../beacon/IBeacon.sol\";\nimport \"../../interfaces/draft-IERC1822.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n *\n * _Available since v4.1._\n *\n * @custom:oz-upgrades-unsafe-allow delegatecall\n */\nabstract contract ERC1967Upgrade {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC1822.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\n * proxy whose upgrades are fully controlled by the current implementation.\n */\ninterface IERC1822Proxiable {\n    /**\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\n     * address.\n     *\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\n     * function revert if invoked through a proxy.\n     */\n    function proxiableUUID() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/StorageSlot.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        assembly {\n            r.slot := slot\n        }\n    }\n}\n"
    },
    "contracts/proxies/openzeppelinVirtual/BeaconProxyVirtual.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/BeaconProxy.sol)\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/proxy/Proxy.sol\";\nimport \"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\";\nimport \"./ERC1967UpgradeVirtual.sol\";\nimport \"../../interfaces/IDiamondBeacon.sol\";\n\n/**\n * @dev This is a copy of OpenZeppelin BeaconProxy (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/beacon/BeaconProxy.sol) contract.\n * The only difference is usage of ERC1967UpgradeVirtual contract that allows overriding the ERC1967Upgrade._upgradeBeaconToAndCall method and removing the obsolete BeaconProxy._setBeacon() method.\n */\ncontract BeaconProxyVirtual is Proxy, ERC1967UpgradeVirtual {\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializating the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IDiamondBeacon}.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        assert(_BEACON_SLOT == bytes32(uint256(keccak256(\"eip1967.proxy.beacon\")) - 1));\n        _upgradeBeaconToAndCall(beacon, data, false);\n    }\n\n    /**\n     * @dev Returns the current beacon address.\n     */\n    function _beacon() internal view virtual returns (address) {\n        return _getBeacon();\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IDiamondBeacon(_getBeacon()).implementation();\n    }\n}"
    },
    "contracts/proxies/openzeppelinVirtual/ERC1967UpgradeVirtual.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/utils/StorageSlot.sol\";\nimport \"../../interfaces/IDiamondBeacon.sol\";\n\n/**\n * @dev This is a copy of OpenZeppelin ERC1967Upgrade (https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/proxy/ERC1967/ERC1967Upgrade.sol) contract.\n * The only difference is the possibility of overriding the ERC1967Upgrade._upgradeBeaconToAndCall method.\n */\nabstract contract ERC1967UpgradeVirtual {\n    // This is the keccak-256 hash of \"eip1967.proxy.rollback\" subtracted by 1\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function _getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Perform implementation upgrade\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeTo(address newImplementation) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n    }\n\n    /**\n     * @dev Perform implementation upgrade with additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCall(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        _upgradeTo(newImplementation);\n        if (data.length > 0 || forceCall) {\n            Address.functionDelegateCall(newImplementation, data);\n        }\n    }\n\n    /**\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\n     *\n     * Emits an {Upgraded} event.\n     */\n    function _upgradeToAndCallUUPS(\n        address newImplementation,\n        bytes memory data,\n        bool forceCall\n    ) internal {\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\n            _setImplementation(newImplementation);\n        } else {\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\n                require(slot == _IMPLEMENTATION_SLOT, \"ERC1967Upgrade: unsupported proxiableUUID\");\n            } catch {\n                revert(\"ERC1967Upgrade: new implementation is not UUPS\");\n            }\n            _upgradeToAndCall(newImplementation, data, forceCall);\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1, and is\n     * validated in the constructor.\n     */\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Returns the current admin.\n     */\n    function _getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        require(newAdmin != address(0), \"ERC1967: new admin is the zero address\");\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {AdminChanged} event.\n     */\n    function _changeAdmin(address newAdmin) internal {\n        emit AdminChanged(_getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\n     */\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Emitted when the beacon is upgraded.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function _getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) internal {\n        require(Address.isContract(newBeacon), \"ERC1967: new beacon is not a contract\");\n        require(\n            Address.isContract(IDiamondBeacon(newBeacon).implementation()),\n            \"ERC1967: beacon implementation is not a contract\"\n        );\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\n    }\n\n    /**\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\n     *\n     * Emits a {BeaconUpgraded} event.\n     */\n    function _upgradeBeaconToAndCall(\n        address newBeacon,\n        bytes memory data,\n        bool forceCall\n    ) internal virtual {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n        if (data.length > 0 || forceCall) {\n            // 0xe1c7392a = init()\n            Address.functionDelegateCall(IDiamondBeacon(newBeacon).implementation(0xe1c7392a), data);\n        }\n    }\n}"
    },
    "contracts/facets/UniswapV2DEXFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../ReentrancyGuardKeccak.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../lib/SolvencyMethods.sol\";\nimport {DiamondStorageLib} from \"../lib/DiamondStorageLib.sol\";\n\n//This path is updated during deployment\nimport \"../lib/avalanche/DeploymentConstants.sol\";\nimport \"../interfaces/IAssetsExchange.sol\";\n\ncontract UniswapV2DEXFacet is ReentrancyGuardKeccak, SolvencyMethods {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    function getProtocolID() pure internal virtual returns (bytes32) {\n        return \"\";\n    }\n\n    function stringToBytes32(string memory source) public pure returns (bytes32 result) {\n        bytes memory tempEmptyStringTest = bytes(source);\n        if (tempEmptyStringTest.length == 0) {\n            return 0x0;\n        }\n\n        assembly {\n            result := mload(add(source, 32))\n        }\n    }\n\n    function bytes32ToString(bytes32 _bytes32) public pure returns (string memory) {\n        uint8 i = 0;\n        while(i < 32 && _bytes32[i] != 0) {\n            i++;\n        }\n        bytes memory bytesArray = new bytes(i);\n        for (i = 0; i < 32 && _bytes32[i] != 0; i++) {\n            bytesArray[i] = _bytes32[i];\n        }\n        return string(bytesArray);\n    }\n\n    /**\n    * Swaps one asset with another\n    * @param _soldAsset asset to be sold\n    * @param _boughtAsset asset to be bought\n    * @param _exactSold exact amount of asset to be sold\n    * @param _minimumBought minimum amount of asset to be bought\n    **/\n    function swapAssets(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) internal remainsSolvent returns (uint256[] memory) {\n        IERC20Metadata soldToken = getERC20TokenInstance(_soldAsset, true);\n        IERC20Metadata boughtToken = getERC20TokenInstance(_boughtAsset, false);\n\n        require(soldToken.balanceOf(address(this)) >= _exactSold, \"Not enough token to sell\");\n        address(soldToken).safeTransfer(getExchangeIntermediaryContract(), _exactSold);\n\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\n\n        uint256[] memory amounts = exchange.swap(address(soldToken), address(boughtToken), _exactSold, _minimumBought);\n\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n        // Add asset to ownedAssets\n        address boughtAssetAddress = tokenManager.getAssetAddress(_boughtAsset, false);\n\n        if (boughtToken.balanceOf(address(this)) > 0) {\n            DiamondStorageLib.addOwnedAsset(_boughtAsset, boughtAssetAddress);\n        }\n\n        // Remove asset from ownedAssets if the asset balance is 0 after the swap\n        if (soldToken.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(_soldAsset);\n        }\n\n        emit Swap(msg.sender, _soldAsset, _boughtAsset, amounts[0], amounts[amounts.length - 1], block.timestamp);\n\n        return amounts;\n    }\n\n    /**\n    * Adds liquidity\n    **/\n    function addLiquidity(bytes32 _assetA, bytes32 _assetB, uint amountA, uint amountB, uint amountAMin, uint amountBMin) internal remainsSolvent {\n        IERC20Metadata tokenA = getERC20TokenInstance(_assetA, true);\n        IERC20Metadata tokenB = getERC20TokenInstance(_assetB, false);\n\n        require(tokenA.balanceOf(address(this)) >= amountA, \"Not enough tokenA to provide\");\n        require(tokenB.balanceOf(address(this)) >= amountB, \"Not enough tokenB to provide\");\n\n        address(tokenA).safeTransfer(getExchangeIntermediaryContract(), amountA);\n        address(tokenB).safeTransfer(getExchangeIntermediaryContract(), amountB);\n\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\n\n        address lpTokenAddress;\n        uint liquidity;\n\n        (lpTokenAddress, amountA, amountB, liquidity)\n          = exchange.addLiquidity(address(tokenA), address(tokenB), amountA, amountB, amountAMin, amountBMin);\n\n        if (IERC20Metadata(lpTokenAddress).balanceOf(address(this)) > 0) {\n            (bytes32 token0, bytes32 token1) = _assetA < _assetB ? (_assetA, _assetB) : (_assetB, _assetA);\n            bytes32 lpToken = stringToBytes32(string.concat(\n                    bytes32ToString(getProtocolID()),\n                        '_',\n                        bytes32ToString(token0),\n                        '_',\n                        bytes32ToString(token1),\n                        '_LP'\n                )\n            );\n            DiamondStorageLib.addOwnedAsset(lpToken, lpTokenAddress);\n        }\n\n        // Remove asset from ownedAssets if the asset balance is 0 after the LP\n        if (tokenA.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(_assetA);\n        }\n\n        if (tokenB.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(_assetB);\n        }\n\n        emit AddLiquidity(msg.sender, lpTokenAddress, _assetA, _assetB, liquidity, amountA, amountB, block.timestamp);\n    }\n\n    /**\n    * Removes liquidity\n    **/\n    function removeLiquidity(bytes32 _assetA, bytes32 _assetB, uint liquidity, uint amountAMin, uint amountBMin) internal remainsSolvent {\n        IERC20Metadata tokenA = getERC20TokenInstance(_assetA, true);\n        IERC20Metadata tokenB = getERC20TokenInstance(_assetB, false);\n\n        IAssetsExchange exchange = IAssetsExchange(getExchangeIntermediaryContract());\n\n        address lpTokenAddress = exchange.getPair(address(tokenA), address(tokenB));\n\n        lpTokenAddress.safeTransfer(getExchangeIntermediaryContract(), liquidity);\n\n        (uint amountA, uint amountB) = exchange.removeLiquidity(address(tokenA), address(tokenB), liquidity, amountAMin, amountBMin);\n\n        // Remove asset from ownedAssets if the asset balance is 0 after the LP\n        if (IERC20Metadata(lpTokenAddress).balanceOf(address(this)) == 0) {\n            (bytes32 token0, bytes32 token1) = _assetA < _assetB ? (_assetA, _assetB) : (_assetB, _assetA);\n            bytes32 lpToken = stringToBytes32(string.concat(\n                    bytes32ToString(getProtocolID()),\n                    '_',\n                    bytes32ToString(token0),\n                    '_',\n                    bytes32ToString(token1)\n                )\n            );\n            DiamondStorageLib.removeOwnedAsset(lpToken);\n        }\n\n        emit RemoveLiquidity(msg.sender, lpTokenAddress, _assetA, _assetB, liquidity, amountA, amountB, block.timestamp);\n    }\n\n    /**\n     * Returns address of DeltaPrime intermediary contract of UniswapV2-like exchange\n     **/\n    //TO BE OVERRIDDEN\n    function getExchangeIntermediaryContract() public virtual returns (address) {\n        return address(0);\n    }\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /**\n     * @dev emitted after a swap of assets\n     * @param user the address of user making the purchase\n     * @param soldAsset sold by the user\n     * @param boughtAsset bought by the user\n     * @param maximumSold maximum to be sold\n     * @param minimumBought minimum to be bought\n     * @param timestamp time of the swap\n     **/\n    event Swap(address indexed user, bytes32 indexed soldAsset, bytes32 indexed boughtAsset, uint256 maximumSold, uint256 minimumBought, uint256 timestamp);\n\n    /**\n     * @dev emitted after providing liquidity\n     * @param user the address of user providing liquidity\n     * @param lpToken the address LP token\n     * @param firstAsset first asset provided for liquidity\n     * @param secondAsset second asset provided for liquidity\n     * @param liquidity amount of liquidity (LP token) added\n     * @param firstAmount amount of the first asset used\n     * @param secondAmount amount of the second asset used\n     * @param timestamp time of the transaction\n     **/\n    event AddLiquidity(address indexed user, address indexed lpToken, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\n\n    /**\n     * @dev emitted after removing liquidity\n     * @param user the address of user providing liquidity\n     * @param lpToken the address LP token\n     * @param firstAsset first asset from LP position\n     * @param secondAsset second asset from LP position\n     * @param liquidity amount of liquidity (LP token) removed\n     * @param firstAmount amount of the first asset obtained\n     * @param secondAmount amount of the second asset obtained\n     * @param timestamp time of the transaction\n     **/\n    event RemoveLiquidity(address indexed user, address indexed lpToken, bytes32 firstAsset, bytes32 secondAsset, uint liquidity, uint firstAmount, uint secondAmount, uint256 timestamp);\n}"
    },
    "contracts/facets/celo/UbeswapDEXFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../UniswapV2DEXFacet.sol\";\n\ncontract UbeswapDEXFacet is UniswapV2DEXFacet {\n\n    /**\n    * Swaps one asset to another\n    * @dev This function uses the redstone-evm-connector\n    * @param _soldAsset asset to be sold\n    * @param _boughtAsset asset to be bought\n    * @param _exactSold exact amount of asset to be sold\n    * @param _minimumBought minimum amount of asset to be bought\n    **/\n    function swapUbeswap(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) public onlyOwner returns (uint256[] memory) {\n        return swapAssets(_soldAsset, _boughtAsset, _exactSold, _minimumBought);\n    }\n\n    /**\n     * Returns address of UniswapV2-like exchange\n     **/\n    function getExchangeIntermediaryContract() public override returns (address) {\n        return 0xd8edCc7162281abFFbd65d4a1b260ef1275e1EAc;\n    }\n}"
    },
    "contracts/facets/avalanche/TraderJoeDEXFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../UniswapV2DEXFacet.sol\";\n\ncontract TraderJoeDEXFacet is UniswapV2DEXFacet {\n    function getProtocolID() pure internal override returns (bytes32) {\n        return \"TJ\";\n    }\n\n    /**\n      * Swaps one asset to another\n      * @dev This function uses the redstone-evm-connector\n      * @param _soldAsset asset to be sold\n      * @param _boughtAsset asset to be bought\n      * @param _exactSold exact amount of asset to be sold\n      * @param _minimumBought minimum amount of asset to be bought\n    **/\n    function swapTraderJoe(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) public onlyOwner returns (uint256[] memory) {\n        return swapAssets(_soldAsset, _boughtAsset, _exactSold, _minimumBought);\n    }\n\n    function addLiquidityTraderJoe(bytes32 _firstAsset, bytes32 _secondAsset, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) public onlyOwner {\n        addLiquidity(_firstAsset, _secondAsset, amountADesired, amountBDesired, amountAMin, amountBMin);\n    }\n\n    function removeLiquidityTraderJoe(bytes32 _firstAsset, bytes32 _secondAsset, uint liquidity, uint amountAMin, uint amountBMin) public onlyOwner {\n        removeLiquidity(_firstAsset, _secondAsset, liquidity, amountAMin, amountBMin);\n    }\n\n    /**\n     * Returns address of UniswapV2-like exchange\n     **/\n    function getExchangeIntermediaryContract() public override returns (address) {\n        return 0xa493b6fF3ea1d0BeD5766DD9F52A5828B6dFC643;\n    }\n}"
    },
    "contracts/facets/avalanche/PangolinDEXFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"../UniswapV2DEXFacet.sol\";\n\ncontract PangolinDEXFacet is UniswapV2DEXFacet {\n    function getProtocolID() pure internal override returns (bytes32) {\n        return \"PNG\";\n    }\n\n    /**\n      * Swaps one asset to another\n      * @dev This function uses the redstone-evm-connector\n      * @param _soldAsset asset to be sold\n      * @param _boughtAsset asset to be bought\n      * @param _exactSold exact amount of asset to be sold\n      * @param _minimumBought minimum amount of asset to be bought\n    **/\n    function swapPangolin(bytes32 _soldAsset, bytes32 _boughtAsset, uint256 _exactSold, uint256 _minimumBought) public onlyOwner returns (uint256[] memory) {\n        return swapAssets(_soldAsset, _boughtAsset, _exactSold, _minimumBought);\n    }\n\n    function addLiquidityPangolin(bytes32 _firstAsset, bytes32 _secondAsset, uint amountADesired, uint amountBDesired, uint amountAMin, uint amountBMin) public onlyOwner {\n        addLiquidity(_firstAsset, _secondAsset, amountADesired, amountBDesired, amountAMin, amountBMin);\n    }\n\n    function removeLiquidityPangolin(bytes32 _firstAsset, bytes32 _secondAsset, uint liquidity, uint amountAMin, uint amountBMin) public onlyOwner {\n        removeLiquidity(_firstAsset, _secondAsset, liquidity, amountAMin, amountBMin);\n    }\n\n    /**\n     * Returns address of UniswapV2-like exchange\n     **/\n    function getExchangeIntermediaryContract() public override returns (address) {\n        return 0x843A5203f14c9A2451519395550Df80f1AB1f538;\n    }\n}"
    },
    "contracts/facets/avalanche/VectorFinanceFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"../../lib/SolvencyMethods.sol\";\nimport \"../../interfaces/IVectorFinanceStaking.sol\";\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\nimport \"../../interfaces/IStakingPositions.sol\";\nimport \"../../OnlyOwnerOrInsolvent.sol\";\n//This path is updated during deployment\nimport \"../../lib/avalanche/DeploymentConstants.sol\";\n\ncontract VectorFinanceFacet is ReentrancyGuardKeccak, SolvencyMethods, OnlyOwnerOrInsolvent {\n\n    // CONSTANTS\n\n    address private constant VectorMainStaking = 0x8B3d9F0017FA369cD8C164D0Cc078bf4cA588aE5;\n\n    address private constant USDCAddress = 0xB97EF9Ef8734C71904D8002F8b6Bc66Dd9c48a6E;\n    address private constant VectorUSDCStaking1 = 0x7550B2d6a1F039Dd6a3d54a857FEFCbF77213D80;\n    address private constant VectorUSDCStaking2 = 0xDA9E515Ce714c4309f7C4483F4802556AE5Df396;\n\n    address private constant WAVAXAddress = 0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7;\n    address private constant VectorWAVAXStaking1 = 0xff5386aF93cF4bD8d5AeCad6df7F4f4be381fD69;\n\n    address private constant SAVAXAddress = 0x2b2C81e08f1Af8835a78Bb2A90AE924ACE0eA4bE;\n    address private constant VectorSAVAXStaking1 = 0x812b7C3b5a9164270Dd8a0b3bc47550877AECdB1;\n\n    // PUBLIC FUNCTIONS\n\n    function vectorStakeUSDC1(uint256 amount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            vault: VectorUSDCStaking1,\n            symbol: \"USDC\",\n            balanceSelector: this.vectorUSDC1Balance.selector,\n            unstakeSelector: this.vectorUnstakeUSDC1.selector\n        });\n        stakeToken(\"USDC\", USDCAddress, VectorUSDCStaking1, amount, position);\n    }\n\n    function vectorUnstakeUSDC1(uint256 amount, uint256 minAmount) public {\n        unstakeToken(\"USDC\", USDCAddress, VectorUSDCStaking1, amount, minAmount, this.vectorUnstakeUSDC1.selector);\n    }\n\n    function vectorUSDC1Balance() public view returns(uint256 _stakedBalance) {\n        IVectorFinanceStaking stakingContract = IVectorFinanceStaking(VectorUSDCStaking1);\n        _stakedBalance = stakingContract.balance(address(this));\n    }\n\n    function vectorStakeUSDC2(uint256 amount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            vault: VectorUSDCStaking2,\n            symbol: \"USDC\",\n            balanceSelector: this.vectorUSDC2Balance.selector,\n            unstakeSelector: this.vectorUnstakeUSDC2.selector\n        });\n        stakeToken(\"USDC\", USDCAddress, VectorUSDCStaking2, amount, position);\n    }\n\n    function vectorUnstakeUSDC2(uint256 amount, uint256 minAmount) public {\n        unstakeToken(\"USDC\", USDCAddress, VectorUSDCStaking2, amount, minAmount, this.vectorUnstakeUSDC2.selector);\n    }\n\n    function vectorUSDC2Balance() public view returns(uint256 _stakedBalance) {\n        IVectorFinanceStaking stakingContract = IVectorFinanceStaking(VectorUSDCStaking2);\n        _stakedBalance = stakingContract.balance(address(this));\n    }\n\n    function vectorStakeWAVAX1(uint256 amount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            vault: VectorWAVAXStaking1,\n            symbol: \"AVAX\",\n            balanceSelector: this.vectorWAVAX1Balance.selector,\n            unstakeSelector: this.vectorUnstakeWAVAX1.selector\n        });\n        stakeToken(\"AVAX\", WAVAXAddress, VectorWAVAXStaking1, amount, position);\n    }\n\n    function vectorUnstakeWAVAX1(uint256 amount, uint256 minAmount) public {\n        unstakeToken(\"AVAX\", WAVAXAddress, VectorWAVAXStaking1, amount, minAmount, this.vectorUnstakeWAVAX1.selector);\n    }\n\n    function vectorWAVAX1Balance() public view returns(uint256 _stakedBalance) {\n        IVectorFinanceStaking stakingContract = IVectorFinanceStaking(VectorWAVAXStaking1);\n        _stakedBalance = stakingContract.balance(address(this));\n    }\n\n    function vectorStakeSAVAX1(uint256 amount) public {\n        IStakingPositions.StakedPosition memory position = IStakingPositions.StakedPosition({\n            vault: VectorSAVAXStaking1,\n            symbol: \"sAVAX\",\n            balanceSelector: this.vectorSAVAX1Balance.selector,\n            unstakeSelector: this.vectorUnstakeSAVAX1.selector\n        });\n        stakeToken(\"sAVAX\", SAVAXAddress, VectorSAVAXStaking1, amount, position);\n    }\n\n    function vectorUnstakeSAVAX1(uint256 amount, uint256 minAmount) public {\n        unstakeToken(\"sAVAX\", SAVAXAddress, VectorSAVAXStaking1, amount, minAmount, this.vectorUnstakeSAVAX1.selector);\n    }\n\n    function vectorSAVAX1Balance() public view returns(uint256 _stakedBalance) {\n        IVectorFinanceStaking stakingContract = IVectorFinanceStaking(VectorSAVAXStaking1);\n        _stakedBalance = stakingContract.balance(address(this));\n    }\n\n    // INTERNAL FUNCTIONS\n    /**\n    * @dev This function uses the redstone-evm-connector\n    **/\n    function stakeToken(bytes32 stakedTokenSymbol, address stakedToken, address receiptToken, uint256 amount, IStakingPositions.StakedPosition memory position) internal\n    onlyOwner nonReentrant remainsSolvent {\n        require(amount > 0, \"Cannot stake 0 tokens\");\n        require(IERC20Metadata(stakedToken).balanceOf(address(this)) >= amount, \"Not enough token available\");\n\n        IERC20Metadata(stakedToken).approve(VectorMainStaking, amount);\n\n        IVectorFinanceStaking(receiptToken).deposit(amount);\n\n        DiamondStorageLib.addStakedPosition(position);\n\n        IERC20Metadata token = getERC20TokenInstance(stakedTokenSymbol, true);\n\n        if (token.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakedTokenSymbol);\n        }\n\n        emit Staked(msg.sender, stakedTokenSymbol, receiptToken, amount, block.timestamp);\n    }\n\n    /**\n    * Unstakes token from Vector Finance\n    * IMPORTANT: This method can be used by anyone when a loan is insolvent. This operation can be costly, that is why\n    * if needed it has to be performed in a separate transaction to liquidation\n    * @dev This function uses the redstone-evm-connector\n    **/\n    function unstakeToken(bytes32 stakedTokenSymbol, address stakedToken, address receiptToken, uint256 amount, uint256 minAmount, bytes4 balanceSelector) internal\n    onlyOwnerOrInsolvent nonReentrant returns (uint256 unstaked) {\n\n        require(amount > 0, \"Cannot unstake 0 tokens\");\n\n        IVectorFinanceStaking stakingContract = IVectorFinanceStaking(receiptToken);\n        uint256 initialStakedBalance = stakingContract.balance(address(this));\n\n        require(initialStakedBalance >= amount, \"Cannot unstake more than was initially staked\");\n\n        IERC20Metadata token = getERC20TokenInstance(stakedTokenSymbol, true);\n\n        uint256 balance = token.balanceOf(address(this));\n\n        stakingContract.withdraw(amount, minAmount);\n\n        uint256 newBalance = token.balanceOf(address(this));\n\n        if (stakingContract.balance(address(this)) == 0) {\n            DiamondStorageLib.removeStakedPosition(balanceSelector);\n        }\n        DiamondStorageLib.addOwnedAsset(stakedTokenSymbol, stakedToken);\n\n        emit Unstaked(msg.sender, stakedTokenSymbol, receiptToken, newBalance - balance, block.timestamp);\n\n        _handleRewards(stakingContract);\n\n        return newBalance - balance;\n    }\n\n    function _handleRewards(IVectorFinanceStaking stakingContract) internal {\n        IVectorRewarder rewarder = stakingContract.rewarder();\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n        uint256 index;\n\n        // We do not want to revert in case of unsupported rewardTokens in order not to block the unstaking/liquidation process\n        while(true) {\n            // No access to the length of rewardTokens[]. Need to iterate until indexOutOfRange\n            (bool success, bytes memory result) = address(rewarder).call(abi.encodeWithSignature(\"rewardTokens(uint256)\", index));\n            if(!success) {\n                break;\n            }\n            address rewardToken = abi.decode(result, (address));\n            bytes32 rewardTokenSymbol = tokenManager.tokenAddressToSymbol(rewardToken);\n            if(rewardTokenSymbol == \"\") {\n                emit UnsupportedRewardToken(msg.sender, rewardToken, block.timestamp);\n                index += 1;\n                continue;\n            }\n            if(IERC20(rewardToken).balanceOf(address(this)) > 0) {\n                DiamondStorageLib.addOwnedAsset(rewardTokenSymbol, rewardToken);\n            }\n            index += 1;\n        }\n    }\n\n    // MODIFIERS\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    // EVENTS\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset the asset that was staked\n        * @param vault address of receipt token\n        * @param amount of the asset that was staked\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 amount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param asset the asset that was unstaked\n        * @param vault address of receipt token\n        * @param amount of the asset that was unstaked\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 amount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user collects rewards in tokens that are not supported\n        * @param user the address collecting rewards\n        * @param asset reward token that was collected\n        * @param timestamp of collecting rewards\n    **/\n    event UnsupportedRewardToken(address indexed user, address indexed asset, uint256 timestamp);\n}"
    },
    "contracts/interfaces/IVectorFinanceStaking.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\nimport \"./IVectorRewarder.sol\";\n\ninterface IVectorFinanceStaking {\n    function balance(address account) external view returns (uint256);\n\n    function withdraw(uint256 amount, uint256 minAmount) external;\n\n    function deposit(uint256 amount) external;\n\n    function decimals() external view returns (uint256);\n\n    function earned(address rewardToken) external view returns (uint256);\n\n    function masterVtx() external view returns (address);\n\n    function stakingToken() external view returns (address);\n\n    function rewarder() external view returns (IVectorRewarder);\n}"
    },
    "contracts/OnlyOwnerOrInsolvent.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Modified version of Openzeppelin (OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)) ReentrancyGuard\n// contract that uses keccak slots instead of the standard storage layout.\n\nimport {DiamondStorageLib} from \"./lib/DiamondStorageLib.sol\";\nimport \"./lib/SolvencyMethods.sol\";\n\npragma solidity 0.8.17;\n\n/**\n * @dev Enforces ownership only if there is no liquidation ongoing\n */\nabstract contract OnlyOwnerOrInsolvent is SolvencyMethods {\n\n    /**\n     * @dev Enforces ownership only if there is no liquidation ongoing\n     */\n    modifier onlyOwnerOrInsolvent() {\n        bool wasSolvent = _isSolvent();\n        if (wasSolvent) {\n            DiamondStorageLib.enforceIsContractOwner();\n        }\n\n        _;\n\n        if (wasSolvent) {\n            require(_isSolvent(), \"Must stay solvent\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/IVectorRewarder.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity 0.8.17;\n\ninterface IVectorRewarder {\n    function rewardTokens(uint256 index) external view returns (address);\n\n    function earned(address account, address rewardToken) external view returns (uint256);\n\n    function updateFor(address account) external;\n}"
    },
    "contracts/facets/avalanche/BeefyFinanceAvalancheFacet.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"../../ReentrancyGuardKeccak.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"../../lib/SolvencyMethods.sol\";\nimport \"../../interfaces/facets/avalanche/IBeefyFinance.sol\";\n\nimport {DiamondStorageLib} from \"../../lib/DiamondStorageLib.sol\";\n\n//This path is updated during deployment\nimport \"../../lib/avalanche/DeploymentConstants.sol\";\nimport \"../../interfaces/facets/avalanche/IBeefyFinance.sol\";\n\ncontract BeefyFinanceAvalancheFacet is ReentrancyGuardKeccak, SolvencyMethods {\n    using TransferHelper for address payable;\n    using TransferHelper for address;\n\n    // Vaults\n    address private constant MOO_PNG_AVAX_USDC_LP = 0xf3340EdF16563D52C7E7C576F2fCC8f3D52464aB;\n    address private constant MOO_PNG_AVAX_USDCe_LP = 0x9B02209a331c072637C6eBd34cdCD6b6A16987a9;\n    address private constant MOO_TJ_AVAX_USDC_LP = 0x7E5bC7088aB3Da3e7fa1Aa7ceF1dC73F5B00681c;\n\n    // LPs\n    address private constant PNG_AVAX_USDC_LP = 0x0e0100Ab771E9288e0Aa97e11557E6654C3a9665;\n    address private constant PNG_AVAX_USDCe_LP = 0xbd918Ed441767fe7924e99F6a0E0B568ac1970D9;\n    address private constant TJ_AVAX_USDC_LP = 0xf4003F4efBE8691B60249E6afbD307aBE7758adb;\n\n    // ----- STAKE -----\n\n    /**\n      * Stakes PNG_AVAX_USDC_LP in the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of PNG_AVAX_USDC_LP to be staked\n    **/\n    function stakePngUsdcAvaxLpBeefy(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _stakeLpBeefy(IBeefyFinance.BeefyStakingDetails({\n            lpTokenAddress: PNG_AVAX_USDC_LP,\n            vaultAddress: MOO_PNG_AVAX_USDC_LP,\n            lpTokenSymbol: \"PNG_AVAX_USDC_LP\",\n            vaultTokenSymbol: \"MOO_PNG_AVAX_USDC_LP\",\n            amount: amount\n        }));\n    }\n\n    /**\n      * Stakes PNG_AVAX_USDCe_LP in the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of PNG_AVAX_USDCe_LP to be staked\n    **/\n    function stakePngUsdceAvaxLpBeefy(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _stakeLpBeefy(IBeefyFinance.BeefyStakingDetails({\n        lpTokenAddress: PNG_AVAX_USDCe_LP,\n        vaultAddress: MOO_PNG_AVAX_USDCe_LP,\n        lpTokenSymbol: \"PNG_AVAX_USDCe_LP\",\n        vaultTokenSymbol: \"MOO_PNG_AVAX_USDCe_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Stakes TJ_AVAX_USDC_LP in the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of TJ_AVAX_USDC_LP to be staked\n    **/\n    function stakeTjUsdcAvaxLpBeefy(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _stakeLpBeefy(IBeefyFinance.BeefyStakingDetails({\n        lpTokenAddress: TJ_AVAX_USDC_LP,\n        vaultAddress: MOO_TJ_AVAX_USDC_LP,\n        lpTokenSymbol: \"TJ_AVAX_USDC_LP\",\n        vaultTokenSymbol: \"MOO_TJ_AVAX_USDC_LP\",\n        amount: amount\n        }));\n    }\n\n    // ----- UNSTAKE -----\n\n    /**\n      * Unstakes PNG_AVAX_USDC_LP from the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of PNG_AVAX_USDC_LP to be unstaked\n    **/\n    function unstakePngUsdcAvaxLpBeefy(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _unstakeLpBeefy(IBeefyFinance.BeefyStakingDetails({\n        lpTokenAddress: PNG_AVAX_USDC_LP,\n        vaultAddress: MOO_PNG_AVAX_USDC_LP,\n        lpTokenSymbol: \"PNG_AVAX_USDC_LP\",\n        vaultTokenSymbol: \"MOO_PNG_AVAX_USDC_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Unstakes PNG_AVAX_USDCe_LP from the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of PNG_AVAX_USDCe_LP to be unstaked\n    **/\n    function unstakePngUsdceAvaxLpBeefy(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _unstakeLpBeefy(IBeefyFinance.BeefyStakingDetails({\n        lpTokenAddress: PNG_AVAX_USDCe_LP,\n        vaultAddress: MOO_PNG_AVAX_USDCe_LP,\n        lpTokenSymbol: \"PNG_AVAX_USDCe_LP\",\n        vaultTokenSymbol: \"MOO_PNG_AVAX_USDCe_LP\",\n        amount: amount\n        }));\n    }\n\n    /**\n      * Untakes TJ_AVAX_USDC_LP from the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param amount amount of TJ_AVAX_USDC_LP to be unstaked\n    **/\n    function unstakeTjUsdcAvaxLpBeefy(uint256 amount) public onlyOwner nonReentrant remainsSolvent {\n        _unstakeLpBeefy(IBeefyFinance.BeefyStakingDetails({\n        lpTokenAddress: TJ_AVAX_USDC_LP,\n        vaultAddress: MOO_TJ_AVAX_USDC_LP,\n        lpTokenSymbol: \"TJ_AVAX_USDC_LP\",\n        vaultTokenSymbol: \"MOO_TJ_AVAX_USDC_LP\",\n        amount: amount\n        }));\n    }\n\n    // ----- PRIVATE METHODS -----\n\n\n    /**\n      * Stakes {stakingDetails.lpTokenAddress} LP token in the Beefy protocol\n      * @dev This function uses the redstone-evm-connector\n      * @param stakingDetails IBeefyFinance.BeefyStakingDetails staking details\n    **/\n    function _stakeLpBeefy(IBeefyFinance.BeefyStakingDetails memory stakingDetails) private {\n        TokenManager tokenManager = DeploymentConstants.getTokenManager();\n\n        require(stakingDetails.amount > 0, \"Cannot stake 0 tokens\");\n        // _ACTIVE = 2\n        require(tokenManager.tokenToStatus(stakingDetails.lpTokenAddress) == 2, \"LP token not supported\");\n        require(tokenManager.tokenToStatus(stakingDetails.vaultAddress) == 2, \"Vault token not supported\");\n        require(IERC20(stakingDetails.lpTokenAddress).balanceOf(address(this)) >= stakingDetails.amount, \"Not enough LP token available\");\n\n        IERC20Metadata(stakingDetails.lpTokenAddress).approve(stakingDetails.vaultAddress, stakingDetails.amount);\n        IBeefyFinance(stakingDetails.vaultAddress).deposit(stakingDetails.amount);\n\n        // Add/remove owned tokens\n        DiamondStorageLib.addOwnedAsset(stakingDetails.vaultTokenSymbol, stakingDetails.vaultAddress);\n        if(IERC20(stakingDetails.lpTokenAddress).balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.lpTokenSymbol);\n        }\n\n        emit Staked(msg.sender, stakingDetails.lpTokenSymbol, stakingDetails.vaultAddress, stakingDetails.amount, block.timestamp);\n    }\n\n    /**\n              * Unstakes {stakingDetails.lpTokenAddress} LP token in the Beefy protocol\n              * @dev This function uses the redstone-evm-connector\n              * @param stakingDetails IBeefyFinance.BeefyStakingDetails staking details\n    **/\n    function _unstakeLpBeefy(IBeefyFinance.BeefyStakingDetails memory stakingDetails) private {\n        IBeefyFinance vaultContract = IBeefyFinance(stakingDetails.vaultAddress);\n        uint256 initialStakedBalance = vaultContract.balanceOf(address(this));\n\n        require(initialStakedBalance >= stakingDetails.amount, \"Cannot unstake more than was initially staked\");\n\n        vaultContract.withdraw(stakingDetails.amount);\n\n        // Add/remove owned tokens\n        DiamondStorageLib.addOwnedAsset(stakingDetails.lpTokenSymbol, stakingDetails.lpTokenAddress);\n        if(vaultContract.balanceOf(address(this)) == 0) {\n            DiamondStorageLib.removeOwnedAsset(stakingDetails.vaultTokenSymbol);\n        }\n\n        emit Unstaked(msg.sender, stakingDetails.lpTokenSymbol, stakingDetails.vaultAddress, stakingDetails.amount, block.timestamp);\n    }\n\n\n    modifier onlyOwner() {\n        DiamondStorageLib.enforceIsContractOwner();\n        _;\n    }\n\n    /* ========== RECEIVE AVAX FUNCTION ========== */\n    receive() external payable {}\n\n    /**\n        * @dev emitted when user stakes an asset\n        * @param user the address executing staking\n        * @param asset the asset that was staked\n        * @param vault address of the vault token\n        * @param amount of the asset that was staked\n        * @param timestamp of staking\n    **/\n    event Staked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 amount, uint256 timestamp);\n\n    /**\n        * @dev emitted when user unstakes an asset\n        * @param user the address executing unstaking\n        * @param asset the asset that was unstaked\n        * @param vault address of the vault token\n        * @param amount of the asset that was unstaked\n        * @param timestamp of unstaking\n    **/\n    event Unstaked(address indexed user, bytes32 indexed asset, address indexed vault, uint256 amount, uint256 timestamp);\n}"
    },
    "contracts/interfaces/facets/avalanche/IBeefyFinance.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\n// Last deployed from commit: ;\npragma solidity ^0.8.4;\n\ninterface IBeefyFinance {\n    // -- Deposit/Withdraw underlying LP token --\n    function depositAll() external;\n\n    function deposit(uint256 amount) external;\n\n    function withdraw(uint256 amount) external;\n\n    function withdrawAll() external;\n\n    // ------------------------------------------\n\n    // User's balance of the vault's token\n    function balanceOf(address account) external view returns (uint256);\n\n    // Vault's balance of the underlying token\n    function balance() external view returns (uint256);\n\n    // Total supply of the vault's token\n    function totalSupply() external view returns (uint256);\n\n    // Decimals of the vault's token\n    function decimals() external view returns (uint256);\n\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    // ---INTERFACE-----\n    struct BeefyStakingDetails {\n        address lpTokenAddress;\n        address vaultAddress;\n        bytes32 lpTokenSymbol;\n        bytes32 vaultTokenSymbol;\n        uint256 amount;\n    }\n\n}"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}