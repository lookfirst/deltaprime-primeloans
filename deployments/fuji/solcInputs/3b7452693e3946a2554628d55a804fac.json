{
  "language": "Solidity",
  "sources": {
    "contracts/deployment/PoolFactory.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Last deployed using commit: ;\npragma solidity ^0.8.4;\n\nimport \"../Pool.sol\";\n\n\n/**\n * @title PoolFactory\n * @dev Contract factory allowing anyone to deploy a pool contract\n */\ncontract PoolFactory {\n  function deployPool() public {\n    Pool pool = new Pool();\n    emit PoolDeployed(address(pool));\n  }\n\n  /**\n   * @dev emitted after pool is deployed by any user\n   * @param poolAddress of deployed pool\n   **/\n  event PoolDeployed(address poolAddress);\n}"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity ^0.8.4;\n\nimport \"@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\";\nimport \"@uniswap/lib/contracts/libraries/TransferHelper.sol\";\nimport \"./CompoundingIndex.sol\";\nimport \"./interfaces/IRatesCalculator.sol\";\nimport \"./interfaces/IBorrowersRegistry.sol\";\n\n\n/**\n * @title Pool\n * @dev Contract allowing user to deposit and borrow funds from a single pot\n * Depositors are rewarded with the interest rates collected from borrowers.\n * Rates are compounded every second and getters always return the current deposit and borrowing balance.\n * The interest rates calculation is delegated to the external calculator contract.\n */\ncontract Pool is OwnableUpgradeable, ReentrancyGuardUpgradeable, IERC20 {\n  using TransferHelper for address payable;\n\n  uint256 public constant MAX_POOL_UTILISATION_FOR_BORROWING = 0.95e18;\n\n  mapping(address => mapping(address => uint256)) private _allowed;\n  mapping(address => uint256) private _deposited;\n\n  mapping(address => uint256) public borrowed;\n\n  IRatesCalculator private _ratesCalculator;\n  IBorrowersRegistry private _borrowersRegistry;\n\n  CompoundingIndex private _depositIndex;\n  CompoundingIndex private _borrowIndex;\n\n  function initialize(IRatesCalculator ratesCalculator_, IBorrowersRegistry borrowersRegistry_, CompoundingIndex depositIndex_, CompoundingIndex borrowIndex_) public initializer {\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \"Must be a contract\");\n\n    _borrowersRegistry = borrowersRegistry_;\n    _ratesCalculator = ratesCalculator_;\n    _depositIndex = depositIndex_;\n    _borrowIndex = borrowIndex_;\n\n    __Ownable_init();\n    __ReentrancyGuard_init();\n    _updateRates();\n  }\n\n  /* ========== SETTERS ========== */\n\n  /**\n   * Sets the new rate calculator.\n   * The calculator is an external contract that contains the logic for calculating deposit and borrowing rates.\n   * Only the owner of the Contract can execute this function.\n   * @dev _ratesCalculator the address of rates calculator\n   **/\n  function setRatesCalculator(IRatesCalculator ratesCalculator_) external onlyOwner {\n    // setting address(0) ratesCalculator_ freezes the pool\n    require(AddressUpgradeable.isContract(address(ratesCalculator_)) || address(ratesCalculator_) == address(0), \"Must be a contract\");\n    _ratesCalculator = ratesCalculator_;\n    if (address(ratesCalculator_) != address(0)) {\n      _updateRates();\n    }\n  }\n\n  /**\n   * Sets the new borrowers registry contract.\n   * The borrowers registry decides if an account can borrow funds.\n   * Only the owner of the Contract can execute this function.\n   * @dev _borrowersRegistry the address of borrowers registry\n   **/\n  function setBorrowersRegistry(IBorrowersRegistry borrowersRegistry_) external onlyOwner {\n    require(address(borrowersRegistry_) != address(0), \"The borrowers registry cannot set to a null address\");\n    require(AddressUpgradeable.isContract(address(borrowersRegistry_)), \"Must be a contract\");\n\n    _borrowersRegistry = borrowersRegistry_;\n    emit BorrowersRegistryChanged(address(borrowersRegistry_), block.timestamp);\n  }\n\n  /* ========== MUTATIVE FUNCTIONS ========== */\n  function transfer(address recipient, uint256 amount) external override returns (bool) {\n    require(recipient != address(0), \"ERC20: cannot transfer to the zero address\");\n    require(recipient != address(this), \"ERC20: cannot transfer to the pool address\");\n\n    _accumulateDepositInterest(msg.sender);\n\n    require(_deposited[msg.sender] >= amount, \"ERC20: transfer amount exceeds balance\");\n\n    // (this is verified in \"require\" above)\n    unchecked {\n      _deposited[msg.sender] -= amount;\n    }\n\n    _accumulateDepositInterest(recipient);\n    _deposited[recipient] += amount;\n\n    emit Transfer(msg.sender, recipient, amount);\n\n    return true;\n  }\n\n  function allowance(address owner, address spender) external view override returns (uint256) {\n    return _allowed[owner][spender];\n  }\n\n  function increaseAllowance(address spender, uint256 addedValue) external returns (bool) {\n    require(spender != address(0), \"Allowance spender cannot be a zero address\");\n    uint256 newAllowance = _allowed[msg.sender][spender] + addedValue;\n    _allowed[msg.sender][spender] = newAllowance;\n\n    emit Approval(msg.sender, spender, newAllowance);\n    return true;\n  }\n\n  function decreaseAllowance(address spender, uint256 subtractedValue) external returns (bool) {\n    require(spender != address(0), \"Allowance spender cannot be a zero address\");\n    uint256 currentAllowance = _allowed[msg.sender][spender];\n    require(currentAllowance >= subtractedValue, \"Current allowance is smaller than the subtractedValue\");\n\n    uint256 newAllowance = currentAllowance - subtractedValue;\n    _allowed[msg.sender][spender] = newAllowance;\n\n    emit Approval(msg.sender, spender, newAllowance);\n    return true;\n  }\n\n  function approve(address spender, uint256 amount) external override returns (bool) {\n    require(spender != address(0), \"Allowance spender cannot be a zero address\");\n    _allowed[msg.sender][spender] = amount;\n\n    emit Approval(msg.sender, spender, amount);\n\n    return true;\n  }\n\n  function transferFrom(address sender, address recipient, uint256 amount) external override returns (bool) {\n    require(_allowed[sender][msg.sender] >= amount, \"Not enough tokens allowed to transfer required amount\");\n    require(recipient != address(0), \"ERC20: cannot transfer to the zero address\");\n    require(recipient != address(this), \"ERC20: cannot transfer to the pool address\");\n\n    _accumulateDepositInterest(msg.sender);\n\n    require(_deposited[sender] >= amount, \"ERC20: transfer amount exceeds balance\");\n\n    _deposited[sender] -= amount;\n    _allowed[sender][msg.sender] -= amount;\n\n    _accumulateDepositInterest(recipient);\n    _deposited[recipient] += amount;\n\n    emit Transfer(sender, recipient, amount);\n\n    return true;\n  }\n\n  /**\n   * Deposits the message value\n   * It updates user deposited balance, total deposited and rates\n   **/\n  function deposit() public payable virtual nonReentrant {\n    _accumulateDepositInterest(msg.sender);\n\n    _mint(msg.sender, msg.value);\n    _updateRates();\n\n    emit Deposit(msg.sender, msg.value, block.timestamp);\n  }\n\n  /**\n   * Withdraws selected amount from the user deposits\n   * @dev _amount the amount to be withdrawn\n   **/\n  function withdraw(uint256 _amount) external nonReentrant {\n    require(address(this).balance >= _amount, \"There is not enough available funds to withdraw\");\n\n    _accumulateDepositInterest(msg.sender);\n\n    _burn(msg.sender, _amount);\n\n    payable(msg.sender).safeTransferETH(_amount);\n\n    _updateRates();\n\n    emit Withdrawal(msg.sender, _amount, block.timestamp);\n  }\n\n  /**\n   * Borrows the specified amount\n   * It updates user borrowed balance, total borrowed amount and rates\n   * @dev _amount the amount to be borrowed\n   **/\n  function borrow(uint256 _amount) public virtual canBorrow nonReentrant {\n    require(address(this).balance >= _amount, \"There is not enough funds in the pool to fund the loan\");\n\n    _accumulateBorrowingInterest(msg.sender);\n\n    borrowed[msg.sender] += _amount;\n    borrowed[address(this)] += _amount;\n\n    payable(msg.sender).safeTransferETH(_amount);\n\n    _updateRates();\n\n    emit Borrowing(msg.sender, _amount, block.timestamp);\n  }\n\n  /**\n   * Repays the message value\n   * It updates user borrowed balance, total borrowed amount and rates\n   * @dev It is only meant to be used by the SmartLoan.\n   **/\n  function repay() external payable nonReentrant {\n    _accumulateBorrowingInterest(msg.sender);\n\n    require(borrowed[msg.sender] >= msg.value, \"You are trying to repay more that was borrowed by a user\");\n\n    borrowed[msg.sender] -= msg.value;\n    borrowed[address(this)] -= msg.value;\n\n    _updateRates();\n\n    emit Repayment(msg.sender, msg.value, block.timestamp);\n  }\n\n  /* =========\n\n\n  /**\n   * Returns the current borrowed amount for the given user\n   * The value includes the interest rates owned at the current moment\n   * @dev _user the address of queried borrower\n  **/\n  function getBorrowed(address _user) public view returns (uint256) {\n    return _borrowIndex.getIndexedValue(borrowed[_user], _user);\n  }\n\n  function totalSupply() public view override returns (uint256) {\n    return balanceOf(address(this));\n  }\n\n  function totalBorrowed() public view returns (uint256) {\n    return getBorrowed(address(this));\n  }\n\n  /**\n   * Returns the current deposited amount for the given user\n   * The value includes the interest rates earned at the current moment\n   * @dev _user the address of queried depositor\n   **/\n  function balanceOf(address user) public view override returns (uint256) {\n    return _depositIndex.getIndexedValue(_deposited[user], user);\n  }\n\n  /**\n   * Returns the current interest rate for deposits\n   **/\n  function getDepositRate() public view returns (uint256) {\n    return _ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply());\n  }\n\n  /**\n   * Returns the current interest rate for borrowings\n   **/\n  function getBorrowingRate() public view returns (uint256) {\n    return _ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply());\n  }\n\n  /**\n   * Recovers the surplus funds resultant from difference between deposit and borrowing rates\n   **/\n  function recoverSurplus(uint256 amount, address account) public onlyOwner nonReentrant {\n    uint256 surplus = address(this).balance + totalBorrowed() - totalSupply();\n\n    require(amount <= address(this).balance, \"Trying to recover more surplus funds than pool balance\");\n    require(amount <= surplus, \"Trying to recover more funds than current surplus\");\n\n    payable(account).safeTransferETH(amount);\n  }\n\n  /* ========== INTERNAL FUNCTIONS ========== */\n\n  function _mint(address account, uint256 amount) internal {\n    require(account != address(0), \"ERC20: cannot mint to the zero address\");\n\n    _deposited[account] += amount;\n    _deposited[address(this)] += amount;\n\n    emit Transfer(address(0), account, amount);\n  }\n\n  function _burn(address account, uint256 amount) internal {\n    require(_deposited[account] >= amount, \"ERC20: burn amount exceeds user balance\");\n    require(_deposited[address(this)] >= amount, \"ERC20: burn amount exceeds current pool indexed balance\");\n\n    // verified in \"require\" above\n    unchecked {\n      _deposited[account] -= amount;\n      _deposited[address(this)] -= amount;\n    }\n\n    emit Transfer(account, address(0), amount);\n  }\n\n  function _updateRates() internal {\n    require(address(_ratesCalculator) != address(0), \"Pool is frozen: cannot perform deposit, withdraw, borrow and repay operations\");\n    _depositIndex.setRate(_ratesCalculator.calculateDepositRate(totalBorrowed(), totalSupply()));\n    _borrowIndex.setRate(_ratesCalculator.calculateBorrowingRate(totalBorrowed(), totalSupply()));\n  }\n\n  function _accumulateDepositInterest(address user) internal {\n    uint256 depositedWithInterest = balanceOf(user);\n    uint256 interest = depositedWithInterest - _deposited[user];\n\n    _mint(user, interest);\n\n    emit InterestCollected(user, interest, block.timestamp);\n\n    _depositIndex.updateUser(user);\n    _depositIndex.updateUser(address(this));\n  }\n\n  function _accumulateBorrowingInterest(address user) internal {\n    uint256 borrowedWithInterest = getBorrowed(user);\n    uint256 interest = borrowedWithInterest - borrowed[user];\n    borrowed[user] = borrowedWithInterest;\n    borrowed[address(this)] += interest;\n\n    _borrowIndex.updateUser(user);\n    _borrowIndex.updateUser(address(this));\n  }\n\n  /* ========== MODIFIERS ========== */\n\n  modifier canBorrow() {\n    require(address(_borrowersRegistry) != address(0), \"Borrowers registry is not configured\");\n    require(_borrowersRegistry.canBorrow(msg.sender), \"Only the accounts authorised by borrowers registry may borrow\");\n    require(totalSupply() != 0, \"Cannot borrow from an empty pool\");\n    _;\n    require((totalBorrowed() * 1e18) / totalSupply() <= MAX_POOL_UTILISATION_FOR_BORROWING, \"The pool utilisation cannot be greater than 95%\");\n  }\n\n  /* ========== EVENTS ========== */\n\n  /**\n   * @dev emitted after the user deposits funds\n   * @param user the address performing the deposit\n   * @param value the amount deposited\n   * @param timestamp of the deposit\n   **/\n  event Deposit(address indexed user, uint256 value, uint256 timestamp);\n\n  /**\n   * @dev emitted after the user withdraws funds\n   * @param user the address performing the withdrawal\n   * @param value the amount withdrawn\n   * @param timestamp of the withdrawal\n   **/\n  event Withdrawal(address indexed user, uint256 value, uint256 timestamp);\n\n  /**\n   * @dev emitted after the user borrows funds\n   * @param user the address that borrows\n   * @param value the amount borrowed\n   * @param timestamp time of the borrowing\n   **/\n  event Borrowing(address indexed user, uint256 value, uint256 timestamp);\n\n  /**\n   * @dev emitted after the user repays debt\n   * @param user the address that repays\n   * @param value the amount repaid\n   * @param timestamp of the repayment\n   **/\n  event Repayment(address indexed user, uint256 value, uint256 timestamp);\n\n  /**\n   * @dev emitted after accumulating deposit interest\n   * @param user the address that the deposit interest is accumulated\n   * @param value the amount accumulated interest\n   * @param timestamp of the interest accumulation\n   **/\n  event InterestCollected(address indexed user, uint256 value, uint256 timestamp);\n\n  /**\n  * @dev emitted after changing borrowers registry\n  * @param registry an address of the newly set borrowers registry\n  * @param timestamp of the borrowers registry change\n  **/\n  event BorrowersRegistryChanged(address indexed registry, uint256 timestamp);\n}"
    },
    "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuardUpgradeable is Initializable {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    function __ReentrancyGuard_init() internal onlyInitializing {\n        __ReentrancyGuard_init_unchained();\n    }\n\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/ContextUpgradeable.sol\";\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    function __Ownable_init() internal onlyInitializing {\n        __Ownable_init_unchained();\n    }\n\n    function __Ownable_init_unchained() internal onlyInitializing {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[49] private __gap;\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary AddressUpgradeable {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@uniswap/lib/contracts/libraries/TransferHelper.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\npragma solidity >=0.6.0;\n\n// helper methods for interacting with ERC20 tokens and sending ETH that do not consistently return true/false\nlibrary TransferHelper {\n    function safeApprove(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('approve(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x095ea7b3, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeApprove: approve failed'\n        );\n    }\n\n    function safeTransfer(\n        address token,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transfer(address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0xa9059cbb, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::safeTransfer: transfer failed'\n        );\n    }\n\n    function safeTransferFrom(\n        address token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        // bytes4(keccak256(bytes('transferFrom(address,address,uint256)')));\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(0x23b872dd, from, to, value));\n        require(\n            success && (data.length == 0 || abi.decode(data, (bool))),\n            'TransferHelper::transferFrom: transferFrom failed'\n        );\n    }\n\n    function safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, 'TransferHelper::safeTransferETH: ETH transfer failed');\n    }\n}\n"
    },
    "contracts/CompoundingIndex.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Last deployed from commit: c5c938a0524b45376dd482cd5c8fb83fa94c2fcc;\npragma solidity ^0.8.4;\n\nimport \"./lib/WadRayMath.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/**\n * CompoundingIndex\n * The contract contains logic for time-based index recalculation with minimal memory footprint.\n * It could be used as a base building block for any index-based entities like deposits and loans.\n * @dev updatedRate the value of updated rate\n **/\ncontract CompoundingIndex is Ownable {\n  using WadRayMath for uint256;\n\n  uint256 private constant SECONDS_IN_YEAR = 365 days;\n  uint256 private constant BASE_RATE = 1e18;\n\n  uint256 public start = block.timestamp;\n\n  uint256 public index = BASE_RATE;\n  uint256 public indexUpdateTime = start;\n\n  mapping(uint256 => uint256) prevIndex;\n  mapping(address => uint256) userUpdateTime;\n\n  uint256 public rate;\n\n  constructor(address owner_) {\n    if (address(owner_) != address(0)) {\n      transferOwnership(owner_);\n    }\n  }\n\n  /* ========== SETTERS ========== */\n\n  /**\n   * Sets the new rate\n   * Before the new rate is set, the index is updated accumulating interest\n   * @dev updatedRate the value of updated rate\n   **/\n  function setRate(uint256 _rate) public onlyOwner {\n    updateIndex();\n    rate = _rate;\n    emit RateUpdated(rate);\n  }\n\n  /* ========== MUTATIVE FUNCTIONS ========== */\n\n  /**\n   * Updates user index\n   * It persists the update time and the update index time->index mapping\n   * @dev user address of the index owner\n   **/\n  function updateUser(address user) public onlyOwner {\n    userUpdateTime[user] = block.timestamp;\n    prevIndex[block.timestamp] = getIndex();\n  }\n\n  /* ========== VIEW FUNCTIONS ========== */\n\n  /**\n   * Gets current value of the compounding index\n   * It recalculates the value on-demand without updating the storage\n   **/\n  function getIndex() public view returns (uint256) {\n    uint256 period = block.timestamp - indexUpdateTime;\n    if (period > 0) {\n      return index.wadToRay().rayMul(getCompoundedFactor(period)).rayToWad();\n    } else {\n      return index;\n    }\n  }\n\n  /**\n   * Gets the user value recalculated to the current index\n   * It recalculates the value on-demand without updating the storage\n   * Ray operations round up the result, but it is only an issue for very small values (with an order of magnitude\n   * of 1 Wei)\n   **/\n  function getIndexedValue(uint256 value, address user) public view returns (uint256) {\n    uint256 userTime = userUpdateTime[user];\n    uint256 prevUserIndex = userTime == 0 ? BASE_RATE : prevIndex[userTime];\n\n    return value.wadToRay().rayMul(getIndex().wadToRay()).rayDiv(prevUserIndex.wadToRay()).rayToWad();\n  }\n\n  /* ========== INTERNAL FUNCTIONS ========== */\n\n  function updateIndex() internal {\n    prevIndex[indexUpdateTime] = index;\n\n    index = getIndex();\n    indexUpdateTime = block.timestamp;\n  }\n\n  /**\n   * Returns compounded factor in Ray\n   **/\n  function getCompoundedFactor(uint256 period) internal view returns (uint256) {\n    return ((rate.wadToRay() / SECONDS_IN_YEAR) + WadRayMath.ray()).rayPow(period);\n  }\n\n  /* ========== EVENTS ========== */\n\n  /**\n   * @dev updatedRate the value of updated rate\n   **/\n  event RateUpdated(uint256 updatedRate);\n}\n"
    },
    "contracts/interfaces/IRatesCalculator.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Last deployed using commit: ;\npragma solidity ^0.8.4;\n\n/**\n * @title IRatesCalculator\n * @dev Interface defining base method for contracts implementing interest rates calculation.\n * The calculated value could be based on the relation between funds borrowed and deposited.\n */\ninterface IRatesCalculator {\n  function calculateBorrowingRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\n\n  function calculateDepositRate(uint256 totalLoans, uint256 totalDeposits) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IBorrowersRegistry.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n// Last deployed using commit: ;\npragma solidity ^0.8.4;\n\n/**\n * @title IBorrowersRegistry\n * Keeps a registry of created trading accounts to verify their borrowing rights\n */\ninterface IBorrowersRegistry {\n  function canBorrow(address _account) external view returns (bool);\n\n  function getLoanForOwner(address _owner) external view returns (address);\n\n  function getOwnerOfLoan(address _loan) external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/AddressUpgradeable.sol\";\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\n        // contract may have been reentered.\n        require(_initializing ? _isConstructor() : !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} modifier, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        require(_initializing, \"Initializable: contract is not initializing\");\n        _;\n    }\n\n    function _isConstructor() private view returns (bool) {\n        return !AddressUpgradeable.isContract(address(this));\n    }\n}\n"
    },
    "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\nimport \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    /**\n     * This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\n     */\n    uint256[50] private __gap;\n}\n"
    },
    "contracts/lib/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL3\npragma solidity ^0.8.4;\n\n/******************\n@title WadRayMath library\n@author Aave\n@dev Provides mul and div function for wads (decimal numbers with 18 digits precision) and rays (decimals with 27 digits)\n@dev https://github.com/aave/aave-protocol/blob/master/contracts/libraries/WadRayMath.sol\n */\n\nlibrary WadRayMath {\n  uint256 internal constant WAD = 1e18;\n  uint256 internal constant halfWAD = WAD / 2;\n\n  uint256 internal constant RAY = 1e27;\n  uint256 internal constant halfRAY = RAY / 2;\n\n  uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n  function ray() internal pure returns (uint256) {\n    return RAY;\n  }\n\n  function wad() internal pure returns (uint256) {\n    return WAD;\n  }\n\n  function halfRay() internal pure returns (uint256) {\n    return halfRAY;\n  }\n\n  function halfWad() internal pure returns (uint256) {\n    return halfWAD;\n  }\n\n  function wadMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    //return halfWAD.add(a.mul(b)).div(WAD);\n    return (halfWAD + (a * b)) / WAD;\n  }\n\n  function wadDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 halfB = b / 2;\n\n    //return halfB.add(a.mul(WAD)).div(b);\n    return (halfB + (a * WAD)) / b;\n  }\n\n  function rayMul(uint256 a, uint256 b) internal pure returns (uint256) {\n    //return halfRAY.add(a.mul(b)).div(RAY);\n    return (halfRAY + (a * b)) / RAY;\n  }\n\n  function rayDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n    uint256 halfB = b / 2;\n\n    //return halfB.add(a.mul(RAY)).div(b);\n    return (halfB + (a * RAY)) / b;\n  }\n\n  function rayToWad(uint256 a) internal pure returns (uint256) {\n    uint256 halfRatio = WAD_RAY_RATIO / 2;\n\n    //return halfRatio.add(a).div(WAD_RAY_RATIO);\n    return (halfRatio + a) / WAD_RAY_RATIO;\n  }\n\n  function wadToRay(uint256 a) internal pure returns (uint256) {\n    //return a.mul(WAD_RAY_RATIO);\n    return a * WAD_RAY_RATIO;\n  }\n\n  /**\n   * @dev calculates base^exp. The code uses the ModExp precompile\n   */\n  //solium-disable-next-line\n  function rayPow(uint256 x, uint256 n) internal pure returns (uint256 z) {\n    z = n % 2 != 0 ? x : RAY;\n\n    for (n /= 2; n != 0; n /= 2) {\n      x = rayMul(x, x);\n\n      if (n % 2 != 0) {\n        z = rayMul(z, x);\n      }\n    }\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}